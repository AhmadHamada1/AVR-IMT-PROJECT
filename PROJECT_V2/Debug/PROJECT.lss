
PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  000059ba  00005a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008001b0  008001b0  00005b9e  2**0
                  ALLOC
  3 .stab         000055c8  00000000  00000000  00005ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019c5  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000cb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000cc6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000cddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ea26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f911  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000106c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001127b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_1>
       8:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_2>
       c:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__vector_6>
      1c:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_7>
      20:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__vector_8>
      24:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__vector_9>
      28:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__vector_10>
      2c:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 19 	call	0x32cc	; 0x32cc <main>
      8a:	0c 94 db 2c 	jmp	0x59b6	; 0x59b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8f 2c 	jmp	0x591e	; 0x591e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8f 2c 	jmp	0x591e	; 0x591e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 83 2c 	jmp	0x5906	; 0x5906 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9f 2c 	jmp	0x593e	; 0x593e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include  "ADC_interface.h"
#include "ADC_register.h"


void ADC_Init (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(ADMUX,REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
SET_BIT(ADMUX,REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

CLR_BIT(ADMUX,ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

SET_BIT(ADCSRA,ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
SET_BIT(ADCSRA,ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
SET_BIT(ADCSRA,ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

SET_BIT(ADCSRA,ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_Read>:

u16 ADC_Read (u8 Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
ADMUX=((ADMUX&0b11100000)|(Channel));
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	98 2f       	mov	r25, r24
     bce:	90 7e       	andi	r25, 0xE0	; 224
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	89 2b       	or	r24, r25
     bd4:	8c 93       	st	X, r24

SET_BIT(ADCSRA,ADSC);
     bd6:	a6 e2       	ldi	r26, 0x26	; 38
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e6 e2       	ldi	r30, 0x26	; 38
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	8c 93       	st	X, r24

while(GET_BIT(ADCSRA,ADIF)==0);
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	80 71       	andi	r24, 0x10	; 16
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	95 95       	asr	r25
     bfc:	87 95       	ror	r24
     bfe:	95 95       	asr	r25
     c00:	87 95       	ror	r24
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	79 f3       	breq	.-34     	; 0xbe4 <ADC_Read+0x2e>

SET_BIT(ADCSRA,ADIE);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	8c 93       	st	X, r24
return	ADC_Reg;
     c14:	e4 e2       	ldi	r30, 0x24	; 36
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01

}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <DCM_voidRotateCW>:
#include "DC_motor_config.h"
#include "DIO_interface.h"


void DCM_voidRotateCW(void)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT,DCM_PIN0,DIO_LOW);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	64 e0       	ldi	r22, 0x04	; 4
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT,DCM_PIN1,DIO_HIGH);
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	65 e0       	ldi	r22, 0x05	; 5
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

}
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <DCM_voidRotateCCW>:
void DCM_voidRotateCCW(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT,DCM_PIN1,DIO_LOW);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	65 e0       	ldi	r22, 0x05	; 5
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT,DCM_PIN0,DIO_HIGH);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	64 e0       	ldi	r22, 0x04	; 4
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <DCM_voidStop>:
void DCM_voidStop(void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT,DCM_PIN1,DIO_LOW);
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	65 e0       	ldi	r22, 0x05	; 5
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT,DCM_PIN0,DIO_LOW);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	64 e0       	ldi	r22, 0x04	; 4
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <DIO_voidInit>:

//#include "STD_TYPES.h"
//#include "BIT_MATH.h"

void DIO_voidInit(void)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62

DDRA=CONCAT(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8e ef       	ldi	r24, 0xFE	; 254
     c98:	80 83       	st	Z, r24
DDRB=CONCAT(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
     c9a:	e7 e3       	ldi	r30, 0x37	; 55
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 ef       	ldi	r24, 0xF0	; 240
     ca0:	80 83       	st	Z, r24
DDRC=CONCAT(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
     ca2:	e4 e3       	ldi	r30, 0x34	; 52
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 83       	st	Z, r24
DDRD=CONCAT(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	80 83       	st	Z, r24
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <DIO_voidWritePin>:

void DIO_voidWritePin(u8 u8PortCpy ,u8 u8PinCpy,u8 u8ValueCpy)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <DIO_voidWritePin+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <DIO_voidWritePin+0x8>
     cc0:	0f 92       	push	r0
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	6a 83       	std	Y+2, r22	; 0x02
     cca:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortCpy)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3d 83       	std	Y+5, r19	; 0x05
     cd4:	2c 83       	std	Y+4, r18	; 0x04
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	9d 81       	ldd	r25, Y+5	; 0x05
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	91 05       	cpc	r25, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <DIO_voidWritePin+0x2a>
     ce0:	44 c0       	rjmp	.+136    	; 0xd6a <DIO_voidWritePin+0xb2>
     ce2:	2c 81       	ldd	r18, Y+4	; 0x04
     ce4:	3d 81       	ldd	r19, Y+5	; 0x05
     ce6:	23 30       	cpi	r18, 0x03	; 3
     ce8:	31 05       	cpc	r19, r1
     cea:	34 f4       	brge	.+12     	; 0xcf8 <DIO_voidWritePin+0x40>
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	71 f0       	breq	.+28     	; 0xd12 <DIO_voidWritePin+0x5a>
     cf6:	bc c0       	rjmp	.+376    	; 0xe70 <DIO_voidWritePin+0x1b8>
     cf8:	2c 81       	ldd	r18, Y+4	; 0x04
     cfa:	3d 81       	ldd	r19, Y+5	; 0x05
     cfc:	23 30       	cpi	r18, 0x03	; 3
     cfe:	31 05       	cpc	r19, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <DIO_voidWritePin+0x4c>
     d02:	5f c0       	rjmp	.+190    	; 0xdc2 <DIO_voidWritePin+0x10a>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	9d 81       	ldd	r25, Y+5	; 0x05
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <DIO_voidWritePin+0x58>
     d0e:	85 c0       	rjmp	.+266    	; 0xe1a <DIO_voidWritePin+0x162>
     d10:	af c0       	rjmp	.+350    	; 0xe70 <DIO_voidWritePin+0x1b8>
	{
	case PORT_A:
		if(u8ValueCpy==DIO_HIGH){
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	a1 f4       	brne	.+40     	; 0xd40 <DIO_voidWritePin+0x88>
			SET_BIT(PORTA,u8PinCpy);
     d18:	ab e3       	ldi	r26, 0x3B	; 59
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	eb e3       	ldi	r30, 0x3B	; 59
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_voidWritePin+0x7e>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_voidWritePin+0x7a>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	98 c0       	rjmp	.+304    	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTA,u8PinCpy);
     d40:	ab e3       	ldi	r26, 0x3B	; 59
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	eb e3       	ldi	r30, 0x3B	; 59
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_voidWritePin+0xa6>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_voidWritePin+0xa2>
     d62:	80 95       	com	r24
     d64:	84 23       	and	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	83 c0       	rjmp	.+262    	; 0xe70 <DIO_voidWritePin+0x1b8>

		break;
	case PORT_B:
		if(u8ValueCpy==DIO_HIGH){
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	a1 f4       	brne	.+40     	; 0xd98 <DIO_voidWritePin+0xe0>
			SET_BIT(PORTB,u8PinCpy);
     d70:	a8 e3       	ldi	r26, 0x38	; 56
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e8 e3       	ldi	r30, 0x38	; 56
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_voidWritePin+0xd6>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_voidWritePin+0xd2>
     d92:	84 2b       	or	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	6c c0       	rjmp	.+216    	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTB,u8PinCpy);
     d98:	a8 e3       	ldi	r26, 0x38	; 56
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e8 e3       	ldi	r30, 0x38	; 56
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_voidWritePin+0xfe>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_voidWritePin+0xfa>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	57 c0       	rjmp	.+174    	; 0xe70 <DIO_voidWritePin+0x1b8>
		break;
	case PORT_C:
		if(u8ValueCpy==DIO_HIGH){
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <DIO_voidWritePin+0x138>
			SET_BIT(PORTC,u8PinCpy);
     dc8:	a5 e3       	ldi	r26, 0x35	; 53
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e3       	ldi	r30, 0x35	; 53
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_voidWritePin+0x12e>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <DIO_voidWritePin+0x12a>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	40 c0       	rjmp	.+128    	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTC,u8PinCpy);
     df0:	a5 e3       	ldi	r26, 0x35	; 53
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e3       	ldi	r30, 0x35	; 53
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_voidWritePin+0x156>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_voidWritePin+0x152>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	2b c0       	rjmp	.+86     	; 0xe70 <DIO_voidWritePin+0x1b8>
		break;
	case PORT_D:
		if(u8ValueCpy==DIO_HIGH){
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <DIO_voidWritePin+0x190>
			SET_BIT(PORTD,u8PinCpy);
     e20:	a2 e3       	ldi	r26, 0x32	; 50
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e2 e3       	ldi	r30, 0x32	; 50
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_voidWritePin+0x186>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_voidWritePin+0x182>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTD,u8PinCpy);
     e48:	a2 e3       	ldi	r26, 0x32	; 50
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_voidWritePin+0x1ae>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_voidWritePin+0x1aa>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
		break;
	}

}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DIO_u8ReadPin>:
u8 DIO_u8ReadPin(u8 u8PortCpy ,u8 u8PinCpy)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <DIO_u8ReadPin+0x6>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <DIO_u8ReadPin+0x8>
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	8a 83       	std	Y+2, r24	; 0x02
     e90:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8PinVal ;

	switch(u8PortCpy)
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	3d 83       	std	Y+5, r19	; 0x05
     e9a:	2c 83       	std	Y+4, r18	; 0x04
     e9c:	4c 81       	ldd	r20, Y+4	; 0x04
     e9e:	5d 81       	ldd	r21, Y+5	; 0x05
     ea0:	42 30       	cpi	r20, 0x02	; 2
     ea2:	51 05       	cpc	r21, r1
     ea4:	b1 f1       	breq	.+108    	; 0xf12 <DIO_u8ReadPin+0x92>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	34 f4       	brge	.+12     	; 0xebc <DIO_u8ReadPin+0x3c>
     eb0:	2c 81       	ldd	r18, Y+4	; 0x04
     eb2:	3d 81       	ldd	r19, Y+5	; 0x05
     eb4:	21 30       	cpi	r18, 0x01	; 1
     eb6:	31 05       	cpc	r19, r1
     eb8:	71 f0       	breq	.+28     	; 0xed6 <DIO_u8ReadPin+0x56>
     eba:	84 c0       	rjmp	.+264    	; 0xfc4 <DIO_u8ReadPin+0x144>
     ebc:	4c 81       	ldd	r20, Y+4	; 0x04
     ebe:	5d 81       	ldd	r21, Y+5	; 0x05
     ec0:	43 30       	cpi	r20, 0x03	; 3
     ec2:	51 05       	cpc	r21, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <DIO_u8ReadPin+0x48>
     ec6:	43 c0       	rjmp	.+134    	; 0xf4e <DIO_u8ReadPin+0xce>
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	84 30       	cpi	r24, 0x04	; 4
     ece:	91 05       	cpc	r25, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <DIO_u8ReadPin+0x54>
     ed2:	5b c0       	rjmp	.+182    	; 0xf8a <DIO_u8ReadPin+0x10a>
     ed4:	77 c0       	rjmp	.+238    	; 0xfc4 <DIO_u8ReadPin+0x144>
	{
	case PORT_A :
		u8PinVal=GET_BIT(PINA,u8PinCpy);
     ed6:	e9 e3       	ldi	r30, 0x39	; 57
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_u8ReadPin+0x70>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	2a 95       	dec	r18
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_u8ReadPin+0x6c>
     ef4:	9a 01       	movw	r18, r20
     ef6:	28 23       	and	r18, r24
     ef8:	39 23       	and	r19, r25
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a9 01       	movw	r20, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8ReadPin+0x88>
     f04:	55 95       	asr	r21
     f06:	47 95       	ror	r20
     f08:	8a 95       	dec	r24
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8ReadPin+0x84>
     f0c:	ca 01       	movw	r24, r20
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	59 c0       	rjmp	.+178    	; 0xfc4 <DIO_u8ReadPin+0x144>
		break;

	case PORT_B :
		u8PinVal=GET_BIT(PINB,u8PinCpy);
     f12:	e6 e3       	ldi	r30, 0x36	; 54
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_u8ReadPin+0xac>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	2a 95       	dec	r18
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_u8ReadPin+0xa8>
     f30:	9a 01       	movw	r18, r20
     f32:	28 23       	and	r18, r24
     f34:	39 23       	and	r19, r25
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a9 01       	movw	r20, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_u8ReadPin+0xc4>
     f40:	55 95       	asr	r21
     f42:	47 95       	ror	r20
     f44:	8a 95       	dec	r24
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_u8ReadPin+0xc0>
     f48:	ca 01       	movw	r24, r20
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	3b c0       	rjmp	.+118    	; 0xfc4 <DIO_u8ReadPin+0x144>
		break;
	case PORT_C :
		u8PinVal=GET_BIT(PINC,u8PinCpy);
     f4e:	e3 e3       	ldi	r30, 0x33	; 51
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_u8ReadPin+0xe8>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	2a 95       	dec	r18
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_u8ReadPin+0xe4>
     f6c:	9a 01       	movw	r18, r20
     f6e:	28 23       	and	r18, r24
     f70:	39 23       	and	r19, r25
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a9 01       	movw	r20, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8ReadPin+0x100>
     f7c:	55 95       	asr	r21
     f7e:	47 95       	ror	r20
     f80:	8a 95       	dec	r24
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8ReadPin+0xfc>
     f84:	ca 01       	movw	r24, r20
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	1d c0       	rjmp	.+58     	; 0xfc4 <DIO_u8ReadPin+0x144>
		break;
	case PORT_D :
		u8PinVal=GET_BIT(PIND,u8PinCpy);
     f8a:	e0 e3       	ldi	r30, 0x30	; 48
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_u8ReadPin+0x124>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	2a 95       	dec	r18
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_u8ReadPin+0x120>
     fa8:	9a 01       	movw	r18, r20
     faa:	28 23       	and	r18, r24
     fac:	39 23       	and	r19, r25
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a9 01       	movw	r20, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_u8ReadPin+0x13c>
     fb8:	55 95       	asr	r21
     fba:	47 95       	ror	r20
     fbc:	8a 95       	dec	r24
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_u8ReadPin+0x138>
     fc0:	ca 01       	movw	r24, r20
     fc2:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	return u8PinVal;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01

}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 u8PortCpy ,u8 u8PinCpy)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <DIO_voidTogglePin+0x6>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <DIO_voidTogglePin+0x8>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3c 83       	std	Y+4, r19	; 0x04
     fee:	2b 83       	std	Y+3, r18	; 0x03
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	82 30       	cpi	r24, 0x02	; 2
     ff6:	91 05       	cpc	r25, r1
     ff8:	51 f1       	breq	.+84     	; 0x104e <DIO_voidTogglePin+0x78>
     ffa:	2b 81       	ldd	r18, Y+3	; 0x03
     ffc:	3c 81       	ldd	r19, Y+4	; 0x04
     ffe:	23 30       	cpi	r18, 0x03	; 3
    1000:	31 05       	cpc	r19, r1
    1002:	34 f4       	brge	.+12     	; 0x1010 <DIO_voidTogglePin+0x3a>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	61 f0       	breq	.+24     	; 0x1026 <DIO_voidTogglePin+0x50>
    100e:	5a c0       	rjmp	.+180    	; 0x10c4 <DIO_voidTogglePin+0xee>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	23 30       	cpi	r18, 0x03	; 3
    1016:	31 05       	cpc	r19, r1
    1018:	71 f1       	breq	.+92     	; 0x1076 <DIO_voidTogglePin+0xa0>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	91 05       	cpc	r25, r1
    1022:	e9 f1       	breq	.+122    	; 0x109e <DIO_voidTogglePin+0xc8>
    1024:	4f c0       	rjmp	.+158    	; 0x10c4 <DIO_voidTogglePin+0xee>
	{
	case PORT_A:
		TOG_BIT(PORTA,u8PinCpy);
    1026:	ab e3       	ldi	r26, 0x3B	; 59
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	eb e3       	ldi	r30, 0x3B	; 59
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_voidTogglePin+0x6e>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_voidTogglePin+0x6a>
    1048:	84 27       	eor	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	3b c0       	rjmp	.+118    	; 0x10c4 <DIO_voidTogglePin+0xee>
		break;
	case PORT_B:
		TOG_BIT(PORTB,u8PinCpy);
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_voidTogglePin+0x96>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_voidTogglePin+0x92>
    1070:	84 27       	eor	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	27 c0       	rjmp	.+78     	; 0x10c4 <DIO_voidTogglePin+0xee>
		break;
	case PORT_C:
		TOG_BIT(PORTC,u8PinCpy);
    1076:	a5 e3       	ldi	r26, 0x35	; 53
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e3       	ldi	r30, 0x35	; 53
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_voidTogglePin+0xbe>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_voidTogglePin+0xba>
    1098:	84 27       	eor	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <DIO_voidTogglePin+0xee>
		break;
	case PORT_D:
		TOG_BIT(PORTD,u8PinCpy);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidTogglePin+0xe6>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidTogglePin+0xe2>
    10c0:	84 27       	eor	r24, r20
    10c2:	8c 93       	st	X, r24
		break;


	}

}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <DIO_voidWritePort>:

void DIO_voidWritePort(u8  u8PortCpy,u8 u8ValueCpy)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_voidWritePort+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <DIO_voidWritePort+0x8>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3c 83       	std	Y+4, r19	; 0x04
    10ea:	2b 83       	std	Y+3, r18	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	d9 f0       	breq	.+54     	; 0x112c <DIO_voidWritePort+0x5a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	23 30       	cpi	r18, 0x03	; 3
    10fc:	31 05       	cpc	r19, r1
    10fe:	34 f4       	brge	.+12     	; 0x110c <DIO_voidWritePort+0x3a>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	61 f0       	breq	.+24     	; 0x1122 <DIO_voidWritePort+0x50>
    110a:	1e c0       	rjmp	.+60     	; 0x1148 <DIO_voidWritePort+0x76>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	23 30       	cpi	r18, 0x03	; 3
    1112:	31 05       	cpc	r19, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <DIO_voidWritePort+0x64>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	91 05       	cpc	r25, r1
    111e:	81 f0       	breq	.+32     	; 0x1140 <DIO_voidWritePort+0x6e>
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <DIO_voidWritePort+0x76>
	{
	case PORT_A :
		PORTA=u8ValueCpy;
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
    112a:	0e c0       	rjmp	.+28     	; 0x1148 <DIO_voidWritePort+0x76>
		break;
	case PORT_B :
			PORTB=u8ValueCpy;
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	80 83       	st	Z, r24
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <DIO_voidWritePort+0x76>
			break;
	case PORT_C :
			PORTC=u8ValueCpy;
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <DIO_voidWritePort+0x76>
			break;
	case PORT_D :
			PORTD=u8ValueCpy;
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
			break;
	}


}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DIO_voidPullUpState>:

void DIO_voidPullUpState(u8  u8PortCpy,u8 u8PinCpy,u8 u8state)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_voidPullUpState+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_voidPullUpState+0x8>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_voidPullUpState+0xa>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	6b 83       	std	Y+3, r22	; 0x03
    1168:	4c 83       	std	Y+4, r20	; 0x04
	//check if input or output
	u8 u8Direction_status;
	switch(u8PortCpy)
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3e 83       	std	Y+6, r19	; 0x06
    1172:	2d 83       	std	Y+5, r18	; 0x05
    1174:	4d 81       	ldd	r20, Y+5	; 0x05
    1176:	5e 81       	ldd	r21, Y+6	; 0x06
    1178:	42 30       	cpi	r20, 0x02	; 2
    117a:	51 05       	cpc	r21, r1
    117c:	b1 f1       	breq	.+108    	; 0x11ea <DIO_voidPullUpState+0x94>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	34 f4       	brge	.+12     	; 0x1194 <DIO_voidPullUpState+0x3e>
    1188:	2d 81       	ldd	r18, Y+5	; 0x05
    118a:	3e 81       	ldd	r19, Y+6	; 0x06
    118c:	21 30       	cpi	r18, 0x01	; 1
    118e:	31 05       	cpc	r19, r1
    1190:	71 f0       	breq	.+28     	; 0x11ae <DIO_voidPullUpState+0x58>
    1192:	84 c0       	rjmp	.+264    	; 0x129c <DIO_voidPullUpState+0x146>
    1194:	4d 81       	ldd	r20, Y+5	; 0x05
    1196:	5e 81       	ldd	r21, Y+6	; 0x06
    1198:	43 30       	cpi	r20, 0x03	; 3
    119a:	51 05       	cpc	r21, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <DIO_voidPullUpState+0x4a>
    119e:	43 c0       	rjmp	.+134    	; 0x1226 <DIO_voidPullUpState+0xd0>
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <DIO_voidPullUpState+0x56>
    11aa:	5b c0       	rjmp	.+182    	; 0x1262 <DIO_voidPullUpState+0x10c>
    11ac:	77 c0       	rjmp	.+238    	; 0x129c <DIO_voidPullUpState+0x146>
		{
		case PORT_A:
			u8Direction_status=GET_BIT(DDRA,u8PinCpy);
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_voidPullUpState+0x72>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	2a 95       	dec	r18
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_voidPullUpState+0x6e>
    11cc:	9a 01       	movw	r18, r20
    11ce:	28 23       	and	r18, r24
    11d0:	39 23       	and	r19, r25
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a9 01       	movw	r20, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_voidPullUpState+0x8a>
    11dc:	55 95       	asr	r21
    11de:	47 95       	ror	r20
    11e0:	8a 95       	dec	r24
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_voidPullUpState+0x86>
    11e4:	ca 01       	movw	r24, r20
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	59 c0       	rjmp	.+178    	; 0x129c <DIO_voidPullUpState+0x146>
			break;
		case PORT_B:
			u8Direction_status=GET_BIT(DDRB,u8PinCpy);
    11ea:	e7 e3       	ldi	r30, 0x37	; 55
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_voidPullUpState+0xae>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	2a 95       	dec	r18
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_voidPullUpState+0xaa>
    1208:	9a 01       	movw	r18, r20
    120a:	28 23       	and	r18, r24
    120c:	39 23       	and	r19, r25
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_voidPullUpState+0xc6>
    1218:	55 95       	asr	r21
    121a:	47 95       	ror	r20
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_voidPullUpState+0xc2>
    1220:	ca 01       	movw	r24, r20
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	3b c0       	rjmp	.+118    	; 0x129c <DIO_voidPullUpState+0x146>
			break;
		case PORT_C:
			u8Direction_status=GET_BIT(DDRC,u8PinCpy);
    1226:	e4 e3       	ldi	r30, 0x34	; 52
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_voidPullUpState+0xea>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	2a 95       	dec	r18
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_voidPullUpState+0xe6>
    1244:	9a 01       	movw	r18, r20
    1246:	28 23       	and	r18, r24
    1248:	39 23       	and	r19, r25
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_voidPullUpState+0x102>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_voidPullUpState+0xfe>
    125c:	ca 01       	movw	r24, r20
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	1d c0       	rjmp	.+58     	; 0x129c <DIO_voidPullUpState+0x146>
			break;
		case PORT_D:
			u8Direction_status=GET_BIT(DDRD,u8PinCpy);
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_voidPullUpState+0x126>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	2a 95       	dec	r18
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_voidPullUpState+0x122>
    1280:	9a 01       	movw	r18, r20
    1282:	28 23       	and	r18, r24
    1284:	39 23       	and	r19, r25
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_voidPullUpState+0x13e>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_voidPullUpState+0x13a>
    1298:	ca 01       	movw	r24, r20
    129a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
if (u8Direction_status ==DIO_INPUT)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 23       	and	r24, r24
    12a0:	29 f4       	brne	.+10     	; 0x12ac <DIO_voidPullUpState+0x156>
{
	DIO_voidWritePin(u8PortCpy,u8PinCpy,u8state);
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	6b 81       	ldd	r22, Y+3	; 0x03
    12a6:	4c 81       	ldd	r20, Y+4	; 0x04
    12a8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
}else {
	//DO NOTHING
}

}
    12ac:	26 96       	adiw	r28, 0x06	; 6
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <EEPROM_vRead>:
#include "EEPROM_private.h"
#include "EEPROM_config.h"


void EEPROM_vRead(u8 cpy_u8LocationAddress,u8 *cpy_pu8Data)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <EEPROM_vRead+0x6>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	7b 83       	std	Y+3, r23	; 0x03
    12ce:	6a 83       	std	Y+2, r22	; 0x02
	//start condition
	TWI_enStartCondition();
    12d0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TWI_enStartCondition>

	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    12d4:	80 ea       	ldi	r24, 0xA0	; 160
    12d6:	0e 94 51 14 	call	0x28a2	; 0x28a2 <TWI_enSetSlaveAddressWithWrite>

	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>

	//REPEAT START TO CHANGE WRITE OPERATION TO READ OPERATION
	TWI_enRepeateStart();
    12e0:	0e 94 1a 14 	call	0x2834	; 0x2834 <TWI_enRepeateStart>
	TWI_enSetSlaveAddressWithRead(SLAVE_ADDRESS);
    12e4:	80 ea       	ldi	r24, 0xA0	; 160
    12e6:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_enSetSlaveAddressWithRead>
	//MASTER RECIEVE DATA
	TWI_enMasterReadData(cpy_pu8Data);
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	0e 94 10 15 	call	0x2a20	; 0x2a20 <TWI_enMasterReadData>

	//STOP
	TWI_vStopCondition();
    12f2:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <TWI_vStopCondition>
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <EEPROM_vWrite>:

void EEPROM_vWrite(u8 cpy_u8LocationAddress, u8 cpy_pu8Data)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	60 97       	sbiw	r28, 0x10	; 16
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	8f 87       	std	Y+15, r24	; 0x0f
    1318:	68 8b       	std	Y+16, r22	; 0x10
	//start condition
	TWI_enStartCondition();
    131a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TWI_enStartCondition>

	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    131e:	80 ea       	ldi	r24, 0xA0	; 160
    1320:	0e 94 51 14 	call	0x28a2	; 0x28a2 <TWI_enSetSlaveAddressWithWrite>
	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);
    1324:	8f 85       	ldd	r24, Y+15	; 0x0f
    1326:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>
	//MASTER SEN DATA
	TWI_enMasterWriteData(cpy_pu8Data);
    132a:	88 89       	ldd	r24, Y+16	; 0x10
    132c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>

	//stop condition
	TWI_vStopCondition();
    1330:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <TWI_vStopCondition>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a0 e2       	ldi	r26, 0x20	; 32
    133a:	b1 e4       	ldi	r27, 0x41	; 65
    133c:	8b 87       	std	Y+11, r24	; 0x0b
    133e:	9c 87       	std	Y+12, r25	; 0x0c
    1340:	ad 87       	std	Y+13, r26	; 0x0d
    1342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1344:	6b 85       	ldd	r22, Y+11	; 0x0b
    1346:	7c 85       	ldd	r23, Y+12	; 0x0c
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4a ef       	ldi	r20, 0xFA	; 250
    1352:	54 e4       	ldi	r21, 0x44	; 68
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8f 83       	std	Y+7, r24	; 0x07
    135e:	98 87       	std	Y+8, r25	; 0x08
    1360:	a9 87       	std	Y+9, r26	; 0x09
    1362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1378:	88 23       	and	r24, r24
    137a:	2c f4       	brge	.+10     	; 0x1386 <EEPROM_vWrite+0x84>
		__ticks = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	3f c0       	rjmp	.+126    	; 0x1404 <EEPROM_vWrite+0x102>
	else if (__tmp > 65535)
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	3f ef       	ldi	r19, 0xFF	; 255
    1392:	4f e7       	ldi	r20, 0x7F	; 127
    1394:	57 e4       	ldi	r21, 0x47	; 71
    1396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139a:	18 16       	cp	r1, r24
    139c:	4c f5       	brge	.+82     	; 0x13f0 <EEPROM_vWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139e:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <EEPROM_vWrite+0xe4>
    13c8:	88 ec       	ldi	r24, 0xC8	; 200
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <EEPROM_vWrite+0xd2>
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	69 f7       	brne	.-38     	; 0x13c8 <EEPROM_vWrite+0xc6>
    13ee:	14 c0       	rjmp	.+40     	; 0x1418 <EEPROM_vWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <EEPROM_vWrite+0x10e>
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);
}
    1418:	60 96       	adiw	r28, 0x10	; 16
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <EEPROM_vWritePage>:


void EEPROM_vWritePage(u8 cpy_u8LocationAddress,u8 *cpy_pu8Data,u8 length)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	63 97       	sbiw	r28, 0x13	; 19
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	88 8b       	std	Y+16, r24	; 0x10
    1440:	7a 8b       	std	Y+18, r23	; 0x12
    1442:	69 8b       	std	Y+17, r22	; 0x11
    1444:	4b 8b       	std	Y+19, r20	; 0x13
	u8 i;
	//start condition
	TWI_enStartCondition();
    1446:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TWI_enStartCondition>

	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    144a:	80 ea       	ldi	r24, 0xA0	; 160
    144c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <TWI_enSetSlaveAddressWithWrite>
	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);
    1450:	88 89       	ldd	r24, Y+16	; 0x10
    1452:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>

	for(i=0;i<length;i++)
    1456:	1f 86       	std	Y+15, r1	; 0x0f
    1458:	80 c0       	rjmp	.+256    	; 0x155a <EEPROM_vWritePage+0x130>
	{
		//MASTER SEN DATA
			TWI_enMasterWriteData(cpy_pu8Data[i]);
    145a:	8f 85       	ldd	r24, Y+15	; 0x0f
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	9a 89       	ldd	r25, Y+18	; 0x12
    1464:	fc 01       	movw	r30, r24
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	80 81       	ld	r24, Z
    146c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e2       	ldi	r26, 0x20	; 32
    1476:	b1 e4       	ldi	r27, 0x41	; 65
    1478:	8b 87       	std	Y+11, r24	; 0x0b
    147a:	9c 87       	std	Y+12, r25	; 0x0c
    147c:	ad 87       	std	Y+13, r26	; 0x0d
    147e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	6b 85       	ldd	r22, Y+11	; 0x0b
    1482:	7c 85       	ldd	r23, Y+12	; 0x0c
    1484:	8d 85       	ldd	r24, Y+13	; 0x0d
    1486:	9e 85       	ldd	r25, Y+14	; 0x0e
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
    149c:	a9 87       	std	Y+9, r26	; 0x09
    149e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <EEPROM_vWritePage+0x98>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <EEPROM_vWritePage+0x116>
	else if (__tmp > 65535)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <EEPROM_vWritePage+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <EEPROM_vWritePage+0xf8>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <EEPROM_vWritePage+0xe6>
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <EEPROM_vWritePage+0xda>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <EEPROM_vWritePage+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <EEPROM_vWritePage+0x122>
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);

	for(i=0;i<length;i++)
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	8f 87       	std	Y+15, r24	; 0x0f
    155a:	9f 85       	ldd	r25, Y+15	; 0x0f
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	98 17       	cp	r25, r24
    1560:	08 f4       	brcc	.+2      	; 0x1564 <EEPROM_vWritePage+0x13a>
    1562:	7b cf       	rjmp	.-266    	; 0x145a <EEPROM_vWritePage+0x30>
			TWI_enMasterWriteData(cpy_pu8Data[i]);
			_delay_ms(10);
	}

	//stop condition
	TWI_vStopCondition();
    1564:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <TWI_vStopCondition>


}
    1568:	63 96       	adiw	r28, 0x13	; 19
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <EXT_INTERRUPT_VID_INIT>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL;
void (*EXTI1_CALLBACK_PTR)(void)=NULL;
void (*EXTI2_CALLBACK_PTR)(void)=NULL;


void EXT_INTERRUPT_VID_INIT(void){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
#if EXT0_MODE==     LOW_LEVEL
	CLR_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   IOC
	SET_BIT(MCUCR,ISC00);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	81 60       	ori	r24, 0x01	; 1
    158e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
    1590:	a5 e5       	ldi	r26, 0x55	; 85
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e5       	ldi	r30, 0x55	; 85
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8d 7f       	andi	r24, 0xFD	; 253
    159c:	8c 93       	st	X, r24

#if EXT1_MODE==     LOW_LEVEL
	CLR_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   IOC
	SET_BIT(MCUCR,ISC10);
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	84 60       	ori	r24, 0x04	; 4
    15aa:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
    15ac:	a5 e5       	ldi	r26, 0x55	; 85
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e5       	ldi	r30, 0x55	; 85
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	87 7f       	andi	r24, 0xF7	; 247
    15b8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC10);
	SET_BIT(MCUCR,ISC11);
#else
#endif
#if EXT2_MODE== FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    15ba:	a4 e5       	ldi	r26, 0x54	; 84
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e4 e5       	ldi	r30, 0x54	; 84
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7b       	andi	r24, 0xBF	; 191
    15c6:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);


#else
#endif
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <EXT0_VID_SET_CALL_BACK>:



void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <EXT0_VID_SET_CALL_BACK+0x6>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CALLBACK_PTR=PTR;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	90 93 b1 01 	sts	0x01B1, r25
    15e4:	80 93 b0 01 	sts	0x01B0, r24
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <EXT1_VID_SET_CALL_BACK>:

void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <EXT1_VID_SET_CALL_BACK+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_CALLBACK_PTR=PTR;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	90 93 b3 01 	sts	0x01B3, r25
    1608:	80 93 b2 01 	sts	0x01B2, r24
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <EXT2_VID_SET_CALL_BACK>:

void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <EXT2_VID_SET_CALL_BACK+0x6>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_CALLBACK_PTR=PTR;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	90 93 b5 01 	sts	0x01B5, r25
    162c:	80 93 b4 01 	sts	0x01B4, r24
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <__vector_1>:


void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_1 (void){
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CALLBACK_PTR();
    1664:	e0 91 b0 01 	lds	r30, 0x01B0
    1668:	f0 91 b1 01 	lds	r31, 0x01B1
    166c:	09 95       	icall
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_2>:

void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_2 (void){
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CALLBACK_PTR();
    16be:	e0 91 b2 01 	lds	r30, 0x01B2
    16c2:	f0 91 b3 01 	lds	r31, 0x01B3
    16c6:	09 95       	icall
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_3 (void){
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CALLBACK_PTR();
    1718:	e0 91 b4 01 	lds	r30, 0x01B4
    171c:	f0 91 b5 01 	lds	r31, 0x01B5
    1720:	09 95       	icall
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <EXT_INTERRUPT_VID_ENABLE>:


void EXT_INTERRUPT_VID_ENABLE(u8 interrupt_number)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <EXT_INTERRUPT_VID_ENABLE+0x6>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number)
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3b 83       	std	Y+3, r19	; 0x03
    175e:	2a 83       	std	Y+2, r18	; 0x02
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	9b 81       	ldd	r25, Y+3	; 0x03
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	89 f0       	breq	.+34     	; 0x178c <EXT_INTERRUPT_VID_ENABLE+0x44>
    176a:	2a 81       	ldd	r18, Y+2	; 0x02
    176c:	3b 81       	ldd	r19, Y+3	; 0x03
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	a1 f0       	breq	.+40     	; 0x179c <EXT_INTERRUPT_VID_ENABLE+0x54>
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	b9 f4       	brne	.+46     	; 0x17aa <EXT_INTERRUPT_VID_ENABLE+0x62>
	{
	case EXT0 :SET_BIT(GICR,INT0)	;
    177c:	ab e5       	ldi	r26, 0x5B	; 91
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e5       	ldi	r30, 0x5B	; 91
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 64       	ori	r24, 0x40	; 64
    1788:	8c 93       	st	X, r24
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <EXT_INTERRUPT_VID_ENABLE+0x62>
	break;
	case EXT1 :SET_BIT(GICR,INT1)	;
    178c:	ab e5       	ldi	r26, 0x5B	; 91
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	eb e5       	ldi	r30, 0x5B	; 91
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 68       	ori	r24, 0x80	; 128
    1798:	8c 93       	st	X, r24
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT2 :SET_BIT(GICR,INT2)	;
    179c:	ab e5       	ldi	r26, 0x5B	; 91
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	eb e5       	ldi	r30, 0x5B	; 91
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 62       	ori	r24, 0x20	; 32
    17a8:	8c 93       	st	X, r24
		break;

	}
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <EXT_INTERRUPT_VID_SET_MODE>:

void EXT_INTERRUPT_VID_SET_MODE(u8 interrupt_number , u8 mode)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <EXT_INTERRUPT_VID_SET_MODE+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <EXT_INTERRUPT_VID_SET_MODE+0x8>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt_number)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3c 83       	std	Y+4, r19	; 0x04
    17ce:	2b 83       	std	Y+3, r18	; 0x03
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	e9 f0       	breq	.+58     	; 0x1814 <EXT_INTERRUPT_VID_SET_MODE+0x5e>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	61 f1       	breq	.+88     	; 0x183c <EXT_INTERRUPT_VID_SET_MODE+0x86>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	d9 f5       	brne	.+118    	; 0x1862 <EXT_INTERRUPT_VID_SET_MODE+0xac>
		{
		case EXT0 :SET_BIT(GIFR,mode)	;
    17ec:	aa e5       	ldi	r26, 0x5A	; 90
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ea e5       	ldi	r30, 0x5A	; 90
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <EXT_INTERRUPT_VID_SET_MODE+0x54>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <EXT_INTERRUPT_VID_SET_MODE+0x50>
    180e:	84 2b       	or	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	27 c0       	rjmp	.+78     	; 0x1862 <EXT_INTERRUPT_VID_SET_MODE+0xac>
		break;
		case EXT1 :SET_BIT(GIFR,mode)	;
    1814:	aa e5       	ldi	r26, 0x5A	; 90
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ea e5       	ldi	r30, 0x5A	; 90
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <EXT_INTERRUPT_VID_SET_MODE+0x7c>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <EXT_INTERRUPT_VID_SET_MODE+0x78>
    1836:	84 2b       	or	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	13 c0       	rjmp	.+38     	; 0x1862 <EXT_INTERRUPT_VID_SET_MODE+0xac>
			break;
		case EXT2 :SET_BIT(GIFR,mode)	;
    183c:	aa e5       	ldi	r26, 0x5A	; 90
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ea e5       	ldi	r30, 0x5A	; 90
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <EXT_INTERRUPT_VID_SET_MODE+0xa4>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <EXT_INTERRUPT_VID_SET_MODE+0xa0>
    185e:	84 2b       	or	r24, r20
    1860:	8c 93       	st	X, r24
			break;

		}

}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <Global_Interrupt_Enable>:
#include "BIT_MATH.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1878:	af e5       	ldi	r26, 0x5F	; 95
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ef e5       	ldi	r30, 0x5F	; 95
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 68       	ori	r24, 0x80	; 128
    1884:	8c 93       	st	X, r24
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1894:	af e5       	ldi	r26, 0x5F	; 95
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ef e5       	ldi	r30, 0x5F	; 95
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8f 77       	andi	r24, 0x7F	; 127
    18a0:	8c 93       	st	X, r24
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <KPD_init>:
//};
	u8 KPD_arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons


void KPD_init(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
	u8 i;


	for(i=ROW_START;i<=ROW_END;i++)
    18b2:	19 82       	std	Y+1, r1	; 0x01
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <KPD_init+0x1e>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN INPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	69 81       	ldd	r22, Y+1	; 0x01
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
void KPD_init(void)
{
	u8 i;


	for(i=ROW_START;i<=ROW_END;i++)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	a8 f3       	brcs	.-22     	; 0x18b6 <KPD_init+0xe>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN INPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
	}

	for(i=COLUMN_START;i<=COLUMN_END;i++)
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	08 c0       	rjmp	.+16     	; 0x18e2 <KPD_init+0x3a>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN OUTPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	69 81       	ldd	r22, Y+1	; 0x01
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN INPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
	}

	for(i=COLUMN_START;i<=COLUMN_END;i++)
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	88 30       	cpi	r24, 0x08	; 8
    18e6:	a8 f3       	brcs	.-22     	; 0x18d2 <KPD_init+0x2a>
		//DIO_SETPINDIR(KPD_PORT,PIN OUTPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
	}


}
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <KPD_GetKey>:


u8 KPD_GetKey(void)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	64 97       	sbiw	r28, 0x14	; 20
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
	u8 key=NoPressedKEY;
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	8c 8b       	std	Y+20, r24	; 0x14
	u8 i,j,k;
	u8 result;
	u8 exitflag=0;
    1908:	1f 86       	std	Y+15, r1	; 0x0f

	for(i=0;i<4;i++)
    190a:	1b 8a       	std	Y+19, r1	; 0x13
    190c:	ba c0       	rjmp	.+372    	; 0x1a82 <KPD_GetKey+0x192>
	{
		//SET ALL COLUMNS HIGH
		for(k=COLUMN_START;k<=COLUMN_END;k++)
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	89 8b       	std	Y+17, r24	; 0x11
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <KPD_GetKey+0x34>
		{
			DIO_voidWritePin(KPD_PORT,k,DIO_HIGH);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	69 89       	ldd	r22, Y+17	; 0x11
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	u8 exitflag=0;

	for(i=0;i<4;i++)
	{
		//SET ALL COLUMNS HIGH
		for(k=COLUMN_START;k<=COLUMN_END;k++)
    191e:	89 89       	ldd	r24, Y+17	; 0x11
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	89 8b       	std	Y+17, r24	; 0x11
    1924:	89 89       	ldd	r24, Y+17	; 0x11
    1926:	88 30       	cpi	r24, 0x08	; 8
    1928:	a8 f3       	brcs	.-22     	; 0x1914 <KPD_GetKey+0x24>
			DIO_voidWritePin(KPD_PORT,k,DIO_HIGH);

		}

		//SET COLUMNS LOW
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i),DIO_LOW);
    192a:	8b 89       	ldd	r24, Y+19	; 0x13
    192c:	98 2f       	mov	r25, r24
    192e:	9c 5f       	subi	r25, 0xFC	; 252
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	69 2f       	mov	r22, r25
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

		for(j=0;j<4;j++)
    193a:	1a 8a       	std	Y+18, r1	; 0x12
    193c:	98 c0       	rjmp	.+304    	; 0x1a6e <KPD_GetKey+0x17e>
		{
			result=DIO_u8ReadPin(KPD_PORT,(ROW_START+j));
    193e:	8a 89       	ldd	r24, Y+18	; 0x12
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	b9 01       	movw	r22, r18
    194a:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_u8ReadPin>
    194e:	88 8b       	std	Y+16, r24	; 0x10
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 ea       	ldi	r26, 0xA0	; 160
    1956:	b1 e4       	ldi	r27, 0x41	; 65
    1958:	8b 87       	std	Y+11, r24	; 0x0b
    195a:	9c 87       	std	Y+12, r25	; 0x0c
    195c:	ad 87       	std	Y+13, r26	; 0x0d
    195e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a ef       	ldi	r20, 0xFA	; 250
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8f 83       	std	Y+7, r24	; 0x07
    197a:	98 87       	std	Y+8, r25	; 0x08
    197c:	a9 87       	std	Y+9, r26	; 0x09
    197e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <KPD_GetKey+0xb2>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <KPD_GetKey+0x130>
	else if (__tmp > 65535)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <KPD_GetKey+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <KPD_GetKey+0x112>
    19e4:	88 ec       	ldi	r24, 0xC8	; 200
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <KPD_GetKey+0x100>
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <KPD_GetKey+0xf4>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <KPD_GetKey+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <KPD_GetKey+0x13c>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result==DIO_LOW)
    1a34:	88 89       	ldd	r24, Y+16	; 0x10
    1a36:	88 23       	and	r24, r24
    1a38:	b9 f4       	brne	.+46     	; 0x1a68 <KPD_GetKey+0x178>
			{
				key=KPD_arr[j][i];
    1a3a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	8b 89       	ldd	r24, Y+19	; 0x13
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	ca 01       	movw	r24, r20
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	82 0f       	add	r24, r18
    1a52:	93 1f       	adc	r25, r19
    1a54:	fc 01       	movw	r30, r24
    1a56:	e1 58       	subi	r30, 0x81	; 129
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag=1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag==1)
    1a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	39 f0       	breq	.+14     	; 0x1a76 <KPD_GetKey+0x186>
		}

		//SET COLUMNS LOW
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i),DIO_LOW);

		for(j=0;j<4;j++)
    1a68:	8a 89       	ldd	r24, Y+18	; 0x12
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	8a 8b       	std	Y+18, r24	; 0x12
    1a6e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	08 f4       	brcc	.+2      	; 0x1a76 <KPD_GetKey+0x186>
    1a74:	64 cf       	rjmp	.-312    	; 0x193e <KPD_GetKey+0x4e>
				{
					break;
				}
			}
		}
		if(exitflag==1)
    1a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	39 f0       	breq	.+14     	; 0x1a8a <KPD_GetKey+0x19a>
	u8 key=NoPressedKEY;
	u8 i,j,k;
	u8 result;
	u8 exitflag=0;

	for(i=0;i<4;i++)
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	84 30       	cpi	r24, 0x04	; 4
    1a86:	08 f4       	brcc	.+2      	; 0x1a8a <KPD_GetKey+0x19a>
    1a88:	42 cf       	rjmp	.-380    	; 0x190e <KPD_GetKey+0x1e>
		{
			break;
		}
	}

	return key;
    1a8a:	8c 89       	ldd	r24, Y+20	; 0x14
}
    1a8c:	64 96       	adiw	r28, 0x14	; 20
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <LCD_vidInit>:
#include <util/delay.h>
//#include "LCD_private.h"
//#include "LCD_config.h"

void LCD_vidInit(void)
{
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	c4 55       	subi	r28, 0x54	; 84
    1aac:	d0 40       	sbci	r29, 0x00	; 0
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
	//PORT IS OUTPUT FORM CONFIGURATION DIO_CONFIG.H

	//make enable low
	DIO_voidWritePin(lcd_CONTROLPORT ,lcd_EPIN,DIO_LOW);
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	66 e0       	ldi	r22, 0x06	; 6
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ef 5a       	subi	r30, 0xAF	; 175
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 ef       	ldi	r26, 0xF0	; 240
    1ace:	b1 e4       	ldi	r27, 0x41	; 65
    1ad0:	80 83       	st	Z, r24
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	a2 83       	std	Z+2, r26	; 0x02
    1ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	03 5b       	subi	r16, 0xB3	; 179
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ef 5a       	subi	r30, 0xAF	; 175
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a ef       	ldi	r20, 0xFA	; 250
    1af2:	54 e4       	ldi	r21, 0x44	; 68
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b06:	fe 01       	movw	r30, r28
    1b08:	e3 5b       	subi	r30, 0xB3	; 179
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	44 f4       	brge	.+16     	; 0x1b34 <LCD_vidInit+0x96>
		__ticks = 1;
    1b24:	fe 01       	movw	r30, r28
    1b26:	e5 5b       	subi	r30, 0xB5	; 181
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	64 c0       	rjmp	.+200    	; 0x1bfc <LCD_vidInit+0x15e>
	else if (__tmp > 65535)
    1b34:	fe 01       	movw	r30, r28
    1b36:	e3 5b       	subi	r30, 0xB3	; 179
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <LCD_vidInit+0xb6>
    1b52:	43 c0       	rjmp	.+134    	; 0x1bda <LCD_vidInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	fe 01       	movw	r30, r28
    1b56:	ef 5a       	subi	r30, 0xAF	; 175
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8e 01       	movw	r16, r28
    1b74:	05 5b       	subi	r16, 0xB5	; 181
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	1f c0       	rjmp	.+62     	; 0x1bca <LCD_vidInit+0x12c>
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e7 5b       	subi	r30, 0xB7	; 183
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e7 5b       	subi	r30, 0xB7	; 183
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_vidInit+0x106>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e7 5b       	subi	r30, 0xB7	; 183
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	de 01       	movw	r26, r28
    1bb4:	a5 5b       	subi	r26, 0xB5	; 181
    1bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e5 5b       	subi	r30, 0xB5	; 181
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	9c 93       	st	X, r25
    1bc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e5 5b       	subi	r30, 0xB5	; 181
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	d1 f6       	brne	.-76     	; 0x1b8c <LCD_vidInit+0xee>
    1bd8:	27 c0       	rjmp	.+78     	; 0x1c28 <LCD_vidInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	8e 01       	movw	r16, r28
    1bdc:	05 5b       	subi	r16, 0xB5	; 181
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	e3 5b       	subi	r30, 0xB3	; 179
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	80 83       	st	Z, r24
    1bfc:	de 01       	movw	r26, r28
    1bfe:	a9 5b       	subi	r26, 0xB9	; 185
    1c00:	bf 4f       	sbci	r27, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	e5 5b       	subi	r30, 0xB5	; 181
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	8d 93       	st	X+, r24
    1c0e:	9c 93       	st	X, r25
    1c10:	fe 01       	movw	r30, r28
    1c12:	e9 5b       	subi	r30, 0xB9	; 185
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_vidInit+0x17c>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e9 5b       	subi	r30, 0xB9	; 185
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_vidSendCommand(lcd_Home);
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ed 5b       	subi	r30, 0xBD	; 189
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 ea       	ldi	r26, 0xA0	; 160
    1c3a:	b0 e4       	ldi	r27, 0x40	; 64
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	8e 01       	movw	r16, r28
    1c46:	01 5c       	subi	r16, 0xC1	; 193
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ed 5b       	subi	r30, 0xBD	; 189
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 83       	st	Z, r24
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	a2 83       	std	Z+2, r26	; 0x02
    1c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c72:	fe 01       	movw	r30, r28
    1c74:	ff 96       	adiw	r30, 0x3f	; 63
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <LCD_vidInit+0x1fa>
		__ticks = 1;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9e af       	std	Y+62, r25	; 0x3e
    1c94:	8d af       	std	Y+61, r24	; 0x3d
    1c96:	46 c0       	rjmp	.+140    	; 0x1d24 <LCD_vidInit+0x286>
	else if (__tmp > 65535)
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ff 96       	adiw	r30, 0x3f	; 63
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	64 f5       	brge	.+88     	; 0x1d0c <LCD_vidInit+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ed 5b       	subi	r30, 0xBD	; 189
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e af       	std	Y+62, r25	; 0x3e
    1ce0:	8d af       	std	Y+61, r24	; 0x3d
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_vidInit+0x264>
    1ce4:	88 ec       	ldi	r24, 0xC8	; 200
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9c af       	std	Y+60, r25	; 0x3c
    1cea:	8b af       	std	Y+59, r24	; 0x3b
    1cec:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cee:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_vidInit+0x252>
    1cf4:	9c af       	std	Y+60, r25	; 0x3c
    1cf6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cfa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9e af       	std	Y+62, r25	; 0x3e
    1d00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_vidInit+0x246>
    1d0a:	16 c0       	rjmp	.+44     	; 0x1d38 <LCD_vidInit+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ff 96       	adiw	r30, 0x3f	; 63
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e af       	std	Y+62, r25	; 0x3e
    1d22:	8d af       	std	Y+61, r24	; 0x3d
    1d24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d28:	9a af       	std	Y+58, r25	; 0x3a
    1d2a:	89 af       	std	Y+57, r24	; 0x39
    1d2c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_vidInit+0x292>
    1d34:	9a af       	std	Y+58, r25	; 0x3a
    1d36:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    1d38:	88 e3       	ldi	r24, 0x38	; 56
    1d3a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 ea       	ldi	r26, 0xA0	; 160
    1d44:	b0 e4       	ldi	r27, 0x40	; 64
    1d46:	8d ab       	std	Y+53, r24	; 0x35
    1d48:	9e ab       	std	Y+54, r25	; 0x36
    1d4a:	af ab       	std	Y+55, r26	; 0x37
    1d4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d50:	7e a9       	ldd	r23, Y+54	; 0x36
    1d52:	8f a9       	ldd	r24, Y+55	; 0x37
    1d54:	98 ad       	ldd	r25, Y+56	; 0x38
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a ef       	ldi	r20, 0xFA	; 250
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	89 ab       	std	Y+49, r24	; 0x31
    1d68:	9a ab       	std	Y+50, r25	; 0x32
    1d6a:	ab ab       	std	Y+51, r26	; 0x33
    1d6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d70:	7a a9       	ldd	r23, Y+50	; 0x32
    1d72:	8b a9       	ldd	r24, Y+51	; 0x33
    1d74:	9c a9       	ldd	r25, Y+52	; 0x34
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_vidInit+0x2f2>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_vidInit+0x370>
	else if (__tmp > 65535)
    1d90:	69 a9       	ldd	r22, Y+49	; 0x31
    1d92:	7a a9       	ldd	r23, Y+50	; 0x32
    1d94:	8b a9       	ldd	r24, Y+51	; 0x33
    1d96:	9c a9       	ldd	r25, Y+52	; 0x34
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_vidInit+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6d a9       	ldd	r22, Y+53	; 0x35
    1daa:	7e a9       	ldd	r23, Y+54	; 0x36
    1dac:	8f a9       	ldd	r24, Y+55	; 0x37
    1dae:	98 ad       	ldd	r25, Y+56	; 0x38
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	98 ab       	std	Y+48, r25	; 0x30
    1dce:	8f a7       	std	Y+47, r24	; 0x2f
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_vidInit+0x352>
    1dd2:	88 ec       	ldi	r24, 0xC8	; 200
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e a7       	std	Y+46, r25	; 0x2e
    1dd8:	8d a7       	std	Y+45, r24	; 0x2d
    1dda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ddc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_vidInit+0x340>
    1de2:	9e a7       	std	Y+46, r25	; 0x2e
    1de4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	98 ab       	std	Y+48, r25	; 0x30
    1dee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df2:	98 a9       	ldd	r25, Y+48	; 0x30
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_vidInit+0x334>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <LCD_vidInit+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1e00:	9c a9       	ldd	r25, Y+52	; 0x34
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
    1e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e10:	98 a9       	ldd	r25, Y+48	; 0x30
    1e12:	9c a7       	std	Y+44, r25	; 0x2c
    1e14:	8b a7       	std	Y+43, r24	; 0x2b
    1e16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_vidInit+0x37c>
    1e1e:	9c a7       	std	Y+44, r25	; 0x2c
    1e20:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_vidSendCommand(lcd_DisplayOn);
    1e22:	8c e0       	ldi	r24, 0x0C	; 12
    1e24:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e2e:	b0 e4       	ldi	r27, 0x40	; 64
    1e30:	8f a3       	std	Y+39, r24	; 0x27
    1e32:	98 a7       	std	Y+40, r25	; 0x28
    1e34:	a9 a7       	std	Y+41, r26	; 0x29
    1e36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8b a3       	std	Y+35, r24	; 0x23
    1e52:	9c a3       	std	Y+36, r25	; 0x24
    1e54:	ad a3       	std	Y+37, r26	; 0x25
    1e56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e58:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <LCD_vidInit+0x3dc>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <LCD_vidInit+0x45a>
	else if (__tmp > 65535)
    1e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e80:	9e a1       	ldd	r25, Y+38	; 0x26
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <LCD_vidInit+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6f a1       	ldd	r22, Y+39	; 0x27
    1e94:	78 a5       	ldd	r23, Y+40	; 0x28
    1e96:	89 a5       	ldd	r24, Y+41	; 0x29
    1e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	89 a3       	std	Y+33, r24	; 0x21
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_vidInit+0x43c>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_vidInit+0x42a>
    1ecc:	98 a3       	std	Y+32, r25	; 0x20
    1ece:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_vidInit+0x41e>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <LCD_vidInit+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
    1f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_vidInit+0x466>
    1f08:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_vidSendCommand(lcd_Clear);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 ea       	ldi	r26, 0xA0	; 160
    1f18:	b0 e4       	ldi	r27, 0x40	; 64
    1f1a:	89 8f       	std	Y+25, r24	; 0x19
    1f1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	69 8d       	ldd	r22, Y+25	; 0x19
    1f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8d 8b       	std	Y+21, r24	; 0x15
    1f3c:	9e 8b       	std	Y+22, r25	; 0x16
    1f3e:	af 8b       	std	Y+23, r26	; 0x17
    1f40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f42:	6d 89       	ldd	r22, Y+21	; 0x15
    1f44:	7e 89       	ldd	r23, Y+22	; 0x16
    1f46:	8f 89       	ldd	r24, Y+23	; 0x17
    1f48:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e8       	ldi	r20, 0x80	; 128
    1f50:	5f e3       	ldi	r21, 0x3F	; 63
    1f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <LCD_vidInit+0x4c6>
		__ticks = 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
    1f62:	3f c0       	rjmp	.+126    	; 0x1fe2 <LCD_vidInit+0x544>
	else if (__tmp > 65535)
    1f64:	6d 89       	ldd	r22, Y+21	; 0x15
    1f66:	7e 89       	ldd	r23, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	4c f5       	brge	.+82     	; 0x1fce <LCD_vidInit+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <LCD_vidInit+0x526>
    1fa6:	88 ec       	ldi	r24, 0xC8	; 200
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9a 8b       	std	Y+18, r25	; 0x12
    1fac:	89 8b       	std	Y+17, r24	; 0x11
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_vidInit+0x514>
    1fb6:	9a 8b       	std	Y+18, r25	; 0x12
    1fb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f7       	brne	.-38     	; 0x1fa6 <LCD_vidInit+0x508>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <LCD_vidInit+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fce:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9c 8b       	std	Y+20, r25	; 0x14
    1fe0:	8b 8b       	std	Y+19, r24	; 0x13
    1fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe6:	98 8b       	std	Y+16, r25	; 0x10
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	98 89       	ldd	r25, Y+16	; 0x10
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_vidInit+0x550>
    1ff2:	98 8b       	std	Y+16, r25	; 0x10
    1ff4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_vidSendCommand(lcd_EntryMode);
    1ff6:	86 e0       	ldi	r24, 0x06	; 6
    1ff8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 ea       	ldi	r26, 0xA0	; 160
    2002:	b0 e4       	ldi	r27, 0x40	; 64
    2004:	8b 87       	std	Y+11, r24	; 0x0b
    2006:	9c 87       	std	Y+12, r25	; 0x0c
    2008:	ad 87       	std	Y+13, r26	; 0x0d
    200a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	98 87       	std	Y+8, r25	; 0x08
    2028:	a9 87       	std	Y+9, r26	; 0x09
    202a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_vidInit+0x5b0>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_vidInit+0x62e>
	else if (__tmp > 65535)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_vidInit+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_vidInit+0x610>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_vidInit+0x5fe>
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_vidInit+0x5f2>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <LCD_vidInit+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_vidInit+0x63a>
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    20e0:	cc 5a       	subi	r28, 0xAC	; 172
    20e2:	df 4f       	sbci	r29, 0xFF	; 255
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	08 95       	ret

000020f8 <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 u8CmdCpy)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	2f 97       	sbiw	r28, 0x0f	; 15
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	8f 87       	std	Y+15, r24	; 0x0f
	//COMMAND(0) OR DATA(1)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RSPIN,DIO_LOW);
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	64 e0       	ldi	r22, 0x04	; 4
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	//read(1) OR write(0)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RWPIN,DIO_LOW);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	65 e0       	ldi	r22, 0x05	; 5
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//make enable low
	DIO_voidWritePin(lcd_CONTROLPORT ,lcd_EPIN,DIO_LOW);
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	66 e0       	ldi	r22, 0x06	; 6
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//WRITE COMMAND ON DATA_PINS
	DIO_voidWritePort(lcd_DATAPORT,u8CmdCpy);
    212c:	84 e0       	ldi	r24, 0x04	; 4
    212e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2130:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_voidWritePort>

	//ENABLE SEQUENCE
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_HIGH);
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	66 e0       	ldi	r22, 0x06	; 6
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a0 ea       	ldi	r26, 0xA0	; 160
    2144:	b0 e4       	ldi	r27, 0x40	; 64
    2146:	8b 87       	std	Y+11, r24	; 0x0b
    2148:	9c 87       	std	Y+12, r25	; 0x0c
    214a:	ad 87       	std	Y+13, r26	; 0x0d
    214c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2150:	7c 85       	ldd	r23, Y+12	; 0x0c
    2152:	8d 85       	ldd	r24, Y+13	; 0x0d
    2154:	9e 85       	ldd	r25, Y+14	; 0x0e
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a ef       	ldi	r20, 0xFA	; 250
    215c:	54 e4       	ldi	r21, 0x44	; 68
    215e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8f 83       	std	Y+7, r24	; 0x07
    2168:	98 87       	std	Y+8, r25	; 0x08
    216a:	a9 87       	std	Y+9, r26	; 0x09
    216c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216e:	6f 81       	ldd	r22, Y+7	; 0x07
    2170:	78 85       	ldd	r23, Y+8	; 0x08
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e8       	ldi	r20, 0x80	; 128
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2182:	88 23       	and	r24, r24
    2184:	2c f4       	brge	.+10     	; 0x2190 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	3f c0       	rjmp	.+126    	; 0x220e <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	3f ef       	ldi	r19, 0xFF	; 255
    219c:	4f e7       	ldi	r20, 0x7F	; 127
    219e:	57 e4       	ldi	r21, 0x47	; 71
    21a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a4:	18 16       	cp	r1, r24
    21a6:	4c f5       	brge	.+82     	; 0x21fa <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <LCD_vidSendCommand+0xf8>
    21d2:	88 ec       	ldi	r24, 0xC8	; 200
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_vidSendCommand+0xe6>
    21e2:	9c 83       	std	Y+4, r25	; 0x04
    21e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <LCD_vidSendCommand+0xda>
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	6f 81       	ldd	r22, Y+7	; 0x07
    21fc:	78 85       	ldd	r23, Y+8	; 0x08
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_vidSendCommand+0x122>
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	66 e0       	ldi	r22, 0x06	; 6
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

}
    222c:	2f 96       	adiw	r28, 0x0f	; 15
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <LCD_vidWriteCharctr>:
void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	2f 97       	sbiw	r28, 0x0f	; 15
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	8f 87       	std	Y+15, r24	; 0x0f
	//COMMAND(0) OR DATA(1)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RSPIN,DIO_HIGH);
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	64 e0       	ldi	r22, 0x04	; 4
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	//read(1) OR write(0)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RWPIN,DIO_LOW);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	65 e0       	ldi	r22, 0x05	; 5
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//make enable low
	DIO_voidWritePin(lcd_CONTROLPORT ,lcd_EPIN,DIO_LOW);
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	66 e0       	ldi	r22, 0x06	; 6
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//WRITE COMMAND ON DATA_PINS
	DIO_voidWritePort(lcd_DATAPORT,u8DataCpy);
    2272:	84 e0       	ldi	r24, 0x04	; 4
    2274:	6f 85       	ldd	r22, Y+15	; 0x0f
    2276:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_voidWritePort>

	//ENABLE SEQUENCE
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_HIGH);
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	66 e0       	ldi	r22, 0x06	; 6
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 ea       	ldi	r26, 0xA0	; 160
    228a:	b0 e4       	ldi	r27, 0x40	; 64
    228c:	8b 87       	std	Y+11, r24	; 0x0b
    228e:	9c 87       	std	Y+12, r25	; 0x0c
    2290:	ad 87       	std	Y+13, r26	; 0x0d
    2292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2294:	6b 85       	ldd	r22, Y+11	; 0x0b
    2296:	7c 85       	ldd	r23, Y+12	; 0x0c
    2298:	8d 85       	ldd	r24, Y+13	; 0x0d
    229a:	9e 85       	ldd	r25, Y+14	; 0x0e
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	4a ef       	ldi	r20, 0xFA	; 250
    22a2:	54 e4       	ldi	r21, 0x44	; 68
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	8f 83       	std	Y+7, r24	; 0x07
    22ae:	98 87       	std	Y+8, r25	; 0x08
    22b0:	a9 87       	std	Y+9, r26	; 0x09
    22b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e8       	ldi	r20, 0x80	; 128
    22c2:	5f e3       	ldi	r21, 0x3F	; 63
    22c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c8:	88 23       	and	r24, r24
    22ca:	2c f4       	brge	.+10     	; 0x22d6 <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	3f c0       	rjmp	.+126    	; 0x2354 <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	3f ef       	ldi	r19, 0xFF	; 255
    22e2:	4f e7       	ldi	r20, 0x7F	; 127
    22e4:	57 e4       	ldi	r21, 0x47	; 71
    22e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ea:	18 16       	cp	r1, r24
    22ec:	4c f5       	brge	.+82     	; 0x2340 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e2       	ldi	r20, 0x20	; 32
    22fc:	51 e4       	ldi	r21, 0x41	; 65
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <LCD_vidWriteCharctr+0xf8>
    2318:	88 ec       	ldi	r24, 0xC8	; 200
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	8b 83       	std	Y+3, r24	; 0x03
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <LCD_vidWriteCharctr+0xe6>
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	69 f7       	brne	.-38     	; 0x2318 <LCD_vidWriteCharctr+0xda>
    233e:	14 c0       	rjmp	.+40     	; 0x2368 <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <LCD_vidWriteCharctr+0x122>
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	66 e0       	ldi	r22, 0x06	; 6
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
}
    2372:	2f 96       	adiw	r28, 0x0f	; 15
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_vidWriteString>:

void LCD_vidWriteString (const char* pu8StringCpy)//LCD_vidWriteString
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <LCD_vidWriteString+0x6>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <LCD_vidWriteString+0x24>
//	for(i=0;i<u8Index;i++)
//	{
//		LCD_vidWriteCharctr(pu8StringCpy[i]);
//	}
	 while (*pu8StringCpy != '\0') {
	        LCD_vidWriteCharctr(*pu8StringCpy);
    2394:	e9 81       	ldd	r30, Y+1	; 0x01
    2396:	fa 81       	ldd	r31, Y+2	; 0x02
    2398:	80 81       	ld	r24, Z
    239a:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
	        pu8StringCpy++;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
//
//	for(i=0;i<u8Index;i++)
//	{
//		LCD_vidWriteCharctr(pu8StringCpy[i]);
//	}
	 while (*pu8StringCpy != '\0') {
    23a8:	e9 81       	ldd	r30, Y+1	; 0x01
    23aa:	fa 81       	ldd	r31, Y+2	; 0x02
    23ac:	80 81       	ld	r24, Z
    23ae:	88 23       	and	r24, r24
    23b0:	89 f7       	brne	.-30     	; 0x2394 <LCD_vidWriteString+0x10>
	        LCD_vidWriteCharctr(*pu8StringCpy);
	        pu8StringCpy++;
	    }
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <LCD_WRITE_STRING>:
	void LCD_WRITE_STRING( char* string)
	{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <LCD_WRITE_STRING+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <LCD_WRITE_STRING+0x8>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
		int count=0;
    23cc:	1a 82       	std	Y+2, r1	; 0x02
    23ce:	19 82       	std	Y+1, r1	; 0x01
    23d0:	2c c0       	rjmp	.+88     	; 0x242a <LCD_WRITE_STRING+0x6e>
		while(*string > 0){
			count++;
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidWriteCharctr( *string++);
    23dc:	eb 81       	ldd	r30, Y+3	; 0x03
    23de:	fc 81       	ldd	r31, Y+4	; 0x04
    23e0:	20 81       	ld	r18, Z
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	9c 83       	std	Y+4, r25	; 0x04
    23ea:	8b 83       	std	Y+3, r24	; 0x03
    23ec:	82 2f       	mov	r24, r18
    23ee:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
			if(count ==16){
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	80 31       	cpi	r24, 0x10	; 16
    23f8:	91 05       	cpc	r25, r1
    23fa:	21 f4       	brne	.+8      	; 0x2404 <LCD_WRITE_STRING+0x48>
				Gotoxy( 1, 1);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
			}
			if(count == 32 || count==33){
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	80 32       	cpi	r24, 0x20	; 32
    240a:	91 05       	cpc	r25, r1
    240c:	29 f0       	breq	.+10     	; 0x2418 <LCD_WRITE_STRING+0x5c>
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	81 32       	cpi	r24, 0x21	; 33
    2414:	91 05       	cpc	r25, r1
    2416:	49 f4       	brne	.+18     	; 0x242a <LCD_WRITE_STRING+0x6e>
				LCD_vidSendCommand(lcd_Clear);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
				Gotoxy(0,1);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				count=0;
    2426:	1a 82       	std	Y+2, r1	; 0x02
    2428:	19 82       	std	Y+1, r1	; 0x01
	    }
}
	void LCD_WRITE_STRING( char* string)
	{
		int count=0;
		while(*string > 0){
    242a:	eb 81       	ldd	r30, Y+3	; 0x03
    242c:	fc 81       	ldd	r31, Y+4	; 0x04
    242e:	80 81       	ld	r24, Z
    2430:	88 23       	and	r24, r24
    2432:	79 f6       	brne	.-98     	; 0x23d2 <LCD_WRITE_STRING+0x16>
				LCD_vidSendCommand(lcd_Clear);
				Gotoxy(0,1);
				count=0;
			}
		}
	}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <Gotoxy>:



void Gotoxy (u8 x,u8 y)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <Gotoxy+0x6>
    2448:	00 d0       	rcall	.+0      	; 0x244a <Gotoxy+0x8>
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	80 31       	cpi	r24, 0x10	; 16
    2456:	c8 f4       	brcc	.+50     	; 0x248a <Gotoxy+0x48>
	{
		switch(y)
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	3c 83       	std	Y+4, r19	; 0x04
    2460:	2b 83       	std	Y+3, r18	; 0x03
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	9c 81       	ldd	r25, Y+4	; 0x04
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	91 05       	cpc	r25, r1
    246a:	31 f0       	breq	.+12     	; 0x2478 <Gotoxy+0x36>
    246c:	2b 81       	ldd	r18, Y+3	; 0x03
    246e:	3c 81       	ldd	r19, Y+4	; 0x04
    2470:	22 30       	cpi	r18, 0x02	; 2
    2472:	31 05       	cpc	r19, r1
    2474:	31 f0       	breq	.+12     	; 0x2482 <Gotoxy+0x40>
    2476:	09 c0       	rjmp	.+18     	; 0x248a <Gotoxy+0x48>
		{
		case 1:
				LCD_vidSendCommand(x+LineOneStart);
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	80 58       	subi	r24, 0x80	; 128
    247c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    2480:	04 c0       	rjmp	.+8      	; 0x248a <Gotoxy+0x48>
			break;
		case 2:
			LCD_vidSendCommand(x+LineTwoStart);
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	80 54       	subi	r24, 0x40	; 64
    2486:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
	else
	{
		//do nothing
	}

}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <LCD_vidWriteExtraChar>:
void LCD_vidWriteExtraChar (u8 x,const u8* y)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <LCD_vidWriteExtraChar+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <LCD_vidWriteExtraChar+0x8>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	7c 83       	std	Y+4, r23	; 0x04
    24a8:	6b 83       	std	Y+3, r22	; 0x03

	u8 i;

	LCD_vidSendCommand(lcd_SetCGRAM + (x * 8)); // Set CGRAM address  0x40 = 0b010000000
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	08 96       	adiw	r24, 0x08	; 8
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

	for (i = 0; i < 8; i++) {
    24c2:	19 82       	std	Y+1, r1	; 0x01
    24c4:	0e c0       	rjmp	.+28     	; 0x24e2 <LCD_vidWriteExtraChar+0x4a>
	        LCD_vidWriteCharctr(y[i]);
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	fc 01       	movw	r30, r24
    24d2:	e2 0f       	add	r30, r18
    24d4:	f3 1f       	adc	r31, r19
    24d6:	80 81       	ld	r24, Z
    24d8:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>

	u8 i;

	LCD_vidSendCommand(lcd_SetCGRAM + (x * 8)); // Set CGRAM address  0x40 = 0b010000000

	for (i = 0; i < 8; i++) {
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	88 30       	cpi	r24, 0x08	; 8
    24e6:	78 f3       	brcs	.-34     	; 0x24c6 <LCD_vidWriteExtraChar+0x2e>
	        LCD_vidWriteCharctr(y[i]);
	}
	    // Return to DDRAM address
	    Gotoxy(0,1); //0b1000 0000
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
}
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <custom_itoa>:

void custom_itoa(int num, char* buffer, int base) {
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	64 97       	sbiw	r28, 0x14	; 20
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	9d 87       	std	Y+13, r25	; 0x0d
    2514:	8c 87       	std	Y+12, r24	; 0x0c
    2516:	7f 87       	std	Y+15, r23	; 0x0f
    2518:	6e 87       	std	Y+14, r22	; 0x0e
    251a:	59 8b       	std	Y+17, r21	; 0x11
    251c:	48 8b       	std	Y+16, r20	; 0x10
    int i = 0;
    251e:	1b 86       	std	Y+11, r1	; 0x0b
    2520:	1a 86       	std	Y+10, r1	; 0x0a
    int isNegative = 0;
    2522:	19 86       	std	Y+9, r1	; 0x09
    2524:	18 86       	std	Y+8, r1	; 0x08

    // Handle 0 explicitly, otherwise empty string is printed
    if (num == 0) {
    2526:	8c 85       	ldd	r24, Y+12	; 0x0c
    2528:	9d 85       	ldd	r25, Y+13	; 0x0d
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	b1 f4       	brne	.+44     	; 0x255a <custom_itoa+0x5c>
        buffer[i++] = '0';
    252e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2530:	3b 85       	ldd	r19, Y+11	; 0x0b
    2532:	8e 85       	ldd	r24, Y+14	; 0x0e
    2534:	9f 85       	ldd	r25, Y+15	; 0x0f
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	80 e3       	ldi	r24, 0x30	; 48
    253e:	80 83       	st	Z, r24
    2540:	8a 85       	ldd	r24, Y+10	; 0x0a
    2542:	9b 85       	ldd	r25, Y+11	; 0x0b
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	9b 87       	std	Y+11, r25	; 0x0b
    2548:	8a 87       	std	Y+10, r24	; 0x0a
        buffer[i] = '\0';
    254a:	2a 85       	ldd	r18, Y+10	; 0x0a
    254c:	3b 85       	ldd	r19, Y+11	; 0x0b
    254e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2550:	9f 85       	ldd	r25, Y+15	; 0x0f
    2552:	fc 01       	movw	r30, r24
    2554:	e2 0f       	add	r30, r18
    2556:	f3 1f       	adc	r31, r19
    2558:	10 82       	st	Z, r1
    }

    // Handle negative numbers only if base is 10
    if (num < 0 && base == 10) {
    255a:	8c 85       	ldd	r24, Y+12	; 0x0c
    255c:	9d 85       	ldd	r25, Y+13	; 0x0d
    255e:	99 23       	and	r25, r25
    2560:	0c f0       	brlt	.+2      	; 0x2564 <custom_itoa+0x66>
    2562:	45 c0       	rjmp	.+138    	; 0x25ee <custom_itoa+0xf0>
    2564:	88 89       	ldd	r24, Y+16	; 0x10
    2566:	99 89       	ldd	r25, Y+17	; 0x11
    2568:	8a 30       	cpi	r24, 0x0A	; 10
    256a:	91 05       	cpc	r25, r1
    256c:	09 f0       	breq	.+2      	; 0x2570 <custom_itoa+0x72>
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <custom_itoa+0xf0>
        isNegative = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	99 87       	std	Y+9, r25	; 0x09
    2576:	88 87       	std	Y+8, r24	; 0x08
        num = -num;
    2578:	8c 85       	ldd	r24, Y+12	; 0x0c
    257a:	9d 85       	ldd	r25, Y+13	; 0x0d
    257c:	90 95       	com	r25
    257e:	81 95       	neg	r24
    2580:	9f 4f       	sbci	r25, 0xFF	; 255
    2582:	9d 87       	std	Y+13, r25	; 0x0d
    2584:	8c 87       	std	Y+12, r24	; 0x0c
    2586:	33 c0       	rjmp	.+102    	; 0x25ee <custom_itoa+0xf0>
    }

    while (num != 0) {
        int rem = num % base;
    2588:	8c 85       	ldd	r24, Y+12	; 0x0c
    258a:	9d 85       	ldd	r25, Y+13	; 0x0d
    258c:	28 89       	ldd	r18, Y+16	; 0x10
    258e:	39 89       	ldd	r19, Y+17	; 0x11
    2590:	b9 01       	movw	r22, r18
    2592:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__divmodhi4>
    2596:	9b 83       	std	Y+3, r25	; 0x03
    2598:	8a 83       	std	Y+2, r24	; 0x02
        buffer[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
    259a:	2a 85       	ldd	r18, Y+10	; 0x0a
    259c:	3b 85       	ldd	r19, Y+11	; 0x0b
    259e:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a2:	ac 01       	movw	r20, r24
    25a4:	42 0f       	add	r20, r18
    25a6:	53 1f       	adc	r21, r19
    25a8:	5c 8b       	std	Y+20, r21	; 0x14
    25aa:	4b 8b       	std	Y+19, r20	; 0x13
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	8a 30       	cpi	r24, 0x0A	; 10
    25b2:	91 05       	cpc	r25, r1
    25b4:	2c f0       	brlt	.+10     	; 0x25c0 <custom_itoa+0xc2>
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	58 2f       	mov	r21, r24
    25ba:	59 5c       	subi	r21, 0xC9	; 201
    25bc:	5a 8b       	std	Y+18, r21	; 0x12
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <custom_itoa+0xca>
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	98 2f       	mov	r25, r24
    25c4:	90 5d       	subi	r25, 0xD0	; 208
    25c6:	9a 8b       	std	Y+18, r25	; 0x12
    25c8:	4a 89       	ldd	r20, Y+18	; 0x12
    25ca:	eb 89       	ldd	r30, Y+19	; 0x13
    25cc:	fc 89       	ldd	r31, Y+20	; 0x14
    25ce:	40 83       	st	Z, r20
    25d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	9b 87       	std	Y+11, r25	; 0x0b
    25d8:	8a 87       	std	Y+10, r24	; 0x0a
        num = num / base;
    25da:	8c 85       	ldd	r24, Y+12	; 0x0c
    25dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    25de:	28 89       	ldd	r18, Y+16	; 0x10
    25e0:	39 89       	ldd	r19, Y+17	; 0x11
    25e2:	b9 01       	movw	r22, r18
    25e4:	0e 94 2a 2c 	call	0x5854	; 0x5854 <__divmodhi4>
    25e8:	cb 01       	movw	r24, r22
    25ea:	9d 87       	std	Y+13, r25	; 0x0d
    25ec:	8c 87       	std	Y+12, r24	; 0x0c
    if (num < 0 && base == 10) {
        isNegative = 1;
        num = -num;
    }

    while (num != 0) {
    25ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    25f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	49 f6       	brne	.-110    	; 0x2588 <custom_itoa+0x8a>
        buffer[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
        num = num / base;
    }

    // Append negative sign for base 10
    if (isNegative && base == 10) {
    25f6:	88 85       	ldd	r24, Y+8	; 0x08
    25f8:	99 85       	ldd	r25, Y+9	; 0x09
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	99 f0       	breq	.+38     	; 0x2624 <custom_itoa+0x126>
    25fe:	88 89       	ldd	r24, Y+16	; 0x10
    2600:	99 89       	ldd	r25, Y+17	; 0x11
    2602:	8a 30       	cpi	r24, 0x0A	; 10
    2604:	91 05       	cpc	r25, r1
    2606:	71 f4       	brne	.+28     	; 0x2624 <custom_itoa+0x126>
        buffer[i++] = '-';
    2608:	2a 85       	ldd	r18, Y+10	; 0x0a
    260a:	3b 85       	ldd	r19, Y+11	; 0x0b
    260c:	8e 85       	ldd	r24, Y+14	; 0x0e
    260e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	8d e2       	ldi	r24, 0x2D	; 45
    2618:	80 83       	st	Z, r24
    261a:	8a 85       	ldd	r24, Y+10	; 0x0a
    261c:	9b 85       	ldd	r25, Y+11	; 0x0b
    261e:	01 96       	adiw	r24, 0x01	; 1
    2620:	9b 87       	std	Y+11, r25	; 0x0b
    2622:	8a 87       	std	Y+10, r24	; 0x0a
    }

    buffer[i] = '\0';
    2624:	2a 85       	ldd	r18, Y+10	; 0x0a
    2626:	3b 85       	ldd	r19, Y+11	; 0x0b
    2628:	8e 85       	ldd	r24, Y+14	; 0x0e
    262a:	9f 85       	ldd	r25, Y+15	; 0x0f
    262c:	fc 01       	movw	r30, r24
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	10 82       	st	Z, r1
    // Reverse the string
    int start = 0;
    2634:	1f 82       	std	Y+7, r1	; 0x07
    2636:	1e 82       	std	Y+6, r1	; 0x06
    int end = i - 1;
    2638:	8a 85       	ldd	r24, Y+10	; 0x0a
    263a:	9b 85       	ldd	r25, Y+11	; 0x0b
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	9d 83       	std	Y+5, r25	; 0x05
    2640:	8c 83       	std	Y+4, r24	; 0x04
    2642:	2c c0       	rjmp	.+88     	; 0x269c <custom_itoa+0x19e>
    while (start < end) {
        char temp = buffer[start];
    2644:	2e 81       	ldd	r18, Y+6	; 0x06
    2646:	3f 81       	ldd	r19, Y+7	; 0x07
    2648:	8e 85       	ldd	r24, Y+14	; 0x0e
    264a:	9f 85       	ldd	r25, Y+15	; 0x0f
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	89 83       	std	Y+1, r24	; 0x01
        buffer[start] = buffer[end];
    2656:	2e 81       	ldd	r18, Y+6	; 0x06
    2658:	3f 81       	ldd	r19, Y+7	; 0x07
    265a:	8e 85       	ldd	r24, Y+14	; 0x0e
    265c:	9f 85       	ldd	r25, Y+15	; 0x0f
    265e:	dc 01       	movw	r26, r24
    2660:	a2 0f       	add	r26, r18
    2662:	b3 1f       	adc	r27, r19
    2664:	2c 81       	ldd	r18, Y+4	; 0x04
    2666:	3d 81       	ldd	r19, Y+5	; 0x05
    2668:	8e 85       	ldd	r24, Y+14	; 0x0e
    266a:	9f 85       	ldd	r25, Y+15	; 0x0f
    266c:	fc 01       	movw	r30, r24
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	80 81       	ld	r24, Z
    2674:	8c 93       	st	X, r24
        buffer[end] = temp;
    2676:	2c 81       	ldd	r18, Y+4	; 0x04
    2678:	3d 81       	ldd	r19, Y+5	; 0x05
    267a:	8e 85       	ldd	r24, Y+14	; 0x0e
    267c:	9f 85       	ldd	r25, Y+15	; 0x0f
    267e:	fc 01       	movw	r30, r24
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	80 83       	st	Z, r24
        start++;
    2688:	8e 81       	ldd	r24, Y+6	; 0x06
    268a:	9f 81       	ldd	r25, Y+7	; 0x07
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	9f 83       	std	Y+7, r25	; 0x07
    2690:	8e 83       	std	Y+6, r24	; 0x06
        end--;
    2692:	8c 81       	ldd	r24, Y+4	; 0x04
    2694:	9d 81       	ldd	r25, Y+5	; 0x05
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9d 83       	std	Y+5, r25	; 0x05
    269a:	8c 83       	std	Y+4, r24	; 0x04

    buffer[i] = '\0';
    // Reverse the string
    int start = 0;
    int end = i - 1;
    while (start < end) {
    269c:	2e 81       	ldd	r18, Y+6	; 0x06
    269e:	3f 81       	ldd	r19, Y+7	; 0x07
    26a0:	8c 81       	ldd	r24, Y+4	; 0x04
    26a2:	9d 81       	ldd	r25, Y+5	; 0x05
    26a4:	28 17       	cp	r18, r24
    26a6:	39 07       	cpc	r19, r25
    26a8:	6c f2       	brlt	.-102    	; 0x2644 <custom_itoa+0x146>
        buffer[start] = buffer[end];
        buffer[end] = temp;
        start++;
        end--;
    }
}
    26aa:	64 96       	adiw	r28, 0x14	; 20
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCD_writeNum_u8>:

void LCD_writeNum_u8(u8 num) {
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	2d 97       	sbiw	r28, 0x0d	; 13
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	8d 87       	std	Y+13, r24	; 0x0d
    // Convert the integer to a string
    char numString[12];  //
    itoa(num, numString, 10);
    26d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9e 01       	movw	r18, r28
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	b9 01       	movw	r22, r18
    26e0:	4a e0       	ldi	r20, 0x0A	; 10
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	0e 94 aa 2c 	call	0x5954	; 0x5954 <itoa>

    // Write the string to the LCD
    LCD_vidWriteString(numString);
    26e8:	ce 01       	movw	r24, r28
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
}
    26f0:	2d 96       	adiw	r28, 0x0d	; 13
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <LCD_writeNum_u32>:

void LCD_writeNum_u32(u32 num) {
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	60 97       	sbiw	r28, 0x10	; 16
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	6d 87       	std	Y+13, r22	; 0x0d
    2718:	7e 87       	std	Y+14, r23	; 0x0e
    271a:	8f 87       	std	Y+15, r24	; 0x0f
    271c:	98 8b       	std	Y+16, r25	; 0x10
    char numString[12];  // Assuming a 32-bit unsigned integer, so at most 10 digits plus null-terminator
    custom_itoa(num, numString, 10);  // Base 10
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	9e 01       	movw	r18, r28
    2724:	2f 5f       	subi	r18, 0xFF	; 255
    2726:	3f 4f       	sbci	r19, 0xFF	; 255
    2728:	b9 01       	movw	r22, r18
    272a:	4a e0       	ldi	r20, 0x0A	; 10
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <custom_itoa>

    // Write the string to the LCD
    LCD_vidWriteString(numString);
    2732:	ce 01       	movw	r24, r28
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
}
    273a:	60 96       	adiw	r28, 0x10	; 16
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <TWI_vMasterInit>:
#include "MTWI_private.h"
#include "MTWI_config.h"


void TWI_vMasterInit(void)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	/* Set Clock configuration  TWBR = 2 */
	TWBR = 2;
    2754:	e0 e2       	ldi	r30, 0x20	; 32
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    275c:	a1 e2       	ldi	r26, 0x21	; 33
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e1 e2       	ldi	r30, 0x21	; 33
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	8e 7f       	andi	r24, 0xFE	; 254
    2768:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    276a:	a1 e2       	ldi	r26, 0x21	; 33
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e1 e2       	ldi	r30, 0x21	; 33
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	8d 7f       	andi	r24, 0xFD	; 253
    2776:	8c 93       	st	X, r24

	/* Enable Acknowledge bit */
	//SET_BIT(TWCR , TWCR_TWEA);
	/* Set my own Address */
	TWAR = MASTER_ADDRESS << 1;
    2778:	e2 e2       	ldi	r30, 0x22	; 34
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	84 e6       	ldi	r24, 0x64	; 100
    277e:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2780:	a6 e5       	ldi	r26, 0x56	; 86
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e6 e5       	ldi	r30, 0x56	; 86
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	84 60       	ori	r24, 0x04	; 4
    278c:	8c 93       	st	X, r24
}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <TWI_vSlaveInit>:
void TWI_vSlaveInit(void)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    279c:	a6 e5       	ldi	r26, 0x56	; 86
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e6 e5       	ldi	r30, 0x56	; 86
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	80 64       	ori	r24, 0x40	; 64
    27a8:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = SLAVE_ADDRESS << 1;
    27aa:	e2 e2       	ldi	r30, 0x22	; 34
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	88 e2       	ldi	r24, 0x28	; 40
    27b0:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    27b2:	a6 e5       	ldi	r26, 0x56	; 86
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e6 e5       	ldi	r30, 0x56	; 86
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	84 60       	ori	r24, 0x04	; 4
    27be:	8c 93       	st	X, r24
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <TWI_enStartCondition>:

TWI_ErrorState_t TWI_enStartCondition(void)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    27d0:	19 82       	std	Y+1, r1	; 0x01

	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    27d2:	a6 e5       	ldi	r26, 0x56	; 86
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e6 e5       	ldi	r30, 0x56	; 86
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 62       	ori	r24, 0x20	; 32
    27de:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    27e0:	a6 e5       	ldi	r26, 0x56	; 86
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e6 e5       	ldi	r30, 0x56	; 86
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	80 68       	ori	r24, 0x80	; 128
    27ec:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    27ee:	a6 e5       	ldi	r26, 0x56	; 86
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e6 e5       	ldi	r30, 0x56	; 86
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	84 60       	ori	r24, 0x04	; 4
    27fa:	8c 93       	st	X, r24
	//TWCR = 0b10100100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    27fc:	e6 e5       	ldi	r30, 0x56	; 86
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	88 1f       	adc	r24, r24
    2804:	88 27       	eor	r24, r24
    2806:	88 1f       	adc	r24, r24
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	90 70       	andi	r25, 0x00	; 0
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	a9 f3       	breq	.-22     	; 0x27fc <TWI_enStartCondition+0x36>

	if((TWSR & 0XF8) != START_CONDITION)
    2812:	e1 e2       	ldi	r30, 0x21	; 33
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	88 7f       	andi	r24, 0xF8	; 248
    281e:	90 70       	andi	r25, 0x00	; 0
    2820:	88 30       	cpi	r24, 0x08	; 8
    2822:	91 05       	cpc	r25, r1
    2824:	11 f0       	breq	.+4      	; 0x282a <TWI_enStartCondition+0x64>
	{
		Local_ErrorState = START_CONDTITION_ERR;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
}
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <TWI_enRepeateStart>:
TWI_ErrorState_t TWI_enRepeateStart(void)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    283e:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    2840:	a6 e5       	ldi	r26, 0x56	; 86
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e6 e5       	ldi	r30, 0x56	; 86
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    284e:	a6 e5       	ldi	r26, 0x56	; 86
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e6 e5       	ldi	r30, 0x56	; 86
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 68       	ori	r24, 0x80	; 128
    285a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    285c:	a6 e5       	ldi	r26, 0x56	; 86
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e6 e5       	ldi	r30, 0x56	; 86
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	84 60       	ori	r24, 0x04	; 4
    2868:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    286a:	e6 e5       	ldi	r30, 0x56	; 86
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	88 1f       	adc	r24, r24
    2872:	88 27       	eor	r24, r24
    2874:	88 1f       	adc	r24, r24
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	90 70       	andi	r25, 0x00	; 0
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	a9 f3       	breq	.-22     	; 0x286a <TWI_enRepeateStart+0x36>

	if((TWSR & 0XF8) != REPEATE_START_CONDITION)
    2880:	e1 e2       	ldi	r30, 0x21	; 33
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	88 2f       	mov	r24, r24
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	88 7f       	andi	r24, 0xF8	; 248
    288c:	90 70       	andi	r25, 0x00	; 0
    288e:	80 31       	cpi	r24, 0x10	; 16
    2890:	91 05       	cpc	r25, r1
    2892:	11 f0       	breq	.+4      	; 0x2898 <TWI_enRepeateStart+0x64>
	{
		Local_ErrorState = REPEAT_START_ERR;
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2898:	89 81       	ldd	r24, Y+1	; 0x01
}
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <TWI_enSetSlaveAddressWithWrite>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <TWI_enSetSlaveAddressWithWrite+0x6>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    28ae:	19 82       	std	Y+1, r1	; 0x01
	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress;
    28b0:	e3 e2       	ldi	r30, 0x23	; 35
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	80 83       	st	Z, r24
	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    28b8:	a6 e5       	ldi	r26, 0x56	; 86
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e6 e5       	ldi	r30, 0x56	; 86
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 7d       	andi	r24, 0xDF	; 223
    28c4:	8c 93       	st	X, r24
	/* Clear bit 0 to make write operation */
	CLR_BIT(TWDR , TWDR_TWD0);
    28c6:	a3 e2       	ldi	r26, 0x23	; 35
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e3 e2       	ldi	r30, 0x23	; 35
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8e 7f       	andi	r24, 0xFE	; 254
    28d2:	8c 93       	st	X, r24

	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    28d4:	a6 e5       	ldi	r26, 0x56	; 86
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e6 e5       	ldi	r30, 0x56	; 86
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	80 68       	ori	r24, 0x80	; 128
    28e0:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    28e2:	a6 e5       	ldi	r26, 0x56	; 86
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e6 e5       	ldi	r30, 0x56	; 86
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	84 60       	ori	r24, 0x04	; 4
    28ee:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    28f0:	e6 e5       	ldi	r30, 0x56	; 86
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	88 1f       	adc	r24, r24
    28f8:	88 27       	eor	r24, r24
    28fa:	88 1f       	adc	r24, r24
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	90 70       	andi	r25, 0x00	; 0
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	a9 f3       	breq	.-22     	; 0x28f0 <TWI_enSetSlaveAddressWithWrite+0x4e>

	if((TWSR & 0XF8) == SLA_WITH_W_NOAK)
    2906:	e1 e2       	ldi	r30, 0x21	; 33
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	88 7f       	andi	r24, 0xF8	; 248
    2912:	90 70       	andi	r25, 0x00	; 0
    2914:	80 32       	cpi	r24, 0x20	; 32
    2916:	91 05       	cpc	r25, r1
    2918:	11 f4       	brne	.+4      	; 0x291e <TWI_enSetSlaveAddressWithWrite+0x7c>
	{
		Local_ErrorState = SLA_W_NOACK_ERR;
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    291e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <TWI_enSetSlaveAddressWithRead>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <TWI_enSetSlaveAddressWithRead+0x6>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2936:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress | 1;
    2938:	e3 e2       	ldi	r30, 0x23	; 35
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	81 60       	ori	r24, 0x01	; 1
    2940:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    2942:	a6 e5       	ldi	r26, 0x56	; 86
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e6 e5       	ldi	r30, 0x56	; 86
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8f 7d       	andi	r24, 0xDF	; 223
    294e:	8c 93       	st	X, r24
	/* Set bit 0 to make Read operation */
	SET_BIT(TWDR , TWDR_TWD0);
    2950:	a3 e2       	ldi	r26, 0x23	; 35
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e3 e2       	ldi	r30, 0x23	; 35
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	81 60       	ori	r24, 0x01	; 1
    295c:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    295e:	a6 e5       	ldi	r26, 0x56	; 86
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e6 e5       	ldi	r30, 0x56	; 86
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	80 68       	ori	r24, 0x80	; 128
    296a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    296c:	a6 e5       	ldi	r26, 0x56	; 86
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e6 e5       	ldi	r30, 0x56	; 86
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	84 60       	ori	r24, 0x04	; 4
    2978:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    297a:	e6 e5       	ldi	r30, 0x56	; 86
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	88 1f       	adc	r24, r24
    2982:	88 27       	eor	r24, r24
    2984:	88 1f       	adc	r24, r24
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	90 70       	andi	r25, 0x00	; 0
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	a9 f3       	breq	.-22     	; 0x297a <TWI_enSetSlaveAddressWithRead+0x50>

	if((TWSR & 0XF8) == SLA_WITH_R_NOAK)
    2990:	e1 e2       	ldi	r30, 0x21	; 33
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	88 7f       	andi	r24, 0xF8	; 248
    299c:	90 70       	andi	r25, 0x00	; 0
    299e:	88 33       	cpi	r24, 0x38	; 56
    29a0:	91 05       	cpc	r25, r1
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <TWI_enSetSlaveAddressWithRead+0x7e>
	{
		Local_ErrorState = SLA_R_NOACK_ERR;
    29a4:	84 e0       	ldi	r24, 0x04	; 4
    29a6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01

}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <TWI_enMasterWriteData>:
TWI_ErrorState_t TWI_enMasterWriteData(u8 Copy_u8Data)
{
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <TWI_enMasterWriteData+0x6>
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    29c0:	19 82       	std	Y+1, r1	; 0x01
	/* Write data to TWDR */
	TWDR = Copy_u8Data;
    29c2:	e3 e2       	ldi	r30, 0x23	; 35
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	80 83       	st	Z, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    29ca:	a6 e5       	ldi	r26, 0x56	; 86
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e6 e5       	ldi	r30, 0x56	; 86
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	80 68       	ori	r24, 0x80	; 128
    29d6:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    29d8:	a6 e5       	ldi	r26, 0x56	; 86
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e6 e5       	ldi	r30, 0x56	; 86
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	84 60       	ori	r24, 0x04	; 4
    29e4:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    29e6:	e6 e5       	ldi	r30, 0x56	; 86
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	88 1f       	adc	r24, r24
    29ee:	88 27       	eor	r24, r24
    29f0:	88 1f       	adc	r24, r24
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	a9 f3       	breq	.-22     	; 0x29e6 <TWI_enMasterWriteData+0x32>

	if((TWSR & 0XF8) == MASTER_SEND_DATA_NOAK)
    29fc:	e1 e2       	ldi	r30, 0x21	; 33
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	88 7f       	andi	r24, 0xF8	; 248
    2a08:	90 70       	andi	r25, 0x00	; 0
    2a0a:	80 33       	cpi	r24, 0x30	; 48
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	11 f4       	brne	.+4      	; 0x2a14 <TWI_enMasterWriteData+0x60>
	{
		Local_ErrorState = MASTER_SEND_DATA_ERR;
    2a10:	85 e0       	ldi	r24, 0x05	; 5
    2a12:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2a14:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <TWI_enMasterReadData>:
TWI_ErrorState_t TWI_enMasterReadData(u8 *Copy_u8Data)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <TWI_enMasterReadData+0x6>
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	9b 83       	std	Y+3, r25	; 0x03
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2a30:	19 82       	std	Y+1, r1	; 0x01

	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2a32:	a6 e5       	ldi	r26, 0x56	; 86
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e6 e5       	ldi	r30, 0x56	; 86
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	84 60       	ori	r24, 0x04	; 4
    2a3e:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2a40:	a6 e5       	ldi	r26, 0x56	; 86
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e6 e5       	ldi	r30, 0x56	; 86
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 68       	ori	r24, 0x80	; 128
    2a4c:	8c 93       	st	X, r24


	//TWCR = 0b10000100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2a4e:	e6 e5       	ldi	r30, 0x56	; 86
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	88 1f       	adc	r24, r24
    2a56:	88 27       	eor	r24, r24
    2a58:	88 1f       	adc	r24, r24
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	90 70       	andi	r25, 0x00	; 0
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	a9 f3       	breq	.-22     	; 0x2a4e <TWI_enMasterReadData+0x2e>

	if((TWSR & 0XF8) == MASTER_RECEIVE_DATA_NOAK)
    2a64:	e1 e2       	ldi	r30, 0x21	; 33
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	88 7f       	andi	r24, 0xF8	; 248
    2a70:	90 70       	andi	r25, 0x00	; 0
    2a72:	88 35       	cpi	r24, 0x58	; 88
    2a74:	91 05       	cpc	r25, r1
    2a76:	11 f4       	brne	.+4      	; 0x2a7c <TWI_enMasterReadData+0x5c>
	{
		Local_ErrorState = MASTER_RECEIVE_DATA_ERR;
    2a78:	86 e0       	ldi	r24, 0x06	; 6
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	*Copy_u8Data = TWDR;
    2a7c:	e3 e2       	ldi	r30, 0x23	; 35
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	ea 81       	ldd	r30, Y+2	; 0x02
    2a84:	fb 81       	ldd	r31, Y+3	; 0x03
    2a86:	80 83       	st	Z, r24

	return Local_ErrorState;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <TWI_vStopCondition>:
void TWI_vStopCondition(void)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62

	/* Set bit TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    2a9e:	a6 e5       	ldi	r26, 0x56	; 86
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e6 e5       	ldi	r30, 0x56	; 86
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	80 61       	ori	r24, 0x10	; 16
    2aaa:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2aac:	a6 e5       	ldi	r26, 0x56	; 86
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e6 e5       	ldi	r30, 0x56	; 86
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	80 68       	ori	r24, 0x80	; 128
    2ab8:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2aba:	a6 e5       	ldi	r26, 0x56	; 86
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e6 e5       	ldi	r30, 0x56	; 86
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	84 60       	ori	r24, 0x04	; 4
    2ac6:	8c 93       	st	X, r24
}
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
    2ad6:	af e4       	ldi	r26, 0x4F	; 79
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ef e4       	ldi	r30, 0x4F	; 79
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	8e 7f       	andi	r24, 0xFE	; 254
    2ae2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
    2ae4:	af e4       	ldi	r26, 0x4F	; 79
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	ef e4       	ldi	r30, 0x4F	; 79
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	82 60       	ori	r24, 0x02	; 2
    2af0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    2af2:	ae e4       	ldi	r26, 0x4E	; 78
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ee e4       	ldi	r30, 0x4E	; 78
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	88 60       	ori	r24, 0x08	; 8
    2afe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    2b00:	ae e4       	ldi	r26, 0x4E	; 78
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ee e4       	ldi	r30, 0x4E	; 78
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	80 61       	ori	r24, 0x10	; 16
    2b0c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
    2b0e:	af e4       	ldi	r26, 0x4F	; 79
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	ef e4       	ldi	r30, 0x4F	; 79
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	8f 7b       	andi	r24, 0xBF	; 191
    2b1a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
    2b1c:	af e4       	ldi	r26, 0x4F	; 79
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	ef e4       	ldi	r30, 0x4F	; 79
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	80 68       	ori	r24, 0x80	; 128
    2b28:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
    2b2a:	af e4       	ldi	r26, 0x4F	; 79
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	ef e4       	ldi	r30, 0x4F	; 79
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	8f 7e       	andi	r24, 0xEF	; 239
    2b36:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
    2b38:	af e4       	ldi	r26, 0x4F	; 79
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	ef e4       	ldi	r30, 0x4F	; 79
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	80 62       	ori	r24, 0x20	; 32
    2b44:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
    2b46:	ae e4       	ldi	r26, 0x4E	; 78
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	ee e4       	ldi	r30, 0x4E	; 78
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 7f       	andi	r24, 0xF8	; 248
    2b52:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
    2b54:	a9 e5       	ldi	r26, 0x59	; 89
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e9 e5       	ldi	r30, 0x59	; 89
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8b 7f       	andi	r24, 0xFB	; 251
    2b60:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    2b62:	a9 e5       	ldi	r26, 0x59	; 89
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e9 e5       	ldi	r30, 0x59	; 89
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	87 7f       	andi	r24, 0xF7	; 247
    2b6e:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    2b70:	a9 e5       	ldi	r26, 0x59	; 89
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	e9 e5       	ldi	r30, 0x59	; 89
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	8f 7e       	andi	r24, 0xEF	; 239
    2b7c:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    2b7e:	a9 e5       	ldi	r26, 0x59	; 89
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e9 e5       	ldi	r30, 0x59	; 89
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	8f 7d       	andi	r24, 0xDF	; 223
    2b8a:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    2b8c:	a8 e5       	ldi	r26, 0x58	; 88
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e8 e5       	ldi	r30, 0x58	; 88
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	84 60       	ori	r24, 0x04	; 4
    2b98:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    2b9a:	a8 e5       	ldi	r26, 0x58	; 88
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e8 e5       	ldi	r30, 0x58	; 88
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 60       	ori	r24, 0x08	; 8
    2ba6:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    2ba8:	a8 e5       	ldi	r26, 0x58	; 88
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e8 e5       	ldi	r30, 0x58	; 88
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	80 61       	ori	r24, 0x10	; 16
    2bb4:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    2bb6:	a8 e5       	ldi	r26, 0x58	; 88
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e8 e5       	ldi	r30, 0x58	; 88
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	80 62       	ori	r24, 0x20	; 32
    2bc2:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    2bc4:	ea e4       	ldi	r30, 0x4A	; 74
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    2bca:	eb e4       	ldi	r30, 0x4B	; 75
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    2bd0:	e8 e4       	ldi	r30, 0x48	; 72
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    2bd6:	e9 e4       	ldi	r30, 0x49	; 73
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    2bdc:	ec e4       	ldi	r30, 0x4C	; 76
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    2be2:	ed e4       	ldi	r30, 0x4D	; 77
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    2be8:	e6 e4       	ldi	r30, 0x46	; 70
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    2bee:	e7 e4       	ldi	r30, 0x47	; 71
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	10 82       	st	Z, r1
  
}
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <TIM1_voidEnable>:
void TIM1_voidEnable(u8 u8PrescalValCpy)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	0f 92       	push	r0
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    2c06:	ae e4       	ldi	r26, 0x4E	; 78
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	ee e4       	ldi	r30, 0x4E	; 78
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	88 7f       	andi	r24, 0xF8	; 248
    2c12:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    2c14:	ae e4       	ldi	r26, 0x4E	; 78
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	ee e4       	ldi	r30, 0x4E	; 78
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	98 2f       	mov	r25, r24
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	87 70       	andi	r24, 0x07	; 7
    2c24:	89 2b       	or	r24, r25
    2c26:	8c 93       	st	X, r24
	
}
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    2c38:	ae e4       	ldi	r26, 0x4E	; 78
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	ee e4       	ldi	r30, 0x4E	; 78
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	88 7f       	andi	r24, 0xF8	; 248
    2c44:	8c 93       	st	X, r24
	
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    2c54:	a9 e5       	ldi	r26, 0x59	; 89
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e9 e5       	ldi	r30, 0x59	; 89
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	84 60       	ori	r24, 0x04	; 4
    2c60:	8c 93       	st	X, r24
	
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    2c70:	a9 e5       	ldi	r26, 0x59	; 89
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e9 e5       	ldi	r30, 0x59	; 89
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	8b 7f       	andi	r24, 0xFB	; 251
    2c7c:	8c 93       	st	X, r24
	
}
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    2c8c:	a9 e5       	ldi	r26, 0x59	; 89
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	e9 e5       	ldi	r30, 0x59	; 89
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	80 61       	ori	r24, 0x10	; 16
    2c98:	8c 93       	st	X, r24
	
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    2ca8:	a9 e5       	ldi	r26, 0x59	; 89
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e9 e5       	ldi	r30, 0x59	; 89
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	8f 7e       	andi	r24, 0xEF	; 239
    2cb4:	8c 93       	st	X, r24
	
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    2cc4:	a9 e5       	ldi	r26, 0x59	; 89
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e9 e5       	ldi	r30, 0x59	; 89
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 60       	ori	r24, 0x08	; 8
    2cd0:	8c 93       	st	X, r24
	
}
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    2ce0:	a9 e5       	ldi	r26, 0x59	; 89
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e9 e5       	ldi	r30, 0x59	; 89
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	87 7f       	andi	r24, 0xF7	; 247
    2cec:	8c 93       	st	X, r24
	
}
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <TIM1_voidEnableIcu>:
void TIM1_voidEnableIcu(void)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    2cfc:	a9 e5       	ldi	r26, 0x59	; 89
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e9 e5       	ldi	r30, 0x59	; 89
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	80 62       	ori	r24, 0x20	; 32
    2d08:	8c 93       	st	X, r24
}
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <TIM1_voidDisableIcu>:
void TIM1_voidDisableIcu(void)
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    2d18:	a9 e5       	ldi	r26, 0x59	; 89
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e9 e5       	ldi	r30, 0x59	; 89
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8f 7d       	andi	r24, 0xDF	; 223
    2d24:	8c 93       	st	X, r24
}
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <TIM1_voidSetCallbackOvfInt+0x6>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	90 93 c7 01 	sts	0x01C7, r25
    2d42:	80 93 c6 01 	sts	0x01C6, r24
}
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <TIM1_voidSetCallbackCompAInt+0x6>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	9a 81       	ldd	r25, Y+2	; 0x02
    2d62:	90 93 c9 01 	sts	0x01C9, r25
    2d66:	80 93 c8 01 	sts	0x01C8, r24
}
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <TIM1_voidSetCallbackCompBInt+0x6>
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	90 93 c3 01 	sts	0x01C3, r25
    2d8a:	80 93 c2 01 	sts	0x01C2, r24
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <TIM1_voidSetCallbackIcu>:
void TIM1_voidSetCallbackIcu(pf pfIcuCalbckCpy)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <TIM1_voidSetCallbackIcu+0x6>
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	90 93 c5 01 	sts	0x01C5, r25
    2dae:	80 93 c4 01 	sts	0x01C4, r24
}
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(u16 u16TimValCpy) //TCNT
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <TIM1_voidSetTimerValue+0x6>
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	9a 83       	std	Y+2, r25	; 0x02
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(u8) u16TimValCpy;
    2dca:	ec e4       	ldi	r30, 0x4C	; 76
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	80 83       	st	Z, r24
	TCNT1H =(u8) (u16TimValCpy>>8);
    2dd2:	ed e4       	ldi	r30, 0x4D	; 77
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	89 2f       	mov	r24, r25
    2ddc:	99 27       	eor	r25, r25
    2dde:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	08 95       	ret

00002dea <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(u16 u16CmpAValCpy)
{
    2dea:	df 93       	push	r29
    2dec:	cf 93       	push	r28
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <TIM1_voidSetCmpARegValue+0x6>
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	9a 83       	std	Y+2, r25	; 0x02
    2df6:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (u8)u16CmpAValCpy;
    2df8:	ea e4       	ldi	r30, 0x4A	; 74
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	80 83       	st	Z, r24
	OCR1AH= (u8)(u16CmpAValCpy>>8);
    2e00:	eb e4       	ldi	r30, 0x4B	; 75
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	89 2f       	mov	r24, r25
    2e0a:	99 27       	eor	r25, r25
    2e0c:	80 83       	st	Z, r24
	
}
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(u16 u16CmpBValCpy)
{
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <TIM1_voidSetCmpBRegValue+0x6>
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (u8)u16CmpBValCpy;
    2e26:	e8 e4       	ldi	r30, 0x48	; 72
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	80 83       	st	Z, r24
	OCR1BH= (u8)(u16CmpBValCpy>>8);
    2e2e:	e9 e4       	ldi	r30, 0x49	; 73
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	9a 81       	ldd	r25, Y+2	; 0x02
    2e36:	89 2f       	mov	r24, r25
    2e38:	99 27       	eor	r25, r25
    2e3a:	80 83       	st	Z, r24
	
}
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(u16 u16IcuValCpy)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <TIM1_voidSetIcuRegValue+0x6>
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    2e54:	e6 e4       	ldi	r30, 0x46	; 70
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24

}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <TIM1_u8ReadTimerValue>:
u16 TIM1_u8ReadTimerValue(void)
{
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <TIM1_u8ReadTimerValue+0x6>
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	u16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    2e74:	ed e4       	ldi	r30, 0x4D	; 77
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	88 2f       	mov	r24, r24
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	98 2f       	mov	r25, r24
    2e88:	88 27       	eor	r24, r24
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    2e8e:	ec e4       	ldi	r30, 0x4C	; 76
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	82 2b       	or	r24, r18
    2e9e:	93 2b       	or	r25, r19
    2ea0:	9a 83       	std	Y+2, r25	; 0x02
    2ea2:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    2eb2:	1f 92       	push	r1
    2eb4:	0f 92       	push	r0
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	0f 92       	push	r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	2f 93       	push	r18
    2ebe:	3f 93       	push	r19
    2ec0:	4f 93       	push	r20
    2ec2:	5f 93       	push	r21
    2ec4:	6f 93       	push	r22
    2ec6:	7f 93       	push	r23
    2ec8:	8f 93       	push	r24
    2eca:	9f 93       	push	r25
    2ecc:	af 93       	push	r26
    2ece:	bf 93       	push	r27
    2ed0:	ef 93       	push	r30
    2ed2:	ff 93       	push	r31
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    2edc:	e0 91 c6 01 	lds	r30, 0x01C6
    2ee0:	f0 91 c7 01 	lds	r31, 0x01C7
    2ee4:	09 95       	icall
	
}
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	ff 91       	pop	r31
    2eec:	ef 91       	pop	r30
    2eee:	bf 91       	pop	r27
    2ef0:	af 91       	pop	r26
    2ef2:	9f 91       	pop	r25
    2ef4:	8f 91       	pop	r24
    2ef6:	7f 91       	pop	r23
    2ef8:	6f 91       	pop	r22
    2efa:	5f 91       	pop	r21
    2efc:	4f 91       	pop	r20
    2efe:	3f 91       	pop	r19
    2f00:	2f 91       	pop	r18
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	0f 90       	pop	r0
    2f08:	1f 90       	pop	r1
    2f0a:	18 95       	reti

00002f0c <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	2f 93       	push	r18
    2f18:	3f 93       	push	r19
    2f1a:	4f 93       	push	r20
    2f1c:	5f 93       	push	r21
    2f1e:	6f 93       	push	r22
    2f20:	7f 93       	push	r23
    2f22:	8f 93       	push	r24
    2f24:	9f 93       	push	r25
    2f26:	af 93       	push	r26
    2f28:	bf 93       	push	r27
    2f2a:	ef 93       	push	r30
    2f2c:	ff 93       	push	r31
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    2f36:	e0 91 c8 01 	lds	r30, 0x01C8
    2f3a:	f0 91 c9 01 	lds	r31, 0x01C9
    2f3e:	09 95       	icall
}
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	ff 91       	pop	r31
    2f46:	ef 91       	pop	r30
    2f48:	bf 91       	pop	r27
    2f4a:	af 91       	pop	r26
    2f4c:	9f 91       	pop	r25
    2f4e:	8f 91       	pop	r24
    2f50:	7f 91       	pop	r23
    2f52:	6f 91       	pop	r22
    2f54:	5f 91       	pop	r21
    2f56:	4f 91       	pop	r20
    2f58:	3f 91       	pop	r19
    2f5a:	2f 91       	pop	r18
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
    2f62:	1f 90       	pop	r1
    2f64:	18 95       	reti

00002f66 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    2f66:	1f 92       	push	r1
    2f68:	0f 92       	push	r0
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	0f 92       	push	r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	2f 93       	push	r18
    2f72:	3f 93       	push	r19
    2f74:	4f 93       	push	r20
    2f76:	5f 93       	push	r21
    2f78:	6f 93       	push	r22
    2f7a:	7f 93       	push	r23
    2f7c:	8f 93       	push	r24
    2f7e:	9f 93       	push	r25
    2f80:	af 93       	push	r26
    2f82:	bf 93       	push	r27
    2f84:	ef 93       	push	r30
    2f86:	ff 93       	push	r31
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    2f90:	e0 91 c2 01 	lds	r30, 0x01C2
    2f94:	f0 91 c3 01 	lds	r31, 0x01C3
    2f98:	09 95       	icall
}
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	bf 91       	pop	r27
    2fa4:	af 91       	pop	r26
    2fa6:	9f 91       	pop	r25
    2fa8:	8f 91       	pop	r24
    2faa:	7f 91       	pop	r23
    2fac:	6f 91       	pop	r22
    2fae:	5f 91       	pop	r21
    2fb0:	4f 91       	pop	r20
    2fb2:	3f 91       	pop	r19
    2fb4:	2f 91       	pop	r18
    2fb6:	0f 90       	pop	r0
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	0f 90       	pop	r0
    2fbc:	1f 90       	pop	r1
    2fbe:	18 95       	reti

00002fc0 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    2fc0:	1f 92       	push	r1
    2fc2:	0f 92       	push	r0
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	0f 92       	push	r0
    2fc8:	11 24       	eor	r1, r1
    2fca:	2f 93       	push	r18
    2fcc:	3f 93       	push	r19
    2fce:	4f 93       	push	r20
    2fd0:	5f 93       	push	r21
    2fd2:	6f 93       	push	r22
    2fd4:	7f 93       	push	r23
    2fd6:	8f 93       	push	r24
    2fd8:	9f 93       	push	r25
    2fda:	af 93       	push	r26
    2fdc:	bf 93       	push	r27
    2fde:	ef 93       	push	r30
    2fe0:	ff 93       	push	r31
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    2fea:	e0 91 c4 01 	lds	r30, 0x01C4
    2fee:	f0 91 c5 01 	lds	r31, 0x01C5
    2ff2:	09 95       	icall
}
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	ff 91       	pop	r31
    2ffa:	ef 91       	pop	r30
    2ffc:	bf 91       	pop	r27
    2ffe:	af 91       	pop	r26
    3000:	9f 91       	pop	r25
    3002:	8f 91       	pop	r24
    3004:	7f 91       	pop	r23
    3006:	6f 91       	pop	r22
    3008:	5f 91       	pop	r21
    300a:	4f 91       	pop	r20
    300c:	3f 91       	pop	r19
    300e:	2f 91       	pop	r18
    3010:	0f 90       	pop	r0
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	0f 90       	pop	r0
    3016:	1f 90       	pop	r1
    3018:	18 95       	reti

0000301a <TIM1_u16GetIcuValue>:

/*ICU*/


u16 TIM1_u16GetIcuValue(void)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    3022:	e6 e4       	ldi	r30, 0x46	; 70
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
}
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    3038:	ae e4       	ldi	r26, 0x4E	; 78
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	ee e4       	ldi	r30, 0x4E	; 78
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	80 64       	ori	r24, 0x40	; 64
    3044:	8c 93       	st	X, r24
 }
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    3054:	ae e4       	ldi	r26, 0x4E	; 78
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	ee e4       	ldi	r30, 0x4E	; 78
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	8f 7b       	andi	r24, 0xBF	; 191
    3060:	8c 93       	st	X, r24
 }
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <TIM0_voidInit>:




void TIM0_voidInit(void)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
	    CLR_BIT(TCCR0, 3);
	    // Clear WGM01 and WGM00 for normal mode
	    CLR_BIT(TCCR0, 1);
	    CLR_BIT(TCCR0, 0);
#elif  TIMO_MODE == TIM0_CTC
	CLR_BIT(TCCR0,6);
    3070:	a3 e5       	ldi	r26, 0x53	; 83
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e3 e5       	ldi	r30, 0x53	; 83
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	8f 7b       	andi	r24, 0xBF	; 191
    307c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    307e:	a3 e5       	ldi	r26, 0x53	; 83
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e3 e5       	ldi	r30, 0x53	; 83
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	88 60       	ori	r24, 0x08	; 8
    308a:	8c 93       	st	X, r24
#elif TIMO_WAVE == TIM0_PHASE_NONINVERT_OC0
	CLR_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
	/*default is oco dicdonnected */
#else
	CLR_BIT(TCCR0,4);
    308c:	a3 e5       	ldi	r26, 0x53	; 83
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e3 e5       	ldi	r30, 0x53	; 83
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 7e       	andi	r24, 0xEF	; 239
    3098:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
    309a:	a3 e5       	ldi	r26, 0x53	; 83
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e3 e5       	ldi	r30, 0x53	; 83
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	8f 7d       	andi	r24, 0xDF	; 223
    30a6:	8c 93       	st	X, r24

#endif



}
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <TIM0_voidEnable>:




void TIM0_voidEnable(u8 u8PreScaler)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	0f 92       	push	r0
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=TCCR0&0b11111000;
    30ba:	a3 e5       	ldi	r26, 0x53	; 83
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e3 e5       	ldi	r30, 0x53	; 83
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	88 7f       	andi	r24, 0xF8	; 248
    30c6:	8c 93       	st	X, r24
	TCCR0=TCCR0|u8PreScaler;
    30c8:	a3 e5       	ldi	r26, 0x53	; 83
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e3 e5       	ldi	r30, 0x53	; 83
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	90 81       	ld	r25, Z
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	89 2b       	or	r24, r25
    30d6:	8c 93       	st	X, r24
}
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <TIM0_voidDisable>:


void TIM0_voidDisable(void)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
	TCCR0=TCCR0&0b11111000;
    30e8:	a3 e5       	ldi	r26, 0x53	; 83
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e3 e5       	ldi	r30, 0x53	; 83
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	88 7f       	andi	r24, 0xF8	; 248
    30f4:	8c 93       	st	X, r24
}
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <TIM0_voidEnableOvfINt>:

void TIM0_voidEnableOvfINt(void)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    3104:	a9 e5       	ldi	r26, 0x59	; 89
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e9 e5       	ldi	r30, 0x59	; 89
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	81 60       	ori	r24, 0x01	; 1
    3110:	8c 93       	st	X, r24
}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	08 95       	ret

00003118 <TIM0_voidDisableOvfINt>:

void TIM0_voidDisableOvfINt(void)
{
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    3120:	a9 e5       	ldi	r26, 0x59	; 89
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e9 e5       	ldi	r30, 0x59	; 89
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	8e 7f       	andi	r24, 0xFE	; 254
    312c:	8c 93       	st	X, r24
}
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <TIM0_voidEnableComparINt>:

void TIM0_voidEnableComparINt(void)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    313c:	a9 e5       	ldi	r26, 0x59	; 89
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e9 e5       	ldi	r30, 0x59	; 89
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	82 60       	ori	r24, 0x02	; 2
    3148:	8c 93       	st	X, r24

}
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <TIM0_voidDisableCompareINt>:

void TIM0_voidDisableCompareINt(void)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    3158:	a9 e5       	ldi	r26, 0x59	; 89
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e9 e5       	ldi	r30, 0x59	; 89
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8d 7f       	andi	r24, 0xFD	; 253
    3164:	8c 93       	st	X, r24
}
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <TIM0_voidSetTCNTValue>:


void TIM0_voidSetTCNTValue(u8 u8TcntReg)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	0f 92       	push	r0
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=u8TcntReg;
    3178:	e2 e5       	ldi	r30, 0x52	; 82
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	80 83       	st	Z, r24
}
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <TIM0_voidSetOCRValue>:

void TIM0_voidSetOCRValue(u8 u8OcrReg)
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	0f 92       	push	r0
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	89 83       	std	Y+1, r24	; 0x01
	OCR0=u8OcrReg;
    3194:	ec e5       	ldi	r30, 0x5C	; 92
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	80 83       	st	Z, r24
}
    319c:	0f 90       	pop	r0
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <TIM0_u8ReadTcntReg>:

u8 TIM0_u8ReadTcntReg(void)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    31ac:	e2 e5       	ldi	r30, 0x52	; 82
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
}
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <TIM0_voidSetCallBackOvfInt>:

void TIM0_voidSetCallBackOvfInt(pf pfOvfcallBack)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <TIM0_voidSetCallBackOvfInt+0x6>
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOVFCallBack=pfOvfcallBack;
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	90 93 b7 01 	sts	0x01B7, r25
    31ce:	80 93 b6 01 	sts	0x01B6, r24
}
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <TIM0_voidSetCallBackCompareInt>:

void TIM0_voidSetCallBackCompareInt(pf pfComcallBack)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <TIM0_voidSetCallBackCompareInt+0x6>
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	9a 83       	std	Y+2, r25	; 0x02
    31e8:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCmpCallBack=pfComcallBack;
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	90 93 b9 01 	sts	0x01B9, r25
    31f2:	80 93 b8 01 	sts	0x01B8, r24

}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <__vector_11>:
void __vector_11 (void)   __attribute__ ((signal));

void __vector_11 (void)
{
    3200:	1f 92       	push	r1
    3202:	0f 92       	push	r0
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	0f 92       	push	r0
    3208:	11 24       	eor	r1, r1
    320a:	2f 93       	push	r18
    320c:	3f 93       	push	r19
    320e:	4f 93       	push	r20
    3210:	5f 93       	push	r21
    3212:	6f 93       	push	r22
    3214:	7f 93       	push	r23
    3216:	8f 93       	push	r24
    3218:	9f 93       	push	r25
    321a:	af 93       	push	r26
    321c:	bf 93       	push	r27
    321e:	ef 93       	push	r30
    3220:	ff 93       	push	r31
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
	if (TIM0_pfOVFCallBack!=NULL_PTR)
    322a:	80 91 b6 01 	lds	r24, 0x01B6
    322e:	90 91 b7 01 	lds	r25, 0x01B7
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	29 f0       	breq	.+10     	; 0x3240 <__vector_11+0x40>
	{
		TIM0_pfOVFCallBack();
    3236:	e0 91 b6 01 	lds	r30, 0x01B6
    323a:	f0 91 b7 01 	lds	r31, 0x01B7
    323e:	09 95       	icall
	else
	{
		///
	}

}
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	ff 91       	pop	r31
    3246:	ef 91       	pop	r30
    3248:	bf 91       	pop	r27
    324a:	af 91       	pop	r26
    324c:	9f 91       	pop	r25
    324e:	8f 91       	pop	r24
    3250:	7f 91       	pop	r23
    3252:	6f 91       	pop	r22
    3254:	5f 91       	pop	r21
    3256:	4f 91       	pop	r20
    3258:	3f 91       	pop	r19
    325a:	2f 91       	pop	r18
    325c:	0f 90       	pop	r0
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	0f 90       	pop	r0
    3262:	1f 90       	pop	r1
    3264:	18 95       	reti

00003266 <__vector_10>:

void __vector_10 (void)   __attribute__ ((signal));

void __vector_10 (void)
{
    3266:	1f 92       	push	r1
    3268:	0f 92       	push	r0
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	0f 92       	push	r0
    326e:	11 24       	eor	r1, r1
    3270:	2f 93       	push	r18
    3272:	3f 93       	push	r19
    3274:	4f 93       	push	r20
    3276:	5f 93       	push	r21
    3278:	6f 93       	push	r22
    327a:	7f 93       	push	r23
    327c:	8f 93       	push	r24
    327e:	9f 93       	push	r25
    3280:	af 93       	push	r26
    3282:	bf 93       	push	r27
    3284:	ef 93       	push	r30
    3286:	ff 93       	push	r31
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
	if (TIM0_pfCmpCallBack!=NULL_PTR)
    3290:	80 91 b8 01 	lds	r24, 0x01B8
    3294:	90 91 b9 01 	lds	r25, 0x01B9
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	29 f0       	breq	.+10     	; 0x32a6 <__vector_10+0x40>
	{
		TIM0_pfCmpCallBack();
    329c:	e0 91 b8 01 	lds	r30, 0x01B8
    32a0:	f0 91 b9 01 	lds	r31, 0x01B9
    32a4:	09 95       	icall
	else
	{

	}

}
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	ff 91       	pop	r31
    32ac:	ef 91       	pop	r30
    32ae:	bf 91       	pop	r27
    32b0:	af 91       	pop	r26
    32b2:	9f 91       	pop	r25
    32b4:	8f 91       	pop	r24
    32b6:	7f 91       	pop	r23
    32b8:	6f 91       	pop	r22
    32ba:	5f 91       	pop	r21
    32bc:	4f 91       	pop	r20
    32be:	3f 91       	pop	r19
    32c0:	2f 91       	pop	r18
    32c2:	0f 90       	pop	r0
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	0f 90       	pop	r0
    32c8:	1f 90       	pop	r1
    32ca:	18 95       	reti

000032cc <main>:


void ISR_LM35_Timer0(void);
u32 Temperature=0;
int main(void)
{
    32cc:	0f 93       	push	r16
    32ce:	1f 93       	push	r17
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	cd 50       	subi	r28, 0x0D	; 13
    32da:	d1 40       	sbci	r29, 0x01	; 1
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
	u8 key_pressed = 0;
    32e6:	fe 01       	movw	r30, r28
    32e8:	ec 5f       	subi	r30, 0xFC	; 252
    32ea:	fe 4f       	sbci	r31, 0xFE	; 254
    32ec:	10 82       	st	Z, r1
	u8 Data;
	//number of cans initialized
	u8 spiro=1;
    32ee:	fe 01       	movw	r30, r28
    32f0:	ed 5f       	subi	r30, 0xFD	; 253
    32f2:	fe 4f       	sbci	r31, 0xFE	; 254
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	80 83       	st	Z, r24
	u8 Bigcola=10;
    32f8:	fe 01       	movw	r30, r28
    32fa:	ee 5f       	subi	r30, 0xFE	; 254
    32fc:	fe 4f       	sbci	r31, 0xFE	; 254
    32fe:	8a e0       	ldi	r24, 0x0A	; 10
    3300:	80 83       	st	Z, r24
	EEPROM_vWrite(EEPROM_SPIRO_ADDRESS,spiro);
    3302:	fe 01       	movw	r30, r28
    3304:	ed 5f       	subi	r30, 0xFD	; 253
    3306:	fe 4f       	sbci	r31, 0xFE	; 254
    3308:	8d ef       	ldi	r24, 0xFD	; 253
    330a:	60 81       	ld	r22, Z
    330c:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	EEPROM_vWrite(EEPROM_COLA_ADDRESS,Bigcola);
    3310:	fe 01       	movw	r30, r28
    3312:	ee 5f       	subi	r30, 0xFE	; 254
    3314:	fe 4f       	sbci	r31, 0xFE	; 254
    3316:	81 ef       	ldi	r24, 0xF1	; 241
    3318:	60 81       	ld	r22, Z
    331a:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	DIO_voidInit();
    331e:	0e 94 45 06 	call	0xc8a	; 0xc8a <DIO_voidInit>


	ADC_Init ();
    3322:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>
	KPD_init();
    3326:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <KPD_init>
	LCD_vidInit();
    332a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_vidInit>
	LCD_vidSendCommand( lcd_EntryMode);
    332e:	86 e0       	ldi	r24, 0x06	; 6
    3330:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
	ADC_Init ();
    3334:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>
	TIM0_voidInit();
    3338:	0e 94 34 18 	call	0x3068	; 0x3068 <TIM0_voidInit>
	TIM0_voidSetCallBackCompareInt(ISR_LM35_Timer0);
    333c:	86 ea       	ldi	r24, 0xA6	; 166
    333e:	9b e2       	ldi	r25, 0x2B	; 43
    3340:	0e 94 ee 18 	call	0x31dc	; 0x31dc <TIM0_voidSetCallBackCompareInt>
	TIM0_voidSetOCRValue(150);
    3344:	86 e9       	ldi	r24, 0x96	; 150
    3346:	0e 94 c4 18 	call	0x3188	; 0x3188 <TIM0_voidSetOCRValue>
	TIM0_voidEnable(PRESCALER_8);
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	0e 94 57 18 	call	0x30ae	; 0x30ae <TIM0_voidEnable>
	TIM0_voidEnableComparINt();
    3350:	0e 94 9a 18 	call	0x3134	; 0x3134 <TIM0_voidEnableComparINt>


	TWI_vMasterInit();
    3354:	0e 94 a6 13 	call	0x274c	; 0x274c <TWI_vMasterInit>
	Global_Interrupt_Enable();
    3358:	0e 94 38 0c 	call	0x1870	; 0x1870 <Global_Interrupt_Enable>

	DIO_voidPullUpState(PORT_D,DIO_PIN_NUM_D2,Enable_PullUp);
    335c:	84 e0       	ldi	r24, 0x04	; 4
    335e:	62 e0       	ldi	r22, 0x02	; 2
    3360:	41 e0       	ldi	r20, 0x01	; 1
    3362:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidPullUpState>


	/*<<<<<<<<<<Setting passwords if not set>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

	EEPROM_vRead(ADMIN_PASS_STATUS_ADDRESS,&Data);
    3366:	9e 01       	movw	r18, r28
    3368:	2b 5f       	subi	r18, 0xFB	; 251
    336a:	3e 4f       	sbci	r19, 0xFE	; 254
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	b9 01       	movw	r22, r18
    3370:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>
	if(Data!=PASS_SET)
    3374:	fe 01       	movw	r30, r28
    3376:	eb 5f       	subi	r30, 0xFB	; 251
    3378:	fe 4f       	sbci	r31, 0xFE	; 254
    337a:	80 81       	ld	r24, Z
    337c:	81 30       	cpi	r24, 0x01	; 1
    337e:	09 f4       	brne	.+2      	; 0x3382 <main+0xb6>
    3380:	cc c0       	rjmp	.+408    	; 0x351a <main+0x24e>
	{

		LCD_vidWriteString("Set Machine");
    3382:	80 e6       	ldi	r24, 0x60	; 96
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
		Gotoxy(0,2);
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	62 e0       	ldi	r22, 0x02	; 2
    338e:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteString("Password");
    3392:	8c e6       	ldi	r24, 0x6C	; 108
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    339a:	fe 01       	movw	r30, r28
    339c:	e7 50       	subi	r30, 0x07	; 7
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	aa e7       	ldi	r26, 0x7A	; 122
    33a6:	b4 e4       	ldi	r27, 0x44	; 68
    33a8:	80 83       	st	Z, r24
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	a2 83       	std	Z+2, r26	; 0x02
    33ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b0:	8e 01       	movw	r16, r28
    33b2:	0b 50       	subi	r16, 0x0B	; 11
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	fe 01       	movw	r30, r28
    33b8:	e7 50       	subi	r30, 0x07	; 7
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	4a ef       	ldi	r20, 0xFA	; 250
    33ca:	54 e4       	ldi	r21, 0x44	; 68
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	f8 01       	movw	r30, r16
    33d6:	80 83       	st	Z, r24
    33d8:	91 83       	std	Z+1, r25	; 0x01
    33da:	a2 83       	std	Z+2, r26	; 0x02
    33dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33de:	fe 01       	movw	r30, r28
    33e0:	eb 50       	subi	r30, 0x0B	; 11
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	60 81       	ld	r22, Z
    33e6:	71 81       	ldd	r23, Z+1	; 0x01
    33e8:	82 81       	ldd	r24, Z+2	; 0x02
    33ea:	93 81       	ldd	r25, Z+3	; 0x03
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e8       	ldi	r20, 0x80	; 128
    33f2:	5f e3       	ldi	r21, 0x3F	; 63
    33f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f8:	88 23       	and	r24, r24
    33fa:	44 f4       	brge	.+16     	; 0x340c <main+0x140>
		__ticks = 1;
    33fc:	fe 01       	movw	r30, r28
    33fe:	ed 50       	subi	r30, 0x0D	; 13
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	80 83       	st	Z, r24
    340a:	64 c0       	rjmp	.+200    	; 0x34d4 <main+0x208>
	else if (__tmp > 65535)
    340c:	fe 01       	movw	r30, r28
    340e:	eb 50       	subi	r30, 0x0B	; 11
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	60 81       	ld	r22, Z
    3414:	71 81       	ldd	r23, Z+1	; 0x01
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	93 81       	ldd	r25, Z+3	; 0x03
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	0c f0       	brlt	.+2      	; 0x342c <main+0x160>
    342a:	43 c0       	rjmp	.+134    	; 0x34b2 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	fe 01       	movw	r30, r28
    342e:	e7 50       	subi	r30, 0x07	; 7
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	40 e2       	ldi	r20, 0x20	; 32
    3440:	51 e4       	ldi	r21, 0x41	; 65
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	8e 01       	movw	r16, r28
    344c:	0d 50       	subi	r16, 0x0D	; 13
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	bc 01       	movw	r22, r24
    3452:	cd 01       	movw	r24, r26
    3454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	f8 01       	movw	r30, r16
    345e:	91 83       	std	Z+1, r25	; 0x01
    3460:	80 83       	st	Z, r24
    3462:	1f c0       	rjmp	.+62     	; 0x34a2 <main+0x1d6>
    3464:	fe 01       	movw	r30, r28
    3466:	ef 50       	subi	r30, 0x0F	; 15
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	88 ec       	ldi	r24, 0xC8	; 200
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
    3472:	fe 01       	movw	r30, r28
    3474:	ef 50       	subi	r30, 0x0F	; 15
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 81       	ld	r24, Z
    347a:	91 81       	ldd	r25, Z+1	; 0x01
    347c:	01 97       	sbiw	r24, 0x01	; 1
    347e:	f1 f7       	brne	.-4      	; 0x347c <main+0x1b0>
    3480:	fe 01       	movw	r30, r28
    3482:	ef 50       	subi	r30, 0x0F	; 15
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348a:	de 01       	movw	r26, r28
    348c:	ad 50       	subi	r26, 0x0D	; 13
    348e:	bf 4f       	sbci	r27, 0xFF	; 255
    3490:	fe 01       	movw	r30, r28
    3492:	ed 50       	subi	r30, 0x0D	; 13
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 81       	ld	r24, Z
    3498:	91 81       	ldd	r25, Z+1	; 0x01
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	11 96       	adiw	r26, 0x01	; 1
    349e:	9c 93       	st	X, r25
    34a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a2:	fe 01       	movw	r30, r28
    34a4:	ed 50       	subi	r30, 0x0D	; 13
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 81       	ld	r24, Z
    34aa:	91 81       	ldd	r25, Z+1	; 0x01
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	d1 f6       	brne	.-76     	; 0x3464 <main+0x198>
    34b0:	27 c0       	rjmp	.+78     	; 0x3500 <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b2:	8e 01       	movw	r16, r28
    34b4:	0d 50       	subi	r16, 0x0D	; 13
    34b6:	1f 4f       	sbci	r17, 0xFF	; 255
    34b8:	fe 01       	movw	r30, r28
    34ba:	eb 50       	subi	r30, 0x0B	; 11
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	60 81       	ld	r22, Z
    34c0:	71 81       	ldd	r23, Z+1	; 0x01
    34c2:	82 81       	ldd	r24, Z+2	; 0x02
    34c4:	93 81       	ldd	r25, Z+3	; 0x03
    34c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	f8 01       	movw	r30, r16
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	80 83       	st	Z, r24
    34d4:	de 01       	movw	r26, r28
    34d6:	a1 51       	subi	r26, 0x11	; 17
    34d8:	bf 4f       	sbci	r27, 0xFF	; 255
    34da:	fe 01       	movw	r30, r28
    34dc:	ed 50       	subi	r30, 0x0D	; 13
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	8d 93       	st	X+, r24
    34e6:	9c 93       	st	X, r25
    34e8:	fe 01       	movw	r30, r28
    34ea:	e1 51       	subi	r30, 0x11	; 17
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <main+0x226>
    34f6:	fe 01       	movw	r30, r28
    34f8:	e1 51       	subi	r30, 0x11	; 17
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_vidSendCommand(lcd_Clear);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
		LCD_vidWriteString("Set pass");
    3506:	85 e7       	ldi	r24, 0x75	; 117
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
		Gotoxy(0,2);
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	62 e0       	ldi	r22, 0x02	; 2
    3512:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		SET_PASS();
    3516:	0e 94 58 28 	call	0x50b0	; 0x50b0 <SET_PASS>
	}
	//To save password for comparison
	u8 saved_pass=0;
    351a:	fe 01       	movw	r30, r28
    351c:	ea 5f       	subi	r30, 0xFA	; 250
    351e:	fe 4f       	sbci	r31, 0xFE	; 254
    3520:	10 82       	st	Z, r1

	EEPROM_vRead(EEPROM_PASS_ADDRESS,&saved_pass);
    3522:	9e 01       	movw	r18, r28
    3524:	2a 5f       	subi	r18, 0xFA	; 250
    3526:	3e 4f       	sbci	r19, 0xFE	; 254
    3528:	85 ee       	ldi	r24, 0xE5	; 229
    352a:	b9 01       	movw	r22, r18
    352c:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>

	Global_Interrupt_Enable();
    3530:	0e 94 38 0c 	call	0x1870	; 0x1870 <Global_Interrupt_Enable>


	//flag to print one time
	u8 LCD_flag=0;
    3534:	fe 01       	movw	r30, r28
    3536:	ef 5f       	subi	r30, 0xFF	; 255
    3538:	fe 4f       	sbci	r31, 0xFE	; 254
    353a:	10 82       	st	Z, r1
	if(!LCD_flag)
    353c:	fe 01       	movw	r30, r28
    353e:	ef 5f       	subi	r30, 0xFF	; 255
    3540:	fe 4f       	sbci	r31, 0xFE	; 254
    3542:	80 81       	ld	r24, Z
    3544:	88 23       	and	r24, r24
    3546:	a9 f4       	brne	.+42     	; 0x3572 <main+0x2a6>
	{

		Gotoxy(0,1);
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	61 e0       	ldi	r22, 0x01	; 1
    354c:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>

		LCD_vidWriteString("Machine-KO");
    3550:	8e e7       	ldi	r24, 0x7E	; 126
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
		Gotoxy(0,2);
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	62 e0       	ldi	r22, 0x02	; 2
    355c:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteString("1:Options 2:buy");
    3560:	89 e8       	ldi	r24, 0x89	; 137
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
		LCD_flag=1;
    3568:	fe 01       	movw	r30, r28
    356a:	ef 5f       	subi	r30, 0xFF	; 255
    356c:	fe 4f       	sbci	r31, 0xFE	; 254
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 83       	st	Z, r24

	}

	while(1)
	{
		if(!LCD_flag)
    3572:	fe 01       	movw	r30, r28
    3574:	ef 5f       	subi	r30, 0xFF	; 255
    3576:	fe 4f       	sbci	r31, 0xFE	; 254
    3578:	80 81       	ld	r24, Z
    357a:	88 23       	and	r24, r24
    357c:	a9 f4       	brne	.+42     	; 0x35a8 <main+0x2dc>
		{

			Gotoxy(0,1);
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	61 e0       	ldi	r22, 0x01	; 1
    3582:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>

			LCD_vidWriteString("Machine-KO");
    3586:	8e e7       	ldi	r24, 0x7E	; 126
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
			Gotoxy(0,2);
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	62 e0       	ldi	r22, 0x02	; 2
    3592:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
			LCD_vidWriteString("1:Options 2:buy");
    3596:	89 e8       	ldi	r24, 0x89	; 137
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
			LCD_flag=1;
    359e:	fe 01       	movw	r30, r28
    35a0:	ef 5f       	subi	r30, 0xFF	; 255
    35a2:	fe 4f       	sbci	r31, 0xFE	; 254
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	80 83       	st	Z, r24

		}

		Gotoxy(14,1);
    35a8:	8e e0       	ldi	r24, 0x0E	; 14
    35aa:	61 e0       	ldi	r22, 0x01	; 1
    35ac:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteCharctr(DEGREES_SYMBOL);
    35b0:	8f ed       	ldi	r24, 0xDF	; 223
    35b2:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr('C');
    35b6:	83 e4       	ldi	r24, 0x43	; 67
    35b8:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>

		Gotoxy(12,1);
    35bc:	8c e0       	ldi	r24, 0x0C	; 12
    35be:	61 e0       	ldi	r22, 0x01	; 1
    35c0:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_writeNum_u32(Temperature);
    35c4:	80 91 bc 01 	lds	r24, 0x01BC
    35c8:	90 91 bd 01 	lds	r25, 0x01BD
    35cc:	a0 91 be 01 	lds	r26, 0x01BE
    35d0:	b0 91 bf 01 	lds	r27, 0x01BF
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	0e 94 81 13 	call	0x2702	; 0x2702 <LCD_writeNum_u32>
		LCD_vidWriteCharctr(' ');
    35dc:	80 e2       	ldi	r24, 0x20	; 32
    35de:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>



		//wait for the keypad pressing
		key_pressed = NOT_PRESSED;
    35e2:	fe 01       	movw	r30, r28
    35e4:	ec 5f       	subi	r30, 0xFC	; 252
    35e6:	fe 4f       	sbci	r31, 0xFE	; 254
    35e8:	8f ef       	ldi	r24, 0xFF	; 255
    35ea:	80 83       	st	Z, r24
		u8 display = 0;
    35ec:	fe 01       	movw	r30, r28
    35ee:	e0 50       	subi	r30, 0x00	; 0
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	10 82       	st	Z, r1
		display=KPD_GetKey()-ASCII_ZERO;
    35f4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    35f8:	fe 01       	movw	r30, r28
    35fa:	e0 50       	subi	r30, 0x00	; 0
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 53       	subi	r24, 0x30	; 48
    3600:	80 83       	st	Z, r24
		switch(display)
    3602:	fe 01       	movw	r30, r28
    3604:	e0 50       	subi	r30, 0x00	; 0
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	80 81       	ld	r24, Z
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	c4 5f       	subi	r28, 0xF4	; 244
    3610:	de 4f       	sbci	r29, 0xFE	; 254
    3612:	39 83       	std	Y+1, r19	; 0x01
    3614:	28 83       	st	Y, r18
    3616:	cc 50       	subi	r28, 0x0C	; 12
    3618:	d1 40       	sbci	r29, 0x01	; 1
    361a:	c4 5f       	subi	r28, 0xF4	; 244
    361c:	de 4f       	sbci	r29, 0xFE	; 254
    361e:	88 81       	ld	r24, Y
    3620:	99 81       	ldd	r25, Y+1	; 0x01
    3622:	cc 50       	subi	r28, 0x0C	; 12
    3624:	d1 40       	sbci	r29, 0x01	; 1
    3626:	81 30       	cpi	r24, 0x01	; 1
    3628:	91 05       	cpc	r25, r1
    362a:	69 f0       	breq	.+26     	; 0x3646 <main+0x37a>
    362c:	c4 5f       	subi	r28, 0xF4	; 244
    362e:	de 4f       	sbci	r29, 0xFE	; 254
    3630:	e8 81       	ld	r30, Y
    3632:	f9 81       	ldd	r31, Y+1	; 0x01
    3634:	cc 50       	subi	r28, 0x0C	; 12
    3636:	d1 40       	sbci	r29, 0x01	; 1
    3638:	e2 30       	cpi	r30, 0x02	; 2
    363a:	f1 05       	cpc	r31, r1
    363c:	11 f4       	brne	.+4      	; 0x3642 <main+0x376>
    363e:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <main+0x161c>
    3642:	0c 94 4f 28 	jmp	0x509e	; 0x509e <main+0x1dd2>
		{
		case 1:	//OPTIONS
			//don't need now
			Global_Interrupt_Disable();
    3646:	0e 94 46 0c 	call	0x188c	; 0x188c <Global_Interrupt_Disable>
			LCD_flag=0;
    364a:	fe 01       	movw	r30, r28
    364c:	ef 5f       	subi	r30, 0xFF	; 255
    364e:	fe 4f       	sbci	r31, 0xFE	; 254
    3650:	10 82       	st	Z, r1


			LCD_vidSendCommand(lcd_Clear);
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

			//Entering Password
			LCD_vidWriteString("Enter Password :");
    3658:	89 e9       	ldi	r24, 0x99	; 153
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

			u8 key_pressed = 0;
    3660:	fe 01       	movw	r30, r28
    3662:	e1 50       	subi	r30, 0x01	; 1
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	10 82       	st	Z, r1
			u8 pass_counter=0;
    3668:	fe 01       	movw	r30, r28
    366a:	e2 50       	subi	r30, 0x02	; 2
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	10 82       	st	Z, r1
			u8 pass_entered=0;
    3670:	fe 01       	movw	r30, r28
    3672:	e3 50       	subi	r30, 0x03	; 3
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	10 82       	st	Z, r1
    3678:	ac c1       	rjmp	.+856    	; 0x39d2 <main+0x706>

			while (pass_counter<PASS_SIZE)
			{
				key_pressed = NOT_PRESSED;
    367a:	fe 01       	movw	r30, r28
    367c:	e1 50       	subi	r30, 0x01	; 1
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	8f ef       	ldi	r24, 0xFF	; 255
    3682:	80 83       	st	Z, r24
    3684:	06 c0       	rjmp	.+12     	; 0x3692 <main+0x3c6>
				while (key_pressed == NOT_PRESSED)
				{
					key_pressed = KPD_GetKey();
    3686:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    368a:	fe 01       	movw	r30, r28
    368c:	e1 50       	subi	r30, 0x01	; 1
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 83       	st	Z, r24
			u8 pass_entered=0;

			while (pass_counter<PASS_SIZE)
			{
				key_pressed = NOT_PRESSED;
				while (key_pressed == NOT_PRESSED)
    3692:	fe 01       	movw	r30, r28
    3694:	e1 50       	subi	r30, 0x01	; 1
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	80 81       	ld	r24, Z
    369a:	8f 3f       	cpi	r24, 0xFF	; 255
    369c:	a1 f3       	breq	.-24     	; 0x3686 <main+0x3ba>
					key_pressed = KPD_GetKey();
				}

				//equation to save the entered pass in a variable
				//we enter 1 , 1 , 1 then 2 >>>> so it makes it 1112
				pass_entered = pass_entered * 10 + (key_pressed - '0');
    369e:	fe 01       	movw	r30, r28
    36a0:	e3 50       	subi	r30, 0x03	; 3
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 81       	ld	r24, Z
    36a6:	88 2f       	mov	r24, r24
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	9c 01       	movw	r18, r24
    36ac:	22 0f       	add	r18, r18
    36ae:	33 1f       	adc	r19, r19
    36b0:	c9 01       	movw	r24, r18
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	82 0f       	add	r24, r18
    36bc:	93 1f       	adc	r25, r19
    36be:	98 2f       	mov	r25, r24
    36c0:	fe 01       	movw	r30, r28
    36c2:	e1 50       	subi	r30, 0x01	; 1
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	89 0f       	add	r24, r25
    36ca:	fe 01       	movw	r30, r28
    36cc:	e3 50       	subi	r30, 0x03	; 3
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 53       	subi	r24, 0x30	; 48
    36d2:	80 83       	st	Z, r24

				LCD_vidWriteCharctr(key_pressed);
    36d4:	fe 01       	movw	r30, r28
    36d6:	e1 50       	subi	r30, 0x01	; 1
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 81       	ld	r24, Z
    36dc:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    36e0:	fe 01       	movw	r30, r28
    36e2:	e5 51       	subi	r30, 0x15	; 21
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	a8 e4       	ldi	r26, 0x48	; 72
    36ec:	b3 e4       	ldi	r27, 0x43	; 67
    36ee:	80 83       	st	Z, r24
    36f0:	91 83       	std	Z+1, r25	; 0x01
    36f2:	a2 83       	std	Z+2, r26	; 0x02
    36f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f6:	8e 01       	movw	r16, r28
    36f8:	09 51       	subi	r16, 0x19	; 25
    36fa:	1f 4f       	sbci	r17, 0xFF	; 255
    36fc:	fe 01       	movw	r30, r28
    36fe:	e5 51       	subi	r30, 0x15	; 21
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	4a ef       	ldi	r20, 0xFA	; 250
    3710:	54 e4       	ldi	r21, 0x44	; 68
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	f8 01       	movw	r30, r16
    371c:	80 83       	st	Z, r24
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	a2 83       	std	Z+2, r26	; 0x02
    3722:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3724:	fe 01       	movw	r30, r28
    3726:	e9 51       	subi	r30, 0x19	; 25
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	44 f4       	brge	.+16     	; 0x3752 <main+0x486>
		__ticks = 1;
    3742:	fe 01       	movw	r30, r28
    3744:	eb 51       	subi	r30, 0x1B	; 27
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	80 83       	st	Z, r24
    3750:	64 c0       	rjmp	.+200    	; 0x381a <main+0x54e>
	else if (__tmp > 65535)
    3752:	fe 01       	movw	r30, r28
    3754:	e9 51       	subi	r30, 0x19	; 25
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	60 81       	ld	r22, Z
    375a:	71 81       	ldd	r23, Z+1	; 0x01
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	3f ef       	ldi	r19, 0xFF	; 255
    3764:	4f e7       	ldi	r20, 0x7F	; 127
    3766:	57 e4       	ldi	r21, 0x47	; 71
    3768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    376c:	18 16       	cp	r1, r24
    376e:	0c f0       	brlt	.+2      	; 0x3772 <main+0x4a6>
    3770:	43 c0       	rjmp	.+134    	; 0x37f8 <main+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3772:	fe 01       	movw	r30, r28
    3774:	e5 51       	subi	r30, 0x15	; 21
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	60 81       	ld	r22, Z
    377a:	71 81       	ldd	r23, Z+1	; 0x01
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	93 81       	ldd	r25, Z+3	; 0x03
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	40 e2       	ldi	r20, 0x20	; 32
    3786:	51 e4       	ldi	r21, 0x41	; 65
    3788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	8e 01       	movw	r16, r28
    3792:	0b 51       	subi	r16, 0x1B	; 27
    3794:	1f 4f       	sbci	r17, 0xFF	; 255
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	f8 01       	movw	r30, r16
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	80 83       	st	Z, r24
    37a8:	1f c0       	rjmp	.+62     	; 0x37e8 <main+0x51c>
    37aa:	fe 01       	movw	r30, r28
    37ac:	ed 51       	subi	r30, 0x1D	; 29
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	88 ec       	ldi	r24, 0xC8	; 200
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	80 83       	st	Z, r24
    37b8:	fe 01       	movw	r30, r28
    37ba:	ed 51       	subi	r30, 0x1D	; 29
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	91 81       	ldd	r25, Z+1	; 0x01
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <main+0x4f6>
    37c6:	fe 01       	movw	r30, r28
    37c8:	ed 51       	subi	r30, 0x1D	; 29
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d0:	de 01       	movw	r26, r28
    37d2:	ab 51       	subi	r26, 0x1B	; 27
    37d4:	bf 4f       	sbci	r27, 0xFF	; 255
    37d6:	fe 01       	movw	r30, r28
    37d8:	eb 51       	subi	r30, 0x1B	; 27
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	80 81       	ld	r24, Z
    37de:	91 81       	ldd	r25, Z+1	; 0x01
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	9c 93       	st	X, r25
    37e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e8:	fe 01       	movw	r30, r28
    37ea:	eb 51       	subi	r30, 0x1B	; 27
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	d1 f6       	brne	.-76     	; 0x37aa <main+0x4de>
    37f6:	27 c0       	rjmp	.+78     	; 0x3846 <main+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f8:	8e 01       	movw	r16, r28
    37fa:	0b 51       	subi	r16, 0x1B	; 27
    37fc:	1f 4f       	sbci	r17, 0xFF	; 255
    37fe:	fe 01       	movw	r30, r28
    3800:	e9 51       	subi	r30, 0x19	; 25
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	60 81       	ld	r22, Z
    3806:	71 81       	ldd	r23, Z+1	; 0x01
    3808:	82 81       	ldd	r24, Z+2	; 0x02
    380a:	93 81       	ldd	r25, Z+3	; 0x03
    380c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	f8 01       	movw	r30, r16
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	80 83       	st	Z, r24
    381a:	de 01       	movw	r26, r28
    381c:	af 51       	subi	r26, 0x1F	; 31
    381e:	bf 4f       	sbci	r27, 0xFF	; 255
    3820:	fe 01       	movw	r30, r28
    3822:	eb 51       	subi	r30, 0x1B	; 27
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 81       	ld	r24, Z
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	8d 93       	st	X+, r24
    382c:	9c 93       	st	X, r25
    382e:	fe 01       	movw	r30, r28
    3830:	ef 51       	subi	r30, 0x1F	; 31
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <main+0x56c>
    383c:	fe 01       	movw	r30, r28
    383e:	ef 51       	subi	r30, 0x1F	; 31
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	80 83       	st	Z, r24

				_delay_ms(CHARACTER_PREVIEW_TIME);

				//go to the previous location to hide the pass entered
				Gotoxy(0+pass_counter,2);
    3846:	fe 01       	movw	r30, r28
    3848:	e2 50       	subi	r30, 0x02	; 2
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 81       	ld	r24, Z
    384e:	62 e0       	ldi	r22, 0x02	; 2
    3850:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				LCD_vidWriteCharctr(PASSWORD_SYMBOL);
    3854:	8a e2       	ldi	r24, 0x2A	; 42
    3856:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    385a:	fe 01       	movw	r30, r28
    385c:	e3 52       	subi	r30, 0x23	; 35
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	a8 ec       	ldi	r26, 0xC8	; 200
    3866:	b2 e4       	ldi	r27, 0x42	; 66
    3868:	80 83       	st	Z, r24
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	a2 83       	std	Z+2, r26	; 0x02
    386e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3870:	8e 01       	movw	r16, r28
    3872:	07 52       	subi	r16, 0x27	; 39
    3874:	1f 4f       	sbci	r17, 0xFF	; 255
    3876:	fe 01       	movw	r30, r28
    3878:	e3 52       	subi	r30, 0x23	; 35
    387a:	ff 4f       	sbci	r31, 0xFF	; 255
    387c:	60 81       	ld	r22, Z
    387e:	71 81       	ldd	r23, Z+1	; 0x01
    3880:	82 81       	ldd	r24, Z+2	; 0x02
    3882:	93 81       	ldd	r25, Z+3	; 0x03
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	4a ef       	ldi	r20, 0xFA	; 250
    388a:	54 e4       	ldi	r21, 0x44	; 68
    388c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	f8 01       	movw	r30, r16
    3896:	80 83       	st	Z, r24
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	a2 83       	std	Z+2, r26	; 0x02
    389c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    389e:	fe 01       	movw	r30, r28
    38a0:	e7 52       	subi	r30, 0x27	; 39
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e8       	ldi	r20, 0x80	; 128
    38b2:	5f e3       	ldi	r21, 0x3F	; 63
    38b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38b8:	88 23       	and	r24, r24
    38ba:	44 f4       	brge	.+16     	; 0x38cc <main+0x600>
		__ticks = 1;
    38bc:	fe 01       	movw	r30, r28
    38be:	e9 52       	subi	r30, 0x29	; 41
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	91 83       	std	Z+1, r25	; 0x01
    38c8:	80 83       	st	Z, r24
    38ca:	64 c0       	rjmp	.+200    	; 0x3994 <main+0x6c8>
	else if (__tmp > 65535)
    38cc:	fe 01       	movw	r30, r28
    38ce:	e7 52       	subi	r30, 0x27	; 39
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	60 81       	ld	r22, Z
    38d4:	71 81       	ldd	r23, Z+1	; 0x01
    38d6:	82 81       	ldd	r24, Z+2	; 0x02
    38d8:	93 81       	ldd	r25, Z+3	; 0x03
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	3f ef       	ldi	r19, 0xFF	; 255
    38de:	4f e7       	ldi	r20, 0x7F	; 127
    38e0:	57 e4       	ldi	r21, 0x47	; 71
    38e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	0c f0       	brlt	.+2      	; 0x38ec <main+0x620>
    38ea:	43 c0       	rjmp	.+134    	; 0x3972 <main+0x6a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ec:	fe 01       	movw	r30, r28
    38ee:	e3 52       	subi	r30, 0x23	; 35
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	60 81       	ld	r22, Z
    38f4:	71 81       	ldd	r23, Z+1	; 0x01
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e2       	ldi	r20, 0x20	; 32
    3900:	51 e4       	ldi	r21, 0x41	; 65
    3902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	8e 01       	movw	r16, r28
    390c:	09 52       	subi	r16, 0x29	; 41
    390e:	1f 4f       	sbci	r17, 0xFF	; 255
    3910:	bc 01       	movw	r22, r24
    3912:	cd 01       	movw	r24, r26
    3914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	f8 01       	movw	r30, r16
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	80 83       	st	Z, r24
    3922:	1f c0       	rjmp	.+62     	; 0x3962 <main+0x696>
    3924:	fe 01       	movw	r30, r28
    3926:	eb 52       	subi	r30, 0x2B	; 43
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	88 ec       	ldi	r24, 0xC8	; 200
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	91 83       	std	Z+1, r25	; 0x01
    3930:	80 83       	st	Z, r24
    3932:	fe 01       	movw	r30, r28
    3934:	eb 52       	subi	r30, 0x2B	; 43
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <main+0x670>
    3940:	fe 01       	movw	r30, r28
    3942:	eb 52       	subi	r30, 0x2B	; 43
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394a:	de 01       	movw	r26, r28
    394c:	a9 52       	subi	r26, 0x29	; 41
    394e:	bf 4f       	sbci	r27, 0xFF	; 255
    3950:	fe 01       	movw	r30, r28
    3952:	e9 52       	subi	r30, 0x29	; 41
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	80 81       	ld	r24, Z
    3958:	91 81       	ldd	r25, Z+1	; 0x01
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	11 96       	adiw	r26, 0x01	; 1
    395e:	9c 93       	st	X, r25
    3960:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3962:	fe 01       	movw	r30, r28
    3964:	e9 52       	subi	r30, 0x29	; 41
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	91 81       	ldd	r25, Z+1	; 0x01
    396c:	00 97       	sbiw	r24, 0x00	; 0
    396e:	d1 f6       	brne	.-76     	; 0x3924 <main+0x658>
    3970:	27 c0       	rjmp	.+78     	; 0x39c0 <main+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3972:	8e 01       	movw	r16, r28
    3974:	09 52       	subi	r16, 0x29	; 41
    3976:	1f 4f       	sbci	r17, 0xFF	; 255
    3978:	fe 01       	movw	r30, r28
    397a:	e7 52       	subi	r30, 0x27	; 39
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	60 81       	ld	r22, Z
    3980:	71 81       	ldd	r23, Z+1	; 0x01
    3982:	82 81       	ldd	r24, Z+2	; 0x02
    3984:	93 81       	ldd	r25, Z+3	; 0x03
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	f8 01       	movw	r30, r16
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
    3994:	de 01       	movw	r26, r28
    3996:	ad 52       	subi	r26, 0x2D	; 45
    3998:	bf 4f       	sbci	r27, 0xFF	; 255
    399a:	fe 01       	movw	r30, r28
    399c:	e9 52       	subi	r30, 0x29	; 41
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	8d 93       	st	X+, r24
    39a6:	9c 93       	st	X, r25
    39a8:	fe 01       	movw	r30, r28
    39aa:	ed 52       	subi	r30, 0x2D	; 45
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	80 81       	ld	r24, Z
    39b0:	91 81       	ldd	r25, Z+1	; 0x01
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <main+0x6e6>
    39b6:	fe 01       	movw	r30, r28
    39b8:	ed 52       	subi	r30, 0x2D	; 45
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	91 83       	std	Z+1, r25	; 0x01
    39be:	80 83       	st	Z, r24
				_delay_ms(100);
				pass_counter++;
    39c0:	de 01       	movw	r26, r28
    39c2:	a2 50       	subi	r26, 0x02	; 2
    39c4:	bf 4f       	sbci	r27, 0xFF	; 255
    39c6:	fe 01       	movw	r30, r28
    39c8:	e2 50       	subi	r30, 0x02	; 2
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	80 81       	ld	r24, Z
    39ce:	8f 5f       	subi	r24, 0xFF	; 255
    39d0:	8c 93       	st	X, r24

			u8 key_pressed = 0;
			u8 pass_counter=0;
			u8 pass_entered=0;

			while (pass_counter<PASS_SIZE)
    39d2:	fe 01       	movw	r30, r28
    39d4:	e2 50       	subi	r30, 0x02	; 2
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	84 30       	cpi	r24, 0x04	; 4
    39dc:	08 f4       	brcc	.+2      	; 0x39e0 <main+0x714>
    39de:	4d ce       	rjmp	.-870    	; 0x367a <main+0x3ae>
				LCD_vidWriteCharctr(PASSWORD_SYMBOL);
				_delay_ms(100);
				pass_counter++;

			}
			LCD_vidSendCommand(lcd_Clear);
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

			//SAVE PASSWORD & SAVE THE STATUS AS SET
			EEPROM_vWrite(EEPROM_CHECK_PASS_ADDRESS,pass_entered);
    39e6:	fe 01       	movw	r30, r28
    39e8:	e3 50       	subi	r30, 0x03	; 3
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	8d ee       	ldi	r24, 0xED	; 237
    39ee:	60 81       	ld	r22, Z
    39f0:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
    39f4:	fe 01       	movw	r30, r28
    39f6:	e1 53       	subi	r30, 0x31	; 49
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	aa e7       	ldi	r26, 0x7A	; 122
    3a00:	b4 e4       	ldi	r27, 0x44	; 68
    3a02:	80 83       	st	Z, r24
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	a2 83       	std	Z+2, r26	; 0x02
    3a08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0a:	8e 01       	movw	r16, r28
    3a0c:	05 53       	subi	r16, 0x35	; 53
    3a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a10:	fe 01       	movw	r30, r28
    3a12:	e1 53       	subi	r30, 0x31	; 49
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	60 81       	ld	r22, Z
    3a18:	71 81       	ldd	r23, Z+1	; 0x01
    3a1a:	82 81       	ldd	r24, Z+2	; 0x02
    3a1c:	93 81       	ldd	r25, Z+3	; 0x03
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4a ef       	ldi	r20, 0xFA	; 250
    3a24:	54 e4       	ldi	r21, 0x44	; 68
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	f8 01       	movw	r30, r16
    3a30:	80 83       	st	Z, r24
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	a2 83       	std	Z+2, r26	; 0x02
    3a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e5 53       	subi	r30, 0x35	; 53
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	60 81       	ld	r22, Z
    3a40:	71 81       	ldd	r23, Z+1	; 0x01
    3a42:	82 81       	ldd	r24, Z+2	; 0x02
    3a44:	93 81       	ldd	r25, Z+3	; 0x03
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e8       	ldi	r20, 0x80	; 128
    3a4c:	5f e3       	ldi	r21, 0x3F	; 63
    3a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a52:	88 23       	and	r24, r24
    3a54:	44 f4       	brge	.+16     	; 0x3a66 <main+0x79a>
		__ticks = 1;
    3a56:	fe 01       	movw	r30, r28
    3a58:	e7 53       	subi	r30, 0x37	; 55
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	91 83       	std	Z+1, r25	; 0x01
    3a62:	80 83       	st	Z, r24
    3a64:	64 c0       	rjmp	.+200    	; 0x3b2e <main+0x862>
	else if (__tmp > 65535)
    3a66:	fe 01       	movw	r30, r28
    3a68:	e5 53       	subi	r30, 0x35	; 53
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	60 81       	ld	r22, Z
    3a6e:	71 81       	ldd	r23, Z+1	; 0x01
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	93 81       	ldd	r25, Z+3	; 0x03
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	0c f0       	brlt	.+2      	; 0x3a86 <main+0x7ba>
    3a84:	43 c0       	rjmp	.+134    	; 0x3b0c <main+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a86:	fe 01       	movw	r30, r28
    3a88:	e1 53       	subi	r30, 0x31	; 49
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	60 81       	ld	r22, Z
    3a8e:	71 81       	ldd	r23, Z+1	; 0x01
    3a90:	82 81       	ldd	r24, Z+2	; 0x02
    3a92:	93 81       	ldd	r25, Z+3	; 0x03
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e2       	ldi	r20, 0x20	; 32
    3a9a:	51 e4       	ldi	r21, 0x41	; 65
    3a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	8e 01       	movw	r16, r28
    3aa6:	07 53       	subi	r16, 0x37	; 55
    3aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	91 83       	std	Z+1, r25	; 0x01
    3aba:	80 83       	st	Z, r24
    3abc:	1f c0       	rjmp	.+62     	; 0x3afc <main+0x830>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e9 53       	subi	r30, 0x39	; 57
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	88 ec       	ldi	r24, 0xC8	; 200
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	80 83       	st	Z, r24
    3acc:	fe 01       	movw	r30, r28
    3ace:	e9 53       	subi	r30, 0x39	; 57
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <main+0x80a>
    3ada:	fe 01       	movw	r30, r28
    3adc:	e9 53       	subi	r30, 0x39	; 57
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae4:	de 01       	movw	r26, r28
    3ae6:	a7 53       	subi	r26, 0x37	; 55
    3ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aea:	fe 01       	movw	r30, r28
    3aec:	e7 53       	subi	r30, 0x37	; 55
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	91 81       	ldd	r25, Z+1	; 0x01
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	11 96       	adiw	r26, 0x01	; 1
    3af8:	9c 93       	st	X, r25
    3afa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afc:	fe 01       	movw	r30, r28
    3afe:	e7 53       	subi	r30, 0x37	; 55
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	00 97       	sbiw	r24, 0x00	; 0
    3b08:	d1 f6       	brne	.-76     	; 0x3abe <main+0x7f2>
    3b0a:	27 c0       	rjmp	.+78     	; 0x3b5a <main+0x88e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b0c:	8e 01       	movw	r16, r28
    3b0e:	07 53       	subi	r16, 0x37	; 55
    3b10:	1f 4f       	sbci	r17, 0xFF	; 255
    3b12:	fe 01       	movw	r30, r28
    3b14:	e5 53       	subi	r30, 0x35	; 53
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	60 81       	ld	r22, Z
    3b1a:	71 81       	ldd	r23, Z+1	; 0x01
    3b1c:	82 81       	ldd	r24, Z+2	; 0x02
    3b1e:	93 81       	ldd	r25, Z+3	; 0x03
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	f8 01       	movw	r30, r16
    3b2a:	91 83       	std	Z+1, r25	; 0x01
    3b2c:	80 83       	st	Z, r24
    3b2e:	de 01       	movw	r26, r28
    3b30:	ab 53       	subi	r26, 0x3B	; 59
    3b32:	bf 4f       	sbci	r27, 0xFF	; 255
    3b34:	fe 01       	movw	r30, r28
    3b36:	e7 53       	subi	r30, 0x37	; 55
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	80 81       	ld	r24, Z
    3b3c:	91 81       	ldd	r25, Z+1	; 0x01
    3b3e:	8d 93       	st	X+, r24
    3b40:	9c 93       	st	X, r25
    3b42:	fe 01       	movw	r30, r28
    3b44:	eb 53       	subi	r30, 0x3B	; 59
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <main+0x880>
    3b50:	fe 01       	movw	r30, r28
    3b52:	eb 53       	subi	r30, 0x3B	; 59
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	91 83       	std	Z+1, r25	; 0x01
    3b58:	80 83       	st	Z, r24
			//EEPROM_vWrite(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);
			_delay_ms(1000);
			LCD_vidSendCommand(lcd_Clear);
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

			//variable for checking the password and compare it with saved one
			u8 checking=0;
    3b60:	fe 01       	movw	r30, r28
    3b62:	e9 5f       	subi	r30, 0xF9	; 249
    3b64:	fe 4f       	sbci	r31, 0xFE	; 254
    3b66:	10 82       	st	Z, r1
			EEPROM_vRead(EEPROM_CHECK_PASS_ADDRESS,&checking);
    3b68:	9e 01       	movw	r18, r28
    3b6a:	29 5f       	subi	r18, 0xF9	; 249
    3b6c:	3e 4f       	sbci	r19, 0xFE	; 254
    3b6e:	8d ee       	ldi	r24, 0xED	; 237
    3b70:	b9 01       	movw	r22, r18
    3b72:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>


			if( saved_pass==checking)
    3b76:	fe 01       	movw	r30, r28
    3b78:	ea 5f       	subi	r30, 0xFA	; 250
    3b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7c:	90 81       	ld	r25, Z
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e9 5f       	subi	r30, 0xF9	; 249
    3b82:	fe 4f       	sbci	r31, 0xFE	; 254
    3b84:	80 81       	ld	r24, Z
    3b86:	98 17       	cp	r25, r24
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <main+0x8c0>
    3b8a:	e0 c5       	rjmp	.+3008   	; 0x474c <main+0x1480>
			{
				LCD_vidSendCommand(lcd_Clear);
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

				LCD_vidWriteString("Correct Password");
    3b92:	8a ea       	ldi	r24, 0xAA	; 170
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ef 53       	subi	r30, 0x3F	; 63
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	aa ef       	ldi	r26, 0xFA	; 250
    3ba6:	b3 e4       	ldi	r27, 0x43	; 67
    3ba8:	80 83       	st	Z, r24
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	a2 83       	std	Z+2, r26	; 0x02
    3bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb0:	8e 01       	movw	r16, r28
    3bb2:	03 54       	subi	r16, 0x43	; 67
    3bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	ef 53       	subi	r30, 0x3F	; 63
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	60 81       	ld	r22, Z
    3bbe:	71 81       	ldd	r23, Z+1	; 0x01
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	93 81       	ldd	r25, Z+3	; 0x03
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4a ef       	ldi	r20, 0xFA	; 250
    3bca:	54 e4       	ldi	r21, 0x44	; 68
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	f8 01       	movw	r30, r16
    3bd6:	80 83       	st	Z, r24
    3bd8:	91 83       	std	Z+1, r25	; 0x01
    3bda:	a2 83       	std	Z+2, r26	; 0x02
    3bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bde:	fe 01       	movw	r30, r28
    3be0:	e3 54       	subi	r30, 0x43	; 67
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e8       	ldi	r20, 0x80	; 128
    3bf2:	5f e3       	ldi	r21, 0x3F	; 63
    3bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf8:	88 23       	and	r24, r24
    3bfa:	44 f4       	brge	.+16     	; 0x3c0c <main+0x940>
		__ticks = 1;
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e5 54       	subi	r30, 0x45	; 69
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	91 83       	std	Z+1, r25	; 0x01
    3c08:	80 83       	st	Z, r24
    3c0a:	64 c0       	rjmp	.+200    	; 0x3cd4 <main+0xa08>
	else if (__tmp > 65535)
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e3 54       	subi	r30, 0x43	; 67
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	60 81       	ld	r22, Z
    3c14:	71 81       	ldd	r23, Z+1	; 0x01
    3c16:	82 81       	ldd	r24, Z+2	; 0x02
    3c18:	93 81       	ldd	r25, Z+3	; 0x03
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	3f ef       	ldi	r19, 0xFF	; 255
    3c1e:	4f e7       	ldi	r20, 0x7F	; 127
    3c20:	57 e4       	ldi	r21, 0x47	; 71
    3c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c26:	18 16       	cp	r1, r24
    3c28:	0c f0       	brlt	.+2      	; 0x3c2c <main+0x960>
    3c2a:	43 c0       	rjmp	.+134    	; 0x3cb2 <main+0x9e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ef 53       	subi	r30, 0x3F	; 63
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e2       	ldi	r20, 0x20	; 32
    3c40:	51 e4       	ldi	r21, 0x41	; 65
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	8e 01       	movw	r16, r28
    3c4c:	05 54       	subi	r16, 0x45	; 69
    3c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	91 83       	std	Z+1, r25	; 0x01
    3c60:	80 83       	st	Z, r24
    3c62:	1f c0       	rjmp	.+62     	; 0x3ca2 <main+0x9d6>
    3c64:	fe 01       	movw	r30, r28
    3c66:	e7 54       	subi	r30, 0x47	; 71
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	88 ec       	ldi	r24, 0xC8	; 200
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
    3c72:	fe 01       	movw	r30, r28
    3c74:	e7 54       	subi	r30, 0x47	; 71
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	80 81       	ld	r24, Z
    3c7a:	91 81       	ldd	r25, Z+1	; 0x01
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <main+0x9b0>
    3c80:	fe 01       	movw	r30, r28
    3c82:	e7 54       	subi	r30, 0x47	; 71
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8a:	de 01       	movw	r26, r28
    3c8c:	a5 54       	subi	r26, 0x45	; 69
    3c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c90:	fe 01       	movw	r30, r28
    3c92:	e5 54       	subi	r30, 0x45	; 69
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 81       	ld	r24, Z
    3c98:	91 81       	ldd	r25, Z+1	; 0x01
    3c9a:	01 97       	sbiw	r24, 0x01	; 1
    3c9c:	11 96       	adiw	r26, 0x01	; 1
    3c9e:	9c 93       	st	X, r25
    3ca0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e5 54       	subi	r30, 0x45	; 69
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 81       	ld	r24, Z
    3caa:	91 81       	ldd	r25, Z+1	; 0x01
    3cac:	00 97       	sbiw	r24, 0x00	; 0
    3cae:	d1 f6       	brne	.-76     	; 0x3c64 <main+0x998>
    3cb0:	44 c5       	rjmp	.+2696   	; 0x473a <main+0x146e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb2:	8e 01       	movw	r16, r28
    3cb4:	05 54       	subi	r16, 0x45	; 69
    3cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e3 54       	subi	r30, 0x43	; 67
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	60 81       	ld	r22, Z
    3cc0:	71 81       	ldd	r23, Z+1	; 0x01
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	93 81       	ldd	r25, Z+3	; 0x03
    3cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	f8 01       	movw	r30, r16
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
    3cd4:	de 01       	movw	r26, r28
    3cd6:	a9 54       	subi	r26, 0x49	; 73
    3cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e5 54       	subi	r30, 0x45	; 69
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	11 96       	adiw	r26, 0x01	; 1
    3ce6:	9c 93       	st	X, r25
    3ce8:	8e 93       	st	-X, r24
    3cea:	fe 01       	movw	r30, r28
    3cec:	e9 54       	subi	r30, 0x49	; 73
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	f1 f7       	brne	.-4      	; 0x3cf4 <main+0xa28>
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	e9 54       	subi	r30, 0x49	; 73
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	91 83       	std	Z+1, r25	; 0x01
    3d00:	80 83       	st	Z, r24
    3d02:	1b c5       	rjmp	.+2614   	; 0x473a <main+0x146e>

				while(key_pressed!='3'){


					//IF Pass RIGHT GO TO options >>> add items of cans number
					LCD_vidSendCommand(lcd_Clear);
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	ed 54       	subi	r30, 0x4D	; 77
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	aa ef       	ldi	r26, 0xFA	; 250
    3d16:	b3 e4       	ldi	r27, 0x43	; 67
    3d18:	80 83       	st	Z, r24
    3d1a:	91 83       	std	Z+1, r25	; 0x01
    3d1c:	a2 83       	std	Z+2, r26	; 0x02
    3d1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d20:	8e 01       	movw	r16, r28
    3d22:	01 55       	subi	r16, 0x51	; 81
    3d24:	1f 4f       	sbci	r17, 0xFF	; 255
    3d26:	fe 01       	movw	r30, r28
    3d28:	ed 54       	subi	r30, 0x4D	; 77
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	60 81       	ld	r22, Z
    3d2e:	71 81       	ldd	r23, Z+1	; 0x01
    3d30:	82 81       	ldd	r24, Z+2	; 0x02
    3d32:	93 81       	ldd	r25, Z+3	; 0x03
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	4a ef       	ldi	r20, 0xFA	; 250
    3d3a:	54 e4       	ldi	r21, 0x44	; 68
    3d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	f8 01       	movw	r30, r16
    3d46:	80 83       	st	Z, r24
    3d48:	91 83       	std	Z+1, r25	; 0x01
    3d4a:	a2 83       	std	Z+2, r26	; 0x02
    3d4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d4e:	fe 01       	movw	r30, r28
    3d50:	e1 55       	subi	r30, 0x51	; 81
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	60 81       	ld	r22, Z
    3d56:	71 81       	ldd	r23, Z+1	; 0x01
    3d58:	82 81       	ldd	r24, Z+2	; 0x02
    3d5a:	93 81       	ldd	r25, Z+3	; 0x03
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e8       	ldi	r20, 0x80	; 128
    3d62:	5f e3       	ldi	r21, 0x3F	; 63
    3d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d68:	88 23       	and	r24, r24
    3d6a:	44 f4       	brge	.+16     	; 0x3d7c <main+0xab0>
		__ticks = 1;
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e3 55       	subi	r30, 0x53	; 83
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
    3d7a:	64 c0       	rjmp	.+200    	; 0x3e44 <main+0xb78>
	else if (__tmp > 65535)
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e1 55       	subi	r30, 0x51	; 81
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	60 81       	ld	r22, Z
    3d84:	71 81       	ldd	r23, Z+1	; 0x01
    3d86:	82 81       	ldd	r24, Z+2	; 0x02
    3d88:	93 81       	ldd	r25, Z+3	; 0x03
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	3f ef       	ldi	r19, 0xFF	; 255
    3d8e:	4f e7       	ldi	r20, 0x7F	; 127
    3d90:	57 e4       	ldi	r21, 0x47	; 71
    3d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d96:	18 16       	cp	r1, r24
    3d98:	0c f0       	brlt	.+2      	; 0x3d9c <main+0xad0>
    3d9a:	43 c0       	rjmp	.+134    	; 0x3e22 <main+0xb56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	ed 54       	subi	r30, 0x4D	; 77
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	60 81       	ld	r22, Z
    3da4:	71 81       	ldd	r23, Z+1	; 0x01
    3da6:	82 81       	ldd	r24, Z+2	; 0x02
    3da8:	93 81       	ldd	r25, Z+3	; 0x03
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 e2       	ldi	r20, 0x20	; 32
    3db0:	51 e4       	ldi	r21, 0x41	; 65
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	8e 01       	movw	r16, r28
    3dbc:	03 55       	subi	r16, 0x53	; 83
    3dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	f8 01       	movw	r30, r16
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24
    3dd2:	1f c0       	rjmp	.+62     	; 0x3e12 <main+0xb46>
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	e5 55       	subi	r30, 0x55	; 85
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	88 ec       	ldi	r24, 0xC8	; 200
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	91 83       	std	Z+1, r25	; 0x01
    3de0:	80 83       	st	Z, r24
    3de2:	fe 01       	movw	r30, r28
    3de4:	e5 55       	subi	r30, 0x55	; 85
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	80 81       	ld	r24, Z
    3dea:	91 81       	ldd	r25, Z+1	; 0x01
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <main+0xb20>
    3df0:	fe 01       	movw	r30, r28
    3df2:	e5 55       	subi	r30, 0x55	; 85
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	91 83       	std	Z+1, r25	; 0x01
    3df8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfa:	de 01       	movw	r26, r28
    3dfc:	a3 55       	subi	r26, 0x53	; 83
    3dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    3e00:	fe 01       	movw	r30, r28
    3e02:	e3 55       	subi	r30, 0x53	; 83
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	80 81       	ld	r24, Z
    3e08:	91 81       	ldd	r25, Z+1	; 0x01
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	11 96       	adiw	r26, 0x01	; 1
    3e0e:	9c 93       	st	X, r25
    3e10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e12:	fe 01       	movw	r30, r28
    3e14:	e3 55       	subi	r30, 0x53	; 83
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	00 97       	sbiw	r24, 0x00	; 0
    3e1e:	d1 f6       	brne	.-76     	; 0x3dd4 <main+0xb08>
    3e20:	27 c0       	rjmp	.+78     	; 0x3e70 <main+0xba4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e22:	8e 01       	movw	r16, r28
    3e24:	03 55       	subi	r16, 0x53	; 83
    3e26:	1f 4f       	sbci	r17, 0xFF	; 255
    3e28:	fe 01       	movw	r30, r28
    3e2a:	e1 55       	subi	r30, 0x51	; 81
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	60 81       	ld	r22, Z
    3e30:	71 81       	ldd	r23, Z+1	; 0x01
    3e32:	82 81       	ldd	r24, Z+2	; 0x02
    3e34:	93 81       	ldd	r25, Z+3	; 0x03
    3e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	f8 01       	movw	r30, r16
    3e40:	91 83       	std	Z+1, r25	; 0x01
    3e42:	80 83       	st	Z, r24
    3e44:	de 01       	movw	r26, r28
    3e46:	a7 55       	subi	r26, 0x57	; 87
    3e48:	bf 4f       	sbci	r27, 0xFF	; 255
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	e3 55       	subi	r30, 0x53	; 83
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	8d 93       	st	X+, r24
    3e56:	9c 93       	st	X, r25
    3e58:	fe 01       	movw	r30, r28
    3e5a:	e7 55       	subi	r30, 0x57	; 87
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	80 81       	ld	r24, Z
    3e60:	91 81       	ldd	r25, Z+1	; 0x01
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	f1 f7       	brne	.-4      	; 0x3e62 <main+0xb96>
    3e66:	fe 01       	movw	r30, r28
    3e68:	e7 55       	subi	r30, 0x57	; 87
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	91 83       	std	Z+1, r25	; 0x01
    3e6e:	80 83       	st	Z, r24
					_delay_ms(500);
					Gotoxy(0,1);
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	61 e0       	ldi	r22, 0x01	; 1
    3e74:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
					LCD_vidWriteString("1:Add items");
    3e78:	8b eb       	ldi	r24, 0xBB	; 187
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>


					Gotoxy(0,2);
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	62 e0       	ldi	r22, 0x02	; 2
    3e84:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
					LCD_vidWriteString("2:Cans No 3:OUT");
    3e88:	87 ec       	ldi	r24, 0xC7	; 199
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>


					key_pressed = NOT_PRESSED;
    3e90:	fe 01       	movw	r30, r28
    3e92:	e1 50       	subi	r30, 0x01	; 1
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	8f ef       	ldi	r24, 0xFF	; 255
    3e98:	80 83       	st	Z, r24
    3e9a:	06 c0       	rjmp	.+12     	; 0x3ea8 <main+0xbdc>

					while (key_pressed == NOT_PRESSED)
					{
						key_pressed = KPD_GetKey();
    3e9c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e1 50       	subi	r30, 0x01	; 1
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	80 83       	st	Z, r24
					LCD_vidWriteString("2:Cans No 3:OUT");


					key_pressed = NOT_PRESSED;

					while (key_pressed == NOT_PRESSED)
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e1 50       	subi	r30, 0x01	; 1
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	80 81       	ld	r24, Z
    3eb0:	8f 3f       	cpi	r24, 0xFF	; 255
    3eb2:	a1 f3       	breq	.-24     	; 0x3e9c <main+0xbd0>
					{
						key_pressed = KPD_GetKey();
					}
					LCD_vidSendCommand(lcd_Clear);
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

					switch(key_pressed)
    3eba:	fe 01       	movw	r30, r28
    3ebc:	e1 50       	subi	r30, 0x01	; 1
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 81       	ld	r24, Z
    3ec2:	28 2f       	mov	r18, r24
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	c6 5f       	subi	r28, 0xF6	; 246
    3ec8:	de 4f       	sbci	r29, 0xFE	; 254
    3eca:	39 83       	std	Y+1, r19	; 0x01
    3ecc:	28 83       	st	Y, r18
    3ece:	ca 50       	subi	r28, 0x0A	; 10
    3ed0:	d1 40       	sbci	r29, 0x01	; 1
    3ed2:	c6 5f       	subi	r28, 0xF6	; 246
    3ed4:	de 4f       	sbci	r29, 0xFE	; 254
    3ed6:	88 81       	ld	r24, Y
    3ed8:	99 81       	ldd	r25, Y+1	; 0x01
    3eda:	ca 50       	subi	r28, 0x0A	; 10
    3edc:	d1 40       	sbci	r29, 0x01	; 1
    3ede:	81 33       	cpi	r24, 0x31	; 49
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	59 f0       	breq	.+22     	; 0x3efa <main+0xc2e>
    3ee4:	c6 5f       	subi	r28, 0xF6	; 246
    3ee6:	de 4f       	sbci	r29, 0xFE	; 254
    3ee8:	e8 81       	ld	r30, Y
    3eea:	f9 81       	ldd	r31, Y+1	; 0x01
    3eec:	ca 50       	subi	r28, 0x0A	; 10
    3eee:	d1 40       	sbci	r29, 0x01	; 1
    3ef0:	e2 33       	cpi	r30, 0x32	; 50
    3ef2:	f1 05       	cpc	r31, r1
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <main+0xc2c>
    3ef6:	38 c3       	rjmp	.+1648   	; 0x4568 <main+0x129c>
    3ef8:	20 c4       	rjmp	.+2112   	; 0x473a <main+0x146e>


					//AFTER ADDING ITEMS THE ITEMS WILL BE UPDATED

					case '1':
						Gotoxy(0,1);
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	61 e0       	ldi	r22, 0x01	; 1
    3efe:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("item to add is: ");
    3f02:	87 ed       	ldi	r24, 0xD7	; 215
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
						Gotoxy(0,2);
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	62 e0       	ldi	r22, 0x02	; 2
    3f0e:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>

						LCD_vidWriteString("1:Spiro 2:Cola");
    3f12:	88 ee       	ldi	r24, 0xE8	; 232
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
						key_pressed = NOT_PRESSED;
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e1 50       	subi	r30, 0x01	; 1
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	8f ef       	ldi	r24, 0xFF	; 255
    3f22:	80 83       	st	Z, r24
    3f24:	06 c0       	rjmp	.+12     	; 0x3f32 <main+0xc66>

						while (key_pressed == NOT_PRESSED)
						{
							key_pressed = KPD_GetKey();
    3f26:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e1 50       	subi	r30, 0x01	; 1
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 83       	st	Z, r24
						Gotoxy(0,2);

						LCD_vidWriteString("1:Spiro 2:Cola");
						key_pressed = NOT_PRESSED;

						while (key_pressed == NOT_PRESSED)
    3f32:	fe 01       	movw	r30, r28
    3f34:	e1 50       	subi	r30, 0x01	; 1
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	80 81       	ld	r24, Z
    3f3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3f3c:	a1 f3       	breq	.-24     	; 0x3f26 <main+0xc5a>
						{
							key_pressed = KPD_GetKey();
						}
						if (key_pressed=='1')
    3f3e:	fe 01       	movw	r30, r28
    3f40:	e1 50       	subi	r30, 0x01	; 1
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	80 81       	ld	r24, Z
    3f46:	81 33       	cpi	r24, 0x31	; 49
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <main+0xc80>
    3f4a:	87 c1       	rjmp	.+782    	; 0x425a <main+0xf8e>
						{
							//update the spiro cans number in eeprom
							spiro++;
    3f4c:	de 01       	movw	r26, r28
    3f4e:	ad 5f       	subi	r26, 0xFD	; 253
    3f50:	be 4f       	sbci	r27, 0xFE	; 254
    3f52:	fe 01       	movw	r30, r28
    3f54:	ed 5f       	subi	r30, 0xFD	; 253
    3f56:	fe 4f       	sbci	r31, 0xFE	; 254
    3f58:	80 81       	ld	r24, Z
    3f5a:	8f 5f       	subi	r24, 0xFF	; 255
    3f5c:	8c 93       	st	X, r24
							EEPROM_vWrite(EEPROM_SPIRO_ADDRESS,spiro);
    3f5e:	fe 01       	movw	r30, r28
    3f60:	ed 5f       	subi	r30, 0xFD	; 253
    3f62:	fe 4f       	sbci	r31, 0xFE	; 254
    3f64:	8d ef       	ldi	r24, 0xFD	; 253
    3f66:	60 81       	ld	r22, Z
    3f68:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
							LCD_vidSendCommand(lcd_Clear);
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>


							//MOTOR WORK AS CAN IS OUT
							DCM_voidRotateCW();
    3f72:	0e 94 12 06 	call	0xc24	; 0xc24 <DCM_voidRotateCW>
    3f76:	fe 01       	movw	r30, r28
    3f78:	eb 55       	subi	r30, 0x5B	; 91
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	aa e7       	ldi	r26, 0x7A	; 122
    3f82:	b4 e4       	ldi	r27, 0x44	; 68
    3f84:	80 83       	st	Z, r24
    3f86:	91 83       	std	Z+1, r25	; 0x01
    3f88:	a2 83       	std	Z+2, r26	; 0x02
    3f8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f8c:	8e 01       	movw	r16, r28
    3f8e:	0f 55       	subi	r16, 0x5F	; 95
    3f90:	1f 4f       	sbci	r17, 0xFF	; 255
    3f92:	fe 01       	movw	r30, r28
    3f94:	eb 55       	subi	r30, 0x5B	; 91
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	60 81       	ld	r22, Z
    3f9a:	71 81       	ldd	r23, Z+1	; 0x01
    3f9c:	82 81       	ldd	r24, Z+2	; 0x02
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	4a ef       	ldi	r20, 0xFA	; 250
    3fa6:	54 e4       	ldi	r21, 0x44	; 68
    3fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	f8 01       	movw	r30, r16
    3fb2:	80 83       	st	Z, r24
    3fb4:	91 83       	std	Z+1, r25	; 0x01
    3fb6:	a2 83       	std	Z+2, r26	; 0x02
    3fb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fba:	fe 01       	movw	r30, r28
    3fbc:	ef 55       	subi	r30, 0x5F	; 95
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	60 81       	ld	r22, Z
    3fc2:	71 81       	ldd	r23, Z+1	; 0x01
    3fc4:	82 81       	ldd	r24, Z+2	; 0x02
    3fc6:	93 81       	ldd	r25, Z+3	; 0x03
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	40 e8       	ldi	r20, 0x80	; 128
    3fce:	5f e3       	ldi	r21, 0x3F	; 63
    3fd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fd4:	88 23       	and	r24, r24
    3fd6:	44 f4       	brge	.+16     	; 0x3fe8 <main+0xd1c>
		__ticks = 1;
    3fd8:	fe 01       	movw	r30, r28
    3fda:	e1 56       	subi	r30, 0x61	; 97
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	80 83       	st	Z, r24
    3fe6:	64 c0       	rjmp	.+200    	; 0x40b0 <main+0xde4>
	else if (__tmp > 65535)
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ef 55       	subi	r30, 0x5F	; 95
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	60 81       	ld	r22, Z
    3ff0:	71 81       	ldd	r23, Z+1	; 0x01
    3ff2:	82 81       	ldd	r24, Z+2	; 0x02
    3ff4:	93 81       	ldd	r25, Z+3	; 0x03
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	3f ef       	ldi	r19, 0xFF	; 255
    3ffa:	4f e7       	ldi	r20, 0x7F	; 127
    3ffc:	57 e4       	ldi	r21, 0x47	; 71
    3ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4002:	18 16       	cp	r1, r24
    4004:	0c f0       	brlt	.+2      	; 0x4008 <main+0xd3c>
    4006:	43 c0       	rjmp	.+134    	; 0x408e <main+0xdc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4008:	fe 01       	movw	r30, r28
    400a:	eb 55       	subi	r30, 0x5B	; 91
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	60 81       	ld	r22, Z
    4010:	71 81       	ldd	r23, Z+1	; 0x01
    4012:	82 81       	ldd	r24, Z+2	; 0x02
    4014:	93 81       	ldd	r25, Z+3	; 0x03
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	40 e2       	ldi	r20, 0x20	; 32
    401c:	51 e4       	ldi	r21, 0x41	; 65
    401e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	8e 01       	movw	r16, r28
    4028:	01 56       	subi	r16, 0x61	; 97
    402a:	1f 4f       	sbci	r17, 0xFF	; 255
    402c:	bc 01       	movw	r22, r24
    402e:	cd 01       	movw	r24, r26
    4030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	f8 01       	movw	r30, r16
    403a:	91 83       	std	Z+1, r25	; 0x01
    403c:	80 83       	st	Z, r24
    403e:	1f c0       	rjmp	.+62     	; 0x407e <main+0xdb2>
    4040:	fe 01       	movw	r30, r28
    4042:	e3 56       	subi	r30, 0x63	; 99
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	88 ec       	ldi	r24, 0xC8	; 200
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	91 83       	std	Z+1, r25	; 0x01
    404c:	80 83       	st	Z, r24
    404e:	fe 01       	movw	r30, r28
    4050:	e3 56       	subi	r30, 0x63	; 99
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	80 81       	ld	r24, Z
    4056:	91 81       	ldd	r25, Z+1	; 0x01
    4058:	01 97       	sbiw	r24, 0x01	; 1
    405a:	f1 f7       	brne	.-4      	; 0x4058 <main+0xd8c>
    405c:	fe 01       	movw	r30, r28
    405e:	e3 56       	subi	r30, 0x63	; 99
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4066:	de 01       	movw	r26, r28
    4068:	a1 56       	subi	r26, 0x61	; 97
    406a:	bf 4f       	sbci	r27, 0xFF	; 255
    406c:	fe 01       	movw	r30, r28
    406e:	e1 56       	subi	r30, 0x61	; 97
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	91 81       	ldd	r25, Z+1	; 0x01
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	11 96       	adiw	r26, 0x01	; 1
    407a:	9c 93       	st	X, r25
    407c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407e:	fe 01       	movw	r30, r28
    4080:	e1 56       	subi	r30, 0x61	; 97
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	80 81       	ld	r24, Z
    4086:	91 81       	ldd	r25, Z+1	; 0x01
    4088:	00 97       	sbiw	r24, 0x00	; 0
    408a:	d1 f6       	brne	.-76     	; 0x4040 <main+0xd74>
    408c:	27 c0       	rjmp	.+78     	; 0x40dc <main+0xe10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    408e:	8e 01       	movw	r16, r28
    4090:	01 56       	subi	r16, 0x61	; 97
    4092:	1f 4f       	sbci	r17, 0xFF	; 255
    4094:	fe 01       	movw	r30, r28
    4096:	ef 55       	subi	r30, 0x5F	; 95
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	60 81       	ld	r22, Z
    409c:	71 81       	ldd	r23, Z+1	; 0x01
    409e:	82 81       	ldd	r24, Z+2	; 0x02
    40a0:	93 81       	ldd	r25, Z+3	; 0x03
    40a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	f8 01       	movw	r30, r16
    40ac:	91 83       	std	Z+1, r25	; 0x01
    40ae:	80 83       	st	Z, r24
    40b0:	de 01       	movw	r26, r28
    40b2:	a5 56       	subi	r26, 0x65	; 101
    40b4:	bf 4f       	sbci	r27, 0xFF	; 255
    40b6:	fe 01       	movw	r30, r28
    40b8:	e1 56       	subi	r30, 0x61	; 97
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	80 81       	ld	r24, Z
    40be:	91 81       	ldd	r25, Z+1	; 0x01
    40c0:	8d 93       	st	X+, r24
    40c2:	9c 93       	st	X, r25
    40c4:	fe 01       	movw	r30, r28
    40c6:	e5 56       	subi	r30, 0x65	; 101
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	f1 f7       	brne	.-4      	; 0x40ce <main+0xe02>
    40d2:	fe 01       	movw	r30, r28
    40d4:	e5 56       	subi	r30, 0x65	; 101
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	91 83       	std	Z+1, r25	; 0x01
    40da:	80 83       	st	Z, r24
							_delay_ms(1000);
							DCM_voidStop();
    40dc:	0e 94 34 06 	call	0xc68	; 0xc68 <DCM_voidStop>

							Gotoxy(0,1);
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	61 e0       	ldi	r22, 0x01	; 1
    40e4:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
							LCD_vidWriteString("Item is Added");
    40e8:	87 ef       	ldi	r24, 0xF7	; 247
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    40f0:	fe 01       	movw	r30, r28
    40f2:	e9 56       	subi	r30, 0x69	; 105
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	aa ef       	ldi	r26, 0xFA	; 250
    40fc:	b3 e4       	ldi	r27, 0x43	; 67
    40fe:	80 83       	st	Z, r24
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	a2 83       	std	Z+2, r26	; 0x02
    4104:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4106:	8e 01       	movw	r16, r28
    4108:	0d 56       	subi	r16, 0x6D	; 109
    410a:	1f 4f       	sbci	r17, 0xFF	; 255
    410c:	fe 01       	movw	r30, r28
    410e:	e9 56       	subi	r30, 0x69	; 105
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	60 81       	ld	r22, Z
    4114:	71 81       	ldd	r23, Z+1	; 0x01
    4116:	82 81       	ldd	r24, Z+2	; 0x02
    4118:	93 81       	ldd	r25, Z+3	; 0x03
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	4a ef       	ldi	r20, 0xFA	; 250
    4120:	54 e4       	ldi	r21, 0x44	; 68
    4122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	f8 01       	movw	r30, r16
    412c:	80 83       	st	Z, r24
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	a2 83       	std	Z+2, r26	; 0x02
    4132:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4134:	fe 01       	movw	r30, r28
    4136:	ed 56       	subi	r30, 0x6D	; 109
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	60 81       	ld	r22, Z
    413c:	71 81       	ldd	r23, Z+1	; 0x01
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	93 81       	ldd	r25, Z+3	; 0x03
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	40 e8       	ldi	r20, 0x80	; 128
    4148:	5f e3       	ldi	r21, 0x3F	; 63
    414a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    414e:	88 23       	and	r24, r24
    4150:	44 f4       	brge	.+16     	; 0x4162 <main+0xe96>
		__ticks = 1;
    4152:	fe 01       	movw	r30, r28
    4154:	ef 56       	subi	r30, 0x6F	; 111
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	80 83       	st	Z, r24
    4160:	64 c0       	rjmp	.+200    	; 0x422a <main+0xf5e>
	else if (__tmp > 65535)
    4162:	fe 01       	movw	r30, r28
    4164:	ed 56       	subi	r30, 0x6D	; 109
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	0c f0       	brlt	.+2      	; 0x4182 <main+0xeb6>
    4180:	43 c0       	rjmp	.+134    	; 0x4208 <main+0xf3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4182:	fe 01       	movw	r30, r28
    4184:	e9 56       	subi	r30, 0x69	; 105
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	60 81       	ld	r22, Z
    418a:	71 81       	ldd	r23, Z+1	; 0x01
    418c:	82 81       	ldd	r24, Z+2	; 0x02
    418e:	93 81       	ldd	r25, Z+3	; 0x03
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	40 e2       	ldi	r20, 0x20	; 32
    4196:	51 e4       	ldi	r21, 0x41	; 65
    4198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	8e 01       	movw	r16, r28
    41a2:	0f 56       	subi	r16, 0x6F	; 111
    41a4:	1f 4f       	sbci	r17, 0xFF	; 255
    41a6:	bc 01       	movw	r22, r24
    41a8:	cd 01       	movw	r24, r26
    41aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	f8 01       	movw	r30, r16
    41b4:	91 83       	std	Z+1, r25	; 0x01
    41b6:	80 83       	st	Z, r24
    41b8:	1f c0       	rjmp	.+62     	; 0x41f8 <main+0xf2c>
    41ba:	fe 01       	movw	r30, r28
    41bc:	e1 57       	subi	r30, 0x71	; 113
    41be:	ff 4f       	sbci	r31, 0xFF	; 255
    41c0:	88 ec       	ldi	r24, 0xC8	; 200
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	80 83       	st	Z, r24
    41c8:	fe 01       	movw	r30, r28
    41ca:	e1 57       	subi	r30, 0x71	; 113
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	91 81       	ldd	r25, Z+1	; 0x01
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	f1 f7       	brne	.-4      	; 0x41d2 <main+0xf06>
    41d6:	fe 01       	movw	r30, r28
    41d8:	e1 57       	subi	r30, 0x71	; 113
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	91 83       	std	Z+1, r25	; 0x01
    41de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e0:	de 01       	movw	r26, r28
    41e2:	af 56       	subi	r26, 0x6F	; 111
    41e4:	bf 4f       	sbci	r27, 0xFF	; 255
    41e6:	fe 01       	movw	r30, r28
    41e8:	ef 56       	subi	r30, 0x6F	; 111
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 81       	ld	r24, Z
    41ee:	91 81       	ldd	r25, Z+1	; 0x01
    41f0:	01 97       	sbiw	r24, 0x01	; 1
    41f2:	11 96       	adiw	r26, 0x01	; 1
    41f4:	9c 93       	st	X, r25
    41f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f8:	fe 01       	movw	r30, r28
    41fa:	ef 56       	subi	r30, 0x6F	; 111
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	80 81       	ld	r24, Z
    4200:	91 81       	ldd	r25, Z+1	; 0x01
    4202:	00 97       	sbiw	r24, 0x00	; 0
    4204:	d1 f6       	brne	.-76     	; 0x41ba <main+0xeee>
    4206:	99 c2       	rjmp	.+1330   	; 0x473a <main+0x146e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4208:	8e 01       	movw	r16, r28
    420a:	0f 56       	subi	r16, 0x6F	; 111
    420c:	1f 4f       	sbci	r17, 0xFF	; 255
    420e:	fe 01       	movw	r30, r28
    4210:	ed 56       	subi	r30, 0x6D	; 109
    4212:	ff 4f       	sbci	r31, 0xFF	; 255
    4214:	60 81       	ld	r22, Z
    4216:	71 81       	ldd	r23, Z+1	; 0x01
    4218:	82 81       	ldd	r24, Z+2	; 0x02
    421a:	93 81       	ldd	r25, Z+3	; 0x03
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	f8 01       	movw	r30, r16
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	80 83       	st	Z, r24
    422a:	de 01       	movw	r26, r28
    422c:	a3 57       	subi	r26, 0x73	; 115
    422e:	bf 4f       	sbci	r27, 0xFF	; 255
    4230:	fe 01       	movw	r30, r28
    4232:	ef 56       	subi	r30, 0x6F	; 111
    4234:	ff 4f       	sbci	r31, 0xFF	; 255
    4236:	80 81       	ld	r24, Z
    4238:	91 81       	ldd	r25, Z+1	; 0x01
    423a:	11 96       	adiw	r26, 0x01	; 1
    423c:	9c 93       	st	X, r25
    423e:	8e 93       	st	-X, r24
    4240:	fe 01       	movw	r30, r28
    4242:	e3 57       	subi	r30, 0x73	; 115
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 81       	ld	r24, Z
    4248:	91 81       	ldd	r25, Z+1	; 0x01
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <main+0xf7e>
    424e:	fe 01       	movw	r30, r28
    4250:	e3 57       	subi	r30, 0x73	; 115
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	80 83       	st	Z, r24
    4258:	70 c2       	rjmp	.+1248   	; 0x473a <main+0x146e>

						}
						else{


							LCD_vidSendCommand(lcd_Clear);
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
							//UPDATE THE COLA NUMBER IN EEPROM
							Bigcola++;
    4260:	de 01       	movw	r26, r28
    4262:	ae 5f       	subi	r26, 0xFE	; 254
    4264:	be 4f       	sbci	r27, 0xFE	; 254
    4266:	fe 01       	movw	r30, r28
    4268:	ee 5f       	subi	r30, 0xFE	; 254
    426a:	fe 4f       	sbci	r31, 0xFE	; 254
    426c:	80 81       	ld	r24, Z
    426e:	8f 5f       	subi	r24, 0xFF	; 255
    4270:	8c 93       	st	X, r24
							EEPROM_vWrite(EEPROM_COLA_ADDRESS,Bigcola);
    4272:	fe 01       	movw	r30, r28
    4274:	ee 5f       	subi	r30, 0xFE	; 254
    4276:	fe 4f       	sbci	r31, 0xFE	; 254
    4278:	81 ef       	ldi	r24, 0xF1	; 241
    427a:	60 81       	ld	r22, Z
    427c:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
							//MOTOR WORK AS CAN IS OUT
							DCM_voidRotateCW();
    4280:	0e 94 12 06 	call	0xc24	; 0xc24 <DCM_voidRotateCW>
    4284:	fe 01       	movw	r30, r28
    4286:	e7 57       	subi	r30, 0x77	; 119
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	aa ef       	ldi	r26, 0xFA	; 250
    4290:	b4 e4       	ldi	r27, 0x44	; 68
    4292:	80 83       	st	Z, r24
    4294:	91 83       	std	Z+1, r25	; 0x01
    4296:	a2 83       	std	Z+2, r26	; 0x02
    4298:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429a:	8e 01       	movw	r16, r28
    429c:	0b 57       	subi	r16, 0x7B	; 123
    429e:	1f 4f       	sbci	r17, 0xFF	; 255
    42a0:	fe 01       	movw	r30, r28
    42a2:	e7 57       	subi	r30, 0x77	; 119
    42a4:	ff 4f       	sbci	r31, 0xFF	; 255
    42a6:	60 81       	ld	r22, Z
    42a8:	71 81       	ldd	r23, Z+1	; 0x01
    42aa:	82 81       	ldd	r24, Z+2	; 0x02
    42ac:	93 81       	ldd	r25, Z+3	; 0x03
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	4a ef       	ldi	r20, 0xFA	; 250
    42b4:	54 e4       	ldi	r21, 0x44	; 68
    42b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	f8 01       	movw	r30, r16
    42c0:	80 83       	st	Z, r24
    42c2:	91 83       	std	Z+1, r25	; 0x01
    42c4:	a2 83       	std	Z+2, r26	; 0x02
    42c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42c8:	fe 01       	movw	r30, r28
    42ca:	eb 57       	subi	r30, 0x7B	; 123
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	60 81       	ld	r22, Z
    42d0:	71 81       	ldd	r23, Z+1	; 0x01
    42d2:	82 81       	ldd	r24, Z+2	; 0x02
    42d4:	93 81       	ldd	r25, Z+3	; 0x03
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	40 e8       	ldi	r20, 0x80	; 128
    42dc:	5f e3       	ldi	r21, 0x3F	; 63
    42de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42e2:	88 23       	and	r24, r24
    42e4:	44 f4       	brge	.+16     	; 0x42f6 <main+0x102a>
		__ticks = 1;
    42e6:	fe 01       	movw	r30, r28
    42e8:	ed 57       	subi	r30, 0x7D	; 125
    42ea:	ff 4f       	sbci	r31, 0xFF	; 255
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	91 83       	std	Z+1, r25	; 0x01
    42f2:	80 83       	st	Z, r24
    42f4:	64 c0       	rjmp	.+200    	; 0x43be <main+0x10f2>
	else if (__tmp > 65535)
    42f6:	fe 01       	movw	r30, r28
    42f8:	eb 57       	subi	r30, 0x7B	; 123
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	3f ef       	ldi	r19, 0xFF	; 255
    4308:	4f e7       	ldi	r20, 0x7F	; 127
    430a:	57 e4       	ldi	r21, 0x47	; 71
    430c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4310:	18 16       	cp	r1, r24
    4312:	0c f0       	brlt	.+2      	; 0x4316 <main+0x104a>
    4314:	43 c0       	rjmp	.+134    	; 0x439c <main+0x10d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4316:	fe 01       	movw	r30, r28
    4318:	e7 57       	subi	r30, 0x77	; 119
    431a:	ff 4f       	sbci	r31, 0xFF	; 255
    431c:	60 81       	ld	r22, Z
    431e:	71 81       	ldd	r23, Z+1	; 0x01
    4320:	82 81       	ldd	r24, Z+2	; 0x02
    4322:	93 81       	ldd	r25, Z+3	; 0x03
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 e2       	ldi	r20, 0x20	; 32
    432a:	51 e4       	ldi	r21, 0x41	; 65
    432c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	8e 01       	movw	r16, r28
    4336:	0d 57       	subi	r16, 0x7D	; 125
    4338:	1f 4f       	sbci	r17, 0xFF	; 255
    433a:	bc 01       	movw	r22, r24
    433c:	cd 01       	movw	r24, r26
    433e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	f8 01       	movw	r30, r16
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	80 83       	st	Z, r24
    434c:	1f c0       	rjmp	.+62     	; 0x438c <main+0x10c0>
    434e:	fe 01       	movw	r30, r28
    4350:	ef 57       	subi	r30, 0x7F	; 127
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	88 ec       	ldi	r24, 0xC8	; 200
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	91 83       	std	Z+1, r25	; 0x01
    435a:	80 83       	st	Z, r24
    435c:	fe 01       	movw	r30, r28
    435e:	ef 57       	subi	r30, 0x7F	; 127
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <main+0x109a>
    436a:	fe 01       	movw	r30, r28
    436c:	ef 57       	subi	r30, 0x7F	; 127
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	91 83       	std	Z+1, r25	; 0x01
    4372:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4374:	de 01       	movw	r26, r28
    4376:	ad 57       	subi	r26, 0x7D	; 125
    4378:	bf 4f       	sbci	r27, 0xFF	; 255
    437a:	fe 01       	movw	r30, r28
    437c:	ed 57       	subi	r30, 0x7D	; 125
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	80 81       	ld	r24, Z
    4382:	91 81       	ldd	r25, Z+1	; 0x01
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	11 96       	adiw	r26, 0x01	; 1
    4388:	9c 93       	st	X, r25
    438a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    438c:	fe 01       	movw	r30, r28
    438e:	ed 57       	subi	r30, 0x7D	; 125
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	80 81       	ld	r24, Z
    4394:	91 81       	ldd	r25, Z+1	; 0x01
    4396:	00 97       	sbiw	r24, 0x00	; 0
    4398:	d1 f6       	brne	.-76     	; 0x434e <main+0x1082>
    439a:	27 c0       	rjmp	.+78     	; 0x43ea <main+0x111e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    439c:	8e 01       	movw	r16, r28
    439e:	0d 57       	subi	r16, 0x7D	; 125
    43a0:	1f 4f       	sbci	r17, 0xFF	; 255
    43a2:	fe 01       	movw	r30, r28
    43a4:	eb 57       	subi	r30, 0x7B	; 123
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	60 81       	ld	r22, Z
    43aa:	71 81       	ldd	r23, Z+1	; 0x01
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	f8 01       	movw	r30, r16
    43ba:	91 83       	std	Z+1, r25	; 0x01
    43bc:	80 83       	st	Z, r24
    43be:	de 01       	movw	r26, r28
    43c0:	a1 58       	subi	r26, 0x81	; 129
    43c2:	bf 4f       	sbci	r27, 0xFF	; 255
    43c4:	fe 01       	movw	r30, r28
    43c6:	ed 57       	subi	r30, 0x7D	; 125
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	80 81       	ld	r24, Z
    43cc:	91 81       	ldd	r25, Z+1	; 0x01
    43ce:	8d 93       	st	X+, r24
    43d0:	9c 93       	st	X, r25
    43d2:	fe 01       	movw	r30, r28
    43d4:	e1 58       	subi	r30, 0x81	; 129
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	80 81       	ld	r24, Z
    43da:	91 81       	ldd	r25, Z+1	; 0x01
    43dc:	01 97       	sbiw	r24, 0x01	; 1
    43de:	f1 f7       	brne	.-4      	; 0x43dc <main+0x1110>
    43e0:	fe 01       	movw	r30, r28
    43e2:	e1 58       	subi	r30, 0x81	; 129
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	91 83       	std	Z+1, r25	; 0x01
    43e8:	80 83       	st	Z, r24
							_delay_ms(2000);
							DCM_voidStop();
    43ea:	0e 94 34 06 	call	0xc68	; 0xc68 <DCM_voidStop>

							Gotoxy(0,1);
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	61 e0       	ldi	r22, 0x01	; 1
    43f2:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>

							LCD_vidWriteString("Item is Added");
    43f6:	87 ef       	ldi	r24, 0xF7	; 247
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    43fe:	fe 01       	movw	r30, r28
    4400:	e5 58       	subi	r30, 0x85	; 133
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	aa ef       	ldi	r26, 0xFA	; 250
    440a:	b3 e4       	ldi	r27, 0x43	; 67
    440c:	80 83       	st	Z, r24
    440e:	91 83       	std	Z+1, r25	; 0x01
    4410:	a2 83       	std	Z+2, r26	; 0x02
    4412:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4414:	8e 01       	movw	r16, r28
    4416:	09 58       	subi	r16, 0x89	; 137
    4418:	1f 4f       	sbci	r17, 0xFF	; 255
    441a:	fe 01       	movw	r30, r28
    441c:	e5 58       	subi	r30, 0x85	; 133
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	60 81       	ld	r22, Z
    4422:	71 81       	ldd	r23, Z+1	; 0x01
    4424:	82 81       	ldd	r24, Z+2	; 0x02
    4426:	93 81       	ldd	r25, Z+3	; 0x03
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	4a ef       	ldi	r20, 0xFA	; 250
    442e:	54 e4       	ldi	r21, 0x44	; 68
    4430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4434:	dc 01       	movw	r26, r24
    4436:	cb 01       	movw	r24, r22
    4438:	f8 01       	movw	r30, r16
    443a:	80 83       	st	Z, r24
    443c:	91 83       	std	Z+1, r25	; 0x01
    443e:	a2 83       	std	Z+2, r26	; 0x02
    4440:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4442:	fe 01       	movw	r30, r28
    4444:	e9 58       	subi	r30, 0x89	; 137
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	60 81       	ld	r22, Z
    444a:	71 81       	ldd	r23, Z+1	; 0x01
    444c:	82 81       	ldd	r24, Z+2	; 0x02
    444e:	93 81       	ldd	r25, Z+3	; 0x03
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e8       	ldi	r20, 0x80	; 128
    4456:	5f e3       	ldi	r21, 0x3F	; 63
    4458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    445c:	88 23       	and	r24, r24
    445e:	44 f4       	brge	.+16     	; 0x4470 <main+0x11a4>
		__ticks = 1;
    4460:	fe 01       	movw	r30, r28
    4462:	eb 58       	subi	r30, 0x8B	; 139
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	91 83       	std	Z+1, r25	; 0x01
    446c:	80 83       	st	Z, r24
    446e:	64 c0       	rjmp	.+200    	; 0x4538 <main+0x126c>
	else if (__tmp > 65535)
    4470:	fe 01       	movw	r30, r28
    4472:	e9 58       	subi	r30, 0x89	; 137
    4474:	ff 4f       	sbci	r31, 0xFF	; 255
    4476:	60 81       	ld	r22, Z
    4478:	71 81       	ldd	r23, Z+1	; 0x01
    447a:	82 81       	ldd	r24, Z+2	; 0x02
    447c:	93 81       	ldd	r25, Z+3	; 0x03
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	3f ef       	ldi	r19, 0xFF	; 255
    4482:	4f e7       	ldi	r20, 0x7F	; 127
    4484:	57 e4       	ldi	r21, 0x47	; 71
    4486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    448a:	18 16       	cp	r1, r24
    448c:	0c f0       	brlt	.+2      	; 0x4490 <main+0x11c4>
    448e:	43 c0       	rjmp	.+134    	; 0x4516 <main+0x124a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4490:	fe 01       	movw	r30, r28
    4492:	e5 58       	subi	r30, 0x85	; 133
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	60 81       	ld	r22, Z
    4498:	71 81       	ldd	r23, Z+1	; 0x01
    449a:	82 81       	ldd	r24, Z+2	; 0x02
    449c:	93 81       	ldd	r25, Z+3	; 0x03
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	40 e2       	ldi	r20, 0x20	; 32
    44a4:	51 e4       	ldi	r21, 0x41	; 65
    44a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	8e 01       	movw	r16, r28
    44b0:	0b 58       	subi	r16, 0x8B	; 139
    44b2:	1f 4f       	sbci	r17, 0xFF	; 255
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	f8 01       	movw	r30, r16
    44c2:	91 83       	std	Z+1, r25	; 0x01
    44c4:	80 83       	st	Z, r24
    44c6:	1f c0       	rjmp	.+62     	; 0x4506 <main+0x123a>
    44c8:	fe 01       	movw	r30, r28
    44ca:	ed 58       	subi	r30, 0x8D	; 141
    44cc:	ff 4f       	sbci	r31, 0xFF	; 255
    44ce:	88 ec       	ldi	r24, 0xC8	; 200
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	91 83       	std	Z+1, r25	; 0x01
    44d4:	80 83       	st	Z, r24
    44d6:	fe 01       	movw	r30, r28
    44d8:	ed 58       	subi	r30, 0x8D	; 141
    44da:	ff 4f       	sbci	r31, 0xFF	; 255
    44dc:	80 81       	ld	r24, Z
    44de:	91 81       	ldd	r25, Z+1	; 0x01
    44e0:	01 97       	sbiw	r24, 0x01	; 1
    44e2:	f1 f7       	brne	.-4      	; 0x44e0 <main+0x1214>
    44e4:	fe 01       	movw	r30, r28
    44e6:	ed 58       	subi	r30, 0x8D	; 141
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	91 83       	std	Z+1, r25	; 0x01
    44ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ee:	de 01       	movw	r26, r28
    44f0:	ab 58       	subi	r26, 0x8B	; 139
    44f2:	bf 4f       	sbci	r27, 0xFF	; 255
    44f4:	fe 01       	movw	r30, r28
    44f6:	eb 58       	subi	r30, 0x8B	; 139
    44f8:	ff 4f       	sbci	r31, 0xFF	; 255
    44fa:	80 81       	ld	r24, Z
    44fc:	91 81       	ldd	r25, Z+1	; 0x01
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	11 96       	adiw	r26, 0x01	; 1
    4502:	9c 93       	st	X, r25
    4504:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4506:	fe 01       	movw	r30, r28
    4508:	eb 58       	subi	r30, 0x8B	; 139
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	80 81       	ld	r24, Z
    450e:	91 81       	ldd	r25, Z+1	; 0x01
    4510:	00 97       	sbiw	r24, 0x00	; 0
    4512:	d1 f6       	brne	.-76     	; 0x44c8 <main+0x11fc>
    4514:	12 c1       	rjmp	.+548    	; 0x473a <main+0x146e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4516:	8e 01       	movw	r16, r28
    4518:	0b 58       	subi	r16, 0x8B	; 139
    451a:	1f 4f       	sbci	r17, 0xFF	; 255
    451c:	fe 01       	movw	r30, r28
    451e:	e9 58       	subi	r30, 0x89	; 137
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	60 81       	ld	r22, Z
    4524:	71 81       	ldd	r23, Z+1	; 0x01
    4526:	82 81       	ldd	r24, Z+2	; 0x02
    4528:	93 81       	ldd	r25, Z+3	; 0x03
    452a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	f8 01       	movw	r30, r16
    4534:	91 83       	std	Z+1, r25	; 0x01
    4536:	80 83       	st	Z, r24
    4538:	de 01       	movw	r26, r28
    453a:	af 58       	subi	r26, 0x8F	; 143
    453c:	bf 4f       	sbci	r27, 0xFF	; 255
    453e:	fe 01       	movw	r30, r28
    4540:	eb 58       	subi	r30, 0x8B	; 139
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	80 81       	ld	r24, Z
    4546:	91 81       	ldd	r25, Z+1	; 0x01
    4548:	11 96       	adiw	r26, 0x01	; 1
    454a:	9c 93       	st	X, r25
    454c:	8e 93       	st	-X, r24
    454e:	fe 01       	movw	r30, r28
    4550:	ef 58       	subi	r30, 0x8F	; 143
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	80 81       	ld	r24, Z
    4556:	91 81       	ldd	r25, Z+1	; 0x01
    4558:	01 97       	sbiw	r24, 0x01	; 1
    455a:	f1 f7       	brne	.-4      	; 0x4558 <main+0x128c>
    455c:	fe 01       	movw	r30, r28
    455e:	ef 58       	subi	r30, 0x8F	; 143
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	91 83       	std	Z+1, r25	; 0x01
    4564:	80 83       	st	Z, r24
    4566:	e9 c0       	rjmp	.+466    	; 0x473a <main+0x146e>


						break;
					case '2':

						LCD_vidSendCommand(lcd_Clear);
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
						Gotoxy(0,1);
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	61 e0       	ldi	r22, 0x01	; 1
    4572:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("Spiro : ");
    4576:	85 e0       	ldi	r24, 0x05	; 5
    4578:	91 e0       	ldi	r25, 0x01	; 1
    457a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

						//VARIABLES TO PUT THE NUM OF CANS TO SHOW IT ON LCD
						u8 spiro_num=0;
    457e:	fe 01       	movw	r30, r28
    4580:	e8 5f       	subi	r30, 0xF8	; 248
    4582:	fe 4f       	sbci	r31, 0xFE	; 254
    4584:	10 82       	st	Z, r1
						u8 cola_num=0;
    4586:	fe 01       	movw	r30, r28
    4588:	e7 5f       	subi	r30, 0xF7	; 247
    458a:	fe 4f       	sbci	r31, 0xFE	; 254
    458c:	10 82       	st	Z, r1
						EEPROM_vRead(EEPROM_SPIRO_ADDRESS,&spiro_num);
    458e:	9e 01       	movw	r18, r28
    4590:	28 5f       	subi	r18, 0xF8	; 248
    4592:	3e 4f       	sbci	r19, 0xFE	; 254
    4594:	8d ef       	ldi	r24, 0xFD	; 253
    4596:	b9 01       	movw	r22, r18
    4598:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>
						EEPROM_vRead(EEPROM_COLA_ADDRESS,&cola_num);
    459c:	9e 01       	movw	r18, r28
    459e:	27 5f       	subi	r18, 0xF7	; 247
    45a0:	3e 4f       	sbci	r19, 0xFE	; 254
    45a2:	81 ef       	ldi	r24, 0xF1	; 241
    45a4:	b9 01       	movw	r22, r18
    45a6:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>

						LCD_writeNum_u8(spiro_num);
    45aa:	fe 01       	movw	r30, r28
    45ac:	e8 5f       	subi	r30, 0xF8	; 248
    45ae:	fe 4f       	sbci	r31, 0xFE	; 254
    45b0:	80 81       	ld	r24, Z
    45b2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_writeNum_u8>
						Gotoxy(0,2);
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	62 e0       	ldi	r22, 0x02	; 2
    45ba:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("Big-Cola: ");
    45be:	8e e0       	ldi	r24, 0x0E	; 14
    45c0:	91 e0       	ldi	r25, 0x01	; 1
    45c2:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

						LCD_writeNum_u8(cola_num);
    45c6:	fe 01       	movw	r30, r28
    45c8:	e7 5f       	subi	r30, 0xF7	; 247
    45ca:	fe 4f       	sbci	r31, 0xFE	; 254
    45cc:	80 81       	ld	r24, Z
    45ce:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_writeNum_u8>
    45d2:	fe 01       	movw	r30, r28
    45d4:	e3 59       	subi	r30, 0x93	; 147
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	80 e0       	ldi	r24, 0x00	; 0
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	aa ef       	ldi	r26, 0xFA	; 250
    45de:	b4 e4       	ldi	r27, 0x44	; 68
    45e0:	80 83       	st	Z, r24
    45e2:	91 83       	std	Z+1, r25	; 0x01
    45e4:	a2 83       	std	Z+2, r26	; 0x02
    45e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45e8:	8e 01       	movw	r16, r28
    45ea:	07 59       	subi	r16, 0x97	; 151
    45ec:	1f 4f       	sbci	r17, 0xFF	; 255
    45ee:	fe 01       	movw	r30, r28
    45f0:	e3 59       	subi	r30, 0x93	; 147
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	60 81       	ld	r22, Z
    45f6:	71 81       	ldd	r23, Z+1	; 0x01
    45f8:	82 81       	ldd	r24, Z+2	; 0x02
    45fa:	93 81       	ldd	r25, Z+3	; 0x03
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	4a ef       	ldi	r20, 0xFA	; 250
    4602:	54 e4       	ldi	r21, 0x44	; 68
    4604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4608:	dc 01       	movw	r26, r24
    460a:	cb 01       	movw	r24, r22
    460c:	f8 01       	movw	r30, r16
    460e:	80 83       	st	Z, r24
    4610:	91 83       	std	Z+1, r25	; 0x01
    4612:	a2 83       	std	Z+2, r26	; 0x02
    4614:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4616:	fe 01       	movw	r30, r28
    4618:	e7 59       	subi	r30, 0x97	; 151
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e8       	ldi	r20, 0x80	; 128
    462a:	5f e3       	ldi	r21, 0x3F	; 63
    462c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4630:	88 23       	and	r24, r24
    4632:	44 f4       	brge	.+16     	; 0x4644 <main+0x1378>
		__ticks = 1;
    4634:	fe 01       	movw	r30, r28
    4636:	e9 59       	subi	r30, 0x99	; 153
    4638:	ff 4f       	sbci	r31, 0xFF	; 255
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	80 83       	st	Z, r24
    4642:	64 c0       	rjmp	.+200    	; 0x470c <main+0x1440>
	else if (__tmp > 65535)
    4644:	fe 01       	movw	r30, r28
    4646:	e7 59       	subi	r30, 0x97	; 151
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	60 81       	ld	r22, Z
    464c:	71 81       	ldd	r23, Z+1	; 0x01
    464e:	82 81       	ldd	r24, Z+2	; 0x02
    4650:	93 81       	ldd	r25, Z+3	; 0x03
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	3f ef       	ldi	r19, 0xFF	; 255
    4656:	4f e7       	ldi	r20, 0x7F	; 127
    4658:	57 e4       	ldi	r21, 0x47	; 71
    465a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    465e:	18 16       	cp	r1, r24
    4660:	0c f0       	brlt	.+2      	; 0x4664 <main+0x1398>
    4662:	43 c0       	rjmp	.+134    	; 0x46ea <main+0x141e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4664:	fe 01       	movw	r30, r28
    4666:	e3 59       	subi	r30, 0x93	; 147
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	40 e2       	ldi	r20, 0x20	; 32
    4678:	51 e4       	ldi	r21, 0x41	; 65
    467a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	8e 01       	movw	r16, r28
    4684:	09 59       	subi	r16, 0x99	; 153
    4686:	1f 4f       	sbci	r17, 0xFF	; 255
    4688:	bc 01       	movw	r22, r24
    468a:	cd 01       	movw	r24, r26
    468c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	f8 01       	movw	r30, r16
    4696:	91 83       	std	Z+1, r25	; 0x01
    4698:	80 83       	st	Z, r24
    469a:	1f c0       	rjmp	.+62     	; 0x46da <main+0x140e>
    469c:	fe 01       	movw	r30, r28
    469e:	eb 59       	subi	r30, 0x9B	; 155
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	88 ec       	ldi	r24, 0xC8	; 200
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	91 83       	std	Z+1, r25	; 0x01
    46a8:	80 83       	st	Z, r24
    46aa:	fe 01       	movw	r30, r28
    46ac:	eb 59       	subi	r30, 0x9B	; 155
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	80 81       	ld	r24, Z
    46b2:	91 81       	ldd	r25, Z+1	; 0x01
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	f1 f7       	brne	.-4      	; 0x46b4 <main+0x13e8>
    46b8:	fe 01       	movw	r30, r28
    46ba:	eb 59       	subi	r30, 0x9B	; 155
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c2:	de 01       	movw	r26, r28
    46c4:	a9 59       	subi	r26, 0x99	; 153
    46c6:	bf 4f       	sbci	r27, 0xFF	; 255
    46c8:	fe 01       	movw	r30, r28
    46ca:	e9 59       	subi	r30, 0x99	; 153
    46cc:	ff 4f       	sbci	r31, 0xFF	; 255
    46ce:	80 81       	ld	r24, Z
    46d0:	91 81       	ldd	r25, Z+1	; 0x01
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	11 96       	adiw	r26, 0x01	; 1
    46d6:	9c 93       	st	X, r25
    46d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46da:	fe 01       	movw	r30, r28
    46dc:	e9 59       	subi	r30, 0x99	; 153
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	80 81       	ld	r24, Z
    46e2:	91 81       	ldd	r25, Z+1	; 0x01
    46e4:	00 97       	sbiw	r24, 0x00	; 0
    46e6:	d1 f6       	brne	.-76     	; 0x469c <main+0x13d0>
    46e8:	28 c0       	rjmp	.+80     	; 0x473a <main+0x146e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ea:	8e 01       	movw	r16, r28
    46ec:	09 59       	subi	r16, 0x99	; 153
    46ee:	1f 4f       	sbci	r17, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	e7 59       	subi	r30, 0x97	; 151
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	60 81       	ld	r22, Z
    46f8:	71 81       	ldd	r23, Z+1	; 0x01
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4702:	dc 01       	movw	r26, r24
    4704:	cb 01       	movw	r24, r22
    4706:	f8 01       	movw	r30, r16
    4708:	91 83       	std	Z+1, r25	; 0x01
    470a:	80 83       	st	Z, r24
    470c:	de 01       	movw	r26, r28
    470e:	ad 59       	subi	r26, 0x9D	; 157
    4710:	bf 4f       	sbci	r27, 0xFF	; 255
    4712:	fe 01       	movw	r30, r28
    4714:	e9 59       	subi	r30, 0x99	; 153
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	80 81       	ld	r24, Z
    471a:	91 81       	ldd	r25, Z+1	; 0x01
    471c:	11 96       	adiw	r26, 0x01	; 1
    471e:	9c 93       	st	X, r25
    4720:	8e 93       	st	-X, r24
    4722:	fe 01       	movw	r30, r28
    4724:	ed 59       	subi	r30, 0x9D	; 157
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	80 81       	ld	r24, Z
    472a:	91 81       	ldd	r25, Z+1	; 0x01
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	f1 f7       	brne	.-4      	; 0x472c <main+0x1460>
    4730:	fe 01       	movw	r30, r28
    4732:	ed 59       	subi	r30, 0x9D	; 157
    4734:	ff 4f       	sbci	r31, 0xFF	; 255
    4736:	91 83       	std	Z+1, r25	; 0x01
    4738:	80 83       	st	Z, r24
				LCD_vidSendCommand(lcd_Clear);

				LCD_vidWriteString("Correct Password");
				_delay_ms(500);

				while(key_pressed!='3'){
    473a:	fe 01       	movw	r30, r28
    473c:	e1 50       	subi	r30, 0x01	; 1
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	83 33       	cpi	r24, 0x33	; 51
    4744:	09 f0       	breq	.+2      	; 0x4748 <main+0x147c>
    4746:	de ca       	rjmp	.-2628   	; 0x3d04 <main+0xa38>
    4748:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <main+0x2a6>
			//WRONG PASSWORD
			else
			{
				////BUZZ_ON AND PRINT INCORRECT PASSWORD

				DIO_voidWritePin(PORT_A,DIO_PIN_NUM_A2,DIO_HIGH);
    474c:	81 e0       	ldi	r24, 0x01	; 1
    474e:	62 e0       	ldi	r22, 0x02	; 2
    4750:	41 e0       	ldi	r20, 0x01	; 1
    4752:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
				LCD_vidWriteString("INCORRECT");
    4756:	89 e1       	ldi	r24, 0x19	; 25
    4758:	91 e0       	ldi	r25, 0x01	; 1
    475a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
				Gotoxy(0,2);
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	62 e0       	ldi	r22, 0x02	; 2
    4762:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				LCD_vidWriteString("PASSWORD");
    4766:	83 e2       	ldi	r24, 0x23	; 35
    4768:	91 e0       	ldi	r25, 0x01	; 1
    476a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    476e:	fe 01       	movw	r30, r28
    4770:	e1 5a       	subi	r30, 0xA1	; 161
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	aa ef       	ldi	r26, 0xFA	; 250
    477a:	b3 e4       	ldi	r27, 0x43	; 67
    477c:	80 83       	st	Z, r24
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	a2 83       	std	Z+2, r26	; 0x02
    4782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4784:	8e 01       	movw	r16, r28
    4786:	05 5a       	subi	r16, 0xA5	; 165
    4788:	1f 4f       	sbci	r17, 0xFF	; 255
    478a:	fe 01       	movw	r30, r28
    478c:	e1 5a       	subi	r30, 0xA1	; 161
    478e:	ff 4f       	sbci	r31, 0xFF	; 255
    4790:	60 81       	ld	r22, Z
    4792:	71 81       	ldd	r23, Z+1	; 0x01
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	93 81       	ldd	r25, Z+3	; 0x03
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	4a ef       	ldi	r20, 0xFA	; 250
    479e:	54 e4       	ldi	r21, 0x44	; 68
    47a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	f8 01       	movw	r30, r16
    47aa:	80 83       	st	Z, r24
    47ac:	91 83       	std	Z+1, r25	; 0x01
    47ae:	a2 83       	std	Z+2, r26	; 0x02
    47b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47b2:	fe 01       	movw	r30, r28
    47b4:	e5 5a       	subi	r30, 0xA5	; 165
    47b6:	ff 4f       	sbci	r31, 0xFF	; 255
    47b8:	60 81       	ld	r22, Z
    47ba:	71 81       	ldd	r23, Z+1	; 0x01
    47bc:	82 81       	ldd	r24, Z+2	; 0x02
    47be:	93 81       	ldd	r25, Z+3	; 0x03
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	40 e8       	ldi	r20, 0x80	; 128
    47c6:	5f e3       	ldi	r21, 0x3F	; 63
    47c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47cc:	88 23       	and	r24, r24
    47ce:	44 f4       	brge	.+16     	; 0x47e0 <main+0x1514>
		__ticks = 1;
    47d0:	fe 01       	movw	r30, r28
    47d2:	e7 5a       	subi	r30, 0xA7	; 167
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	80 83       	st	Z, r24
    47de:	64 c0       	rjmp	.+200    	; 0x48a8 <main+0x15dc>
	else if (__tmp > 65535)
    47e0:	fe 01       	movw	r30, r28
    47e2:	e5 5a       	subi	r30, 0xA5	; 165
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	60 81       	ld	r22, Z
    47e8:	71 81       	ldd	r23, Z+1	; 0x01
    47ea:	82 81       	ldd	r24, Z+2	; 0x02
    47ec:	93 81       	ldd	r25, Z+3	; 0x03
    47ee:	20 e0       	ldi	r18, 0x00	; 0
    47f0:	3f ef       	ldi	r19, 0xFF	; 255
    47f2:	4f e7       	ldi	r20, 0x7F	; 127
    47f4:	57 e4       	ldi	r21, 0x47	; 71
    47f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47fa:	18 16       	cp	r1, r24
    47fc:	0c f0       	brlt	.+2      	; 0x4800 <main+0x1534>
    47fe:	43 c0       	rjmp	.+134    	; 0x4886 <main+0x15ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4800:	fe 01       	movw	r30, r28
    4802:	e1 5a       	subi	r30, 0xA1	; 161
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	40 e2       	ldi	r20, 0x20	; 32
    4814:	51 e4       	ldi	r21, 0x41	; 65
    4816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	8e 01       	movw	r16, r28
    4820:	07 5a       	subi	r16, 0xA7	; 167
    4822:	1f 4f       	sbci	r17, 0xFF	; 255
    4824:	bc 01       	movw	r22, r24
    4826:	cd 01       	movw	r24, r26
    4828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	f8 01       	movw	r30, r16
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	80 83       	st	Z, r24
    4836:	1f c0       	rjmp	.+62     	; 0x4876 <main+0x15aa>
    4838:	fe 01       	movw	r30, r28
    483a:	e9 5a       	subi	r30, 0xA9	; 169
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	88 ec       	ldi	r24, 0xC8	; 200
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	80 83       	st	Z, r24
    4846:	fe 01       	movw	r30, r28
    4848:	e9 5a       	subi	r30, 0xA9	; 169
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	01 97       	sbiw	r24, 0x01	; 1
    4852:	f1 f7       	brne	.-4      	; 0x4850 <main+0x1584>
    4854:	fe 01       	movw	r30, r28
    4856:	e9 5a       	subi	r30, 0xA9	; 169
    4858:	ff 4f       	sbci	r31, 0xFF	; 255
    485a:	91 83       	std	Z+1, r25	; 0x01
    485c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485e:	de 01       	movw	r26, r28
    4860:	a7 5a       	subi	r26, 0xA7	; 167
    4862:	bf 4f       	sbci	r27, 0xFF	; 255
    4864:	fe 01       	movw	r30, r28
    4866:	e7 5a       	subi	r30, 0xA7	; 167
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	80 81       	ld	r24, Z
    486c:	91 81       	ldd	r25, Z+1	; 0x01
    486e:	01 97       	sbiw	r24, 0x01	; 1
    4870:	11 96       	adiw	r26, 0x01	; 1
    4872:	9c 93       	st	X, r25
    4874:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4876:	fe 01       	movw	r30, r28
    4878:	e7 5a       	subi	r30, 0xA7	; 167
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	80 81       	ld	r24, Z
    487e:	91 81       	ldd	r25, Z+1	; 0x01
    4880:	00 97       	sbiw	r24, 0x00	; 0
    4882:	d1 f6       	brne	.-76     	; 0x4838 <main+0x156c>
    4884:	27 c0       	rjmp	.+78     	; 0x48d4 <main+0x1608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4886:	8e 01       	movw	r16, r28
    4888:	07 5a       	subi	r16, 0xA7	; 167
    488a:	1f 4f       	sbci	r17, 0xFF	; 255
    488c:	fe 01       	movw	r30, r28
    488e:	e5 5a       	subi	r30, 0xA5	; 165
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	60 81       	ld	r22, Z
    4894:	71 81       	ldd	r23, Z+1	; 0x01
    4896:	82 81       	ldd	r24, Z+2	; 0x02
    4898:	93 81       	ldd	r25, Z+3	; 0x03
    489a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	f8 01       	movw	r30, r16
    48a4:	91 83       	std	Z+1, r25	; 0x01
    48a6:	80 83       	st	Z, r24
    48a8:	de 01       	movw	r26, r28
    48aa:	ab 5a       	subi	r26, 0xAB	; 171
    48ac:	bf 4f       	sbci	r27, 0xFF	; 255
    48ae:	fe 01       	movw	r30, r28
    48b0:	e7 5a       	subi	r30, 0xA7	; 167
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	80 81       	ld	r24, Z
    48b6:	91 81       	ldd	r25, Z+1	; 0x01
    48b8:	8d 93       	st	X+, r24
    48ba:	9c 93       	st	X, r25
    48bc:	fe 01       	movw	r30, r28
    48be:	eb 5a       	subi	r30, 0xAB	; 171
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <main+0x15fa>
    48ca:	fe 01       	movw	r30, r28
    48cc:	eb 5a       	subi	r30, 0xAB	; 171
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	91 83       	std	Z+1, r25	; 0x01
    48d2:	80 83       	st	Z, r24
				_delay_ms(500);
				DIO_voidWritePin(PORT_A,DIO_PIN_NUM_A2,DIO_LOW);
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	62 e0       	ldi	r22, 0x02	; 2
    48d8:	40 e0       	ldi	r20, 0x00	; 0
    48da:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
				LCD_vidSendCommand(lcd_Clear);
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    48e4:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <main+0x2a6>


		case 2: //BUY

			//FLAG OF THE FIRST LCD IN WHILE
			LCD_flag=1;
    48e8:	fe 01       	movw	r30, r28
    48ea:	ef 5f       	subi	r30, 0xFF	; 255
    48ec:	fe 4f       	sbci	r31, 0xFE	; 254
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	80 83       	st	Z, r24
			Global_Interrupt_Disable();
    48f2:	0e 94 46 0c 	call	0x188c	; 0x188c <Global_Interrupt_Disable>
    48f6:	ca c3       	rjmp	.+1940   	; 0x508c <main+0x1dc0>


			while(key_pressed!='3'){
				LCD_vidSendCommand(lcd_Clear);
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    48fe:	fe 01       	movw	r30, r28
    4900:	ef 5a       	subi	r30, 0xAF	; 175
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	aa ef       	ldi	r26, 0xFA	; 250
    490a:	b3 e4       	ldi	r27, 0x43	; 67
    490c:	80 83       	st	Z, r24
    490e:	91 83       	std	Z+1, r25	; 0x01
    4910:	a2 83       	std	Z+2, r26	; 0x02
    4912:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4914:	8e 01       	movw	r16, r28
    4916:	03 5b       	subi	r16, 0xB3	; 179
    4918:	1f 4f       	sbci	r17, 0xFF	; 255
    491a:	fe 01       	movw	r30, r28
    491c:	ef 5a       	subi	r30, 0xAF	; 175
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	60 81       	ld	r22, Z
    4922:	71 81       	ldd	r23, Z+1	; 0x01
    4924:	82 81       	ldd	r24, Z+2	; 0x02
    4926:	93 81       	ldd	r25, Z+3	; 0x03
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	4a ef       	ldi	r20, 0xFA	; 250
    492e:	54 e4       	ldi	r21, 0x44	; 68
    4930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	f8 01       	movw	r30, r16
    493a:	80 83       	st	Z, r24
    493c:	91 83       	std	Z+1, r25	; 0x01
    493e:	a2 83       	std	Z+2, r26	; 0x02
    4940:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4942:	fe 01       	movw	r30, r28
    4944:	e3 5b       	subi	r30, 0xB3	; 179
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	60 81       	ld	r22, Z
    494a:	71 81       	ldd	r23, Z+1	; 0x01
    494c:	82 81       	ldd	r24, Z+2	; 0x02
    494e:	93 81       	ldd	r25, Z+3	; 0x03
    4950:	20 e0       	ldi	r18, 0x00	; 0
    4952:	30 e0       	ldi	r19, 0x00	; 0
    4954:	40 e8       	ldi	r20, 0x80	; 128
    4956:	5f e3       	ldi	r21, 0x3F	; 63
    4958:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    495c:	88 23       	and	r24, r24
    495e:	44 f4       	brge	.+16     	; 0x4970 <main+0x16a4>
		__ticks = 1;
    4960:	fe 01       	movw	r30, r28
    4962:	e5 5b       	subi	r30, 0xB5	; 181
    4964:	ff 4f       	sbci	r31, 0xFF	; 255
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	91 83       	std	Z+1, r25	; 0x01
    496c:	80 83       	st	Z, r24
    496e:	64 c0       	rjmp	.+200    	; 0x4a38 <main+0x176c>
	else if (__tmp > 65535)
    4970:	fe 01       	movw	r30, r28
    4972:	e3 5b       	subi	r30, 0xB3	; 179
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	60 81       	ld	r22, Z
    4978:	71 81       	ldd	r23, Z+1	; 0x01
    497a:	82 81       	ldd	r24, Z+2	; 0x02
    497c:	93 81       	ldd	r25, Z+3	; 0x03
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	3f ef       	ldi	r19, 0xFF	; 255
    4982:	4f e7       	ldi	r20, 0x7F	; 127
    4984:	57 e4       	ldi	r21, 0x47	; 71
    4986:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    498a:	18 16       	cp	r1, r24
    498c:	0c f0       	brlt	.+2      	; 0x4990 <main+0x16c4>
    498e:	43 c0       	rjmp	.+134    	; 0x4a16 <main+0x174a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4990:	fe 01       	movw	r30, r28
    4992:	ef 5a       	subi	r30, 0xAF	; 175
    4994:	ff 4f       	sbci	r31, 0xFF	; 255
    4996:	60 81       	ld	r22, Z
    4998:	71 81       	ldd	r23, Z+1	; 0x01
    499a:	82 81       	ldd	r24, Z+2	; 0x02
    499c:	93 81       	ldd	r25, Z+3	; 0x03
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	40 e2       	ldi	r20, 0x20	; 32
    49a4:	51 e4       	ldi	r21, 0x41	; 65
    49a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	8e 01       	movw	r16, r28
    49b0:	05 5b       	subi	r16, 0xB5	; 181
    49b2:	1f 4f       	sbci	r17, 0xFF	; 255
    49b4:	bc 01       	movw	r22, r24
    49b6:	cd 01       	movw	r24, r26
    49b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	f8 01       	movw	r30, r16
    49c2:	91 83       	std	Z+1, r25	; 0x01
    49c4:	80 83       	st	Z, r24
    49c6:	1f c0       	rjmp	.+62     	; 0x4a06 <main+0x173a>
    49c8:	fe 01       	movw	r30, r28
    49ca:	e7 5b       	subi	r30, 0xB7	; 183
    49cc:	ff 4f       	sbci	r31, 0xFF	; 255
    49ce:	88 ec       	ldi	r24, 0xC8	; 200
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	91 83       	std	Z+1, r25	; 0x01
    49d4:	80 83       	st	Z, r24
    49d6:	fe 01       	movw	r30, r28
    49d8:	e7 5b       	subi	r30, 0xB7	; 183
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	80 81       	ld	r24, Z
    49de:	91 81       	ldd	r25, Z+1	; 0x01
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <main+0x1714>
    49e4:	fe 01       	movw	r30, r28
    49e6:	e7 5b       	subi	r30, 0xB7	; 183
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	91 83       	std	Z+1, r25	; 0x01
    49ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ee:	de 01       	movw	r26, r28
    49f0:	a5 5b       	subi	r26, 0xB5	; 181
    49f2:	bf 4f       	sbci	r27, 0xFF	; 255
    49f4:	fe 01       	movw	r30, r28
    49f6:	e5 5b       	subi	r30, 0xB5	; 181
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	80 81       	ld	r24, Z
    49fc:	91 81       	ldd	r25, Z+1	; 0x01
    49fe:	01 97       	sbiw	r24, 0x01	; 1
    4a00:	11 96       	adiw	r26, 0x01	; 1
    4a02:	9c 93       	st	X, r25
    4a04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a06:	fe 01       	movw	r30, r28
    4a08:	e5 5b       	subi	r30, 0xB5	; 181
    4a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0c:	80 81       	ld	r24, Z
    4a0e:	91 81       	ldd	r25, Z+1	; 0x01
    4a10:	00 97       	sbiw	r24, 0x00	; 0
    4a12:	d1 f6       	brne	.-76     	; 0x49c8 <main+0x16fc>
    4a14:	27 c0       	rjmp	.+78     	; 0x4a64 <main+0x1798>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a16:	8e 01       	movw	r16, r28
    4a18:	05 5b       	subi	r16, 0xB5	; 181
    4a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e3 5b       	subi	r30, 0xB3	; 179
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	60 81       	ld	r22, Z
    4a24:	71 81       	ldd	r23, Z+1	; 0x01
    4a26:	82 81       	ldd	r24, Z+2	; 0x02
    4a28:	93 81       	ldd	r25, Z+3	; 0x03
    4a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	f8 01       	movw	r30, r16
    4a34:	91 83       	std	Z+1, r25	; 0x01
    4a36:	80 83       	st	Z, r24
    4a38:	de 01       	movw	r26, r28
    4a3a:	a9 5b       	subi	r26, 0xB9	; 185
    4a3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a3e:	fe 01       	movw	r30, r28
    4a40:	e5 5b       	subi	r30, 0xB5	; 181
    4a42:	ff 4f       	sbci	r31, 0xFF	; 255
    4a44:	80 81       	ld	r24, Z
    4a46:	91 81       	ldd	r25, Z+1	; 0x01
    4a48:	8d 93       	st	X+, r24
    4a4a:	9c 93       	st	X, r25
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	e9 5b       	subi	r30, 0xB9	; 185
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	80 81       	ld	r24, Z
    4a54:	91 81       	ldd	r25, Z+1	; 0x01
    4a56:	01 97       	sbiw	r24, 0x01	; 1
    4a58:	f1 f7       	brne	.-4      	; 0x4a56 <main+0x178a>
    4a5a:	fe 01       	movw	r30, r28
    4a5c:	e9 5b       	subi	r30, 0xB9	; 185
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	91 83       	std	Z+1, r25	; 0x01
    4a62:	80 83       	st	Z, r24

				_delay_ms(500);
				Gotoxy(0,1);
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	61 e0       	ldi	r22, 0x01	; 1
    4a68:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				LCD_vidWriteString("1:spiro");
    4a6c:	8c e2       	ldi	r24, 0x2C	; 44
    4a6e:	91 e0       	ldi	r25, 0x01	; 1
    4a70:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

				Gotoxy(0,2);
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	62 e0       	ldi	r22, 0x02	; 2
    4a78:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				LCD_vidWriteString("2:BigCola 3:out");
    4a7c:	84 e3       	ldi	r24, 0x34	; 52
    4a7e:	91 e0       	ldi	r25, 0x01	; 1
    4a80:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
				//WHATEVER HE SELECTS THE ITEM WILL DECREASE BY ONE AND MOTOR WILL WORK

				key_pressed = NOT_PRESSED;
    4a84:	fe 01       	movw	r30, r28
    4a86:	e1 50       	subi	r30, 0x01	; 1
    4a88:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8a:	8f ef       	ldi	r24, 0xFF	; 255
    4a8c:	80 83       	st	Z, r24
    4a8e:	06 c0       	rjmp	.+12     	; 0x4a9c <main+0x17d0>

				while (key_pressed == NOT_PRESSED)
				{
					key_pressed = KPD_GetKey();
    4a90:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    4a94:	fe 01       	movw	r30, r28
    4a96:	e1 50       	subi	r30, 0x01	; 1
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	80 83       	st	Z, r24
				LCD_vidWriteString("2:BigCola 3:out");
				//WHATEVER HE SELECTS THE ITEM WILL DECREASE BY ONE AND MOTOR WILL WORK

				key_pressed = NOT_PRESSED;

				while (key_pressed == NOT_PRESSED)
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	e1 50       	subi	r30, 0x01	; 1
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	80 81       	ld	r24, Z
    4aa4:	8f 3f       	cpi	r24, 0xFF	; 255
    4aa6:	a1 f3       	breq	.-24     	; 0x4a90 <main+0x17c4>
				{
					key_pressed = KPD_GetKey();
				}
				if (key_pressed=='1')
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	e1 50       	subi	r30, 0x01	; 1
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	80 81       	ld	r24, Z
    4ab0:	81 33       	cpi	r24, 0x31	; 49
    4ab2:	09 f0       	breq	.+2      	; 0x4ab6 <main+0x17ea>
    4ab4:	b5 c1       	rjmp	.+874    	; 0x4e20 <main+0x1b54>
				{
					//CAN IS 0
					if (spiro==0)
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	ed 5f       	subi	r30, 0xFD	; 253
    4aba:	fe 4f       	sbci	r31, 0xFE	; 254
    4abc:	80 81       	ld	r24, Z
    4abe:	88 23       	and	r24, r24
    4ac0:	09 f0       	breq	.+2      	; 0x4ac4 <main+0x17f8>
    4ac2:	09 c1       	rjmp	.+530    	; 0x4cd6 <main+0x1a0a>
					{

						//BUZZER ON AND PRINT THERE IS NO CANS
						DIO_voidWritePin(PORT_A,DIO_PIN_NUM_A2,DIO_HIGH);
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	62 e0       	ldi	r22, 0x02	; 2
    4ac8:	41 e0       	ldi	r20, 0x01	; 1
    4aca:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
    4ace:	fe 01       	movw	r30, r28
    4ad0:	ed 5b       	subi	r30, 0xBD	; 189
    4ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	af e2       	ldi	r26, 0x2F	; 47
    4ada:	b4 e4       	ldi	r27, 0x44	; 68
    4adc:	80 83       	st	Z, r24
    4ade:	91 83       	std	Z+1, r25	; 0x01
    4ae0:	a2 83       	std	Z+2, r26	; 0x02
    4ae2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae4:	8e 01       	movw	r16, r28
    4ae6:	01 5c       	subi	r16, 0xC1	; 193
    4ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aea:	fe 01       	movw	r30, r28
    4aec:	ed 5b       	subi	r30, 0xBD	; 189
    4aee:	ff 4f       	sbci	r31, 0xFF	; 255
    4af0:	60 81       	ld	r22, Z
    4af2:	71 81       	ldd	r23, Z+1	; 0x01
    4af4:	82 81       	ldd	r24, Z+2	; 0x02
    4af6:	93 81       	ldd	r25, Z+3	; 0x03
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	4a ef       	ldi	r20, 0xFA	; 250
    4afe:	54 e4       	ldi	r21, 0x44	; 68
    4b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b04:	dc 01       	movw	r26, r24
    4b06:	cb 01       	movw	r24, r22
    4b08:	f8 01       	movw	r30, r16
    4b0a:	80 83       	st	Z, r24
    4b0c:	91 83       	std	Z+1, r25	; 0x01
    4b0e:	a2 83       	std	Z+2, r26	; 0x02
    4b10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b12:	fe 01       	movw	r30, r28
    4b14:	ff 96       	adiw	r30, 0x3f	; 63
    4b16:	60 81       	ld	r22, Z
    4b18:	71 81       	ldd	r23, Z+1	; 0x01
    4b1a:	82 81       	ldd	r24, Z+2	; 0x02
    4b1c:	93 81       	ldd	r25, Z+3	; 0x03
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	40 e8       	ldi	r20, 0x80	; 128
    4b24:	5f e3       	ldi	r21, 0x3F	; 63
    4b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b2a:	88 23       	and	r24, r24
    4b2c:	2c f4       	brge	.+10     	; 0x4b38 <main+0x186c>
		__ticks = 1;
    4b2e:	81 e0       	ldi	r24, 0x01	; 1
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	9e af       	std	Y+62, r25	; 0x3e
    4b34:	8d af       	std	Y+61, r24	; 0x3d
    4b36:	46 c0       	rjmp	.+140    	; 0x4bc4 <main+0x18f8>
	else if (__tmp > 65535)
    4b38:	fe 01       	movw	r30, r28
    4b3a:	ff 96       	adiw	r30, 0x3f	; 63
    4b3c:	60 81       	ld	r22, Z
    4b3e:	71 81       	ldd	r23, Z+1	; 0x01
    4b40:	82 81       	ldd	r24, Z+2	; 0x02
    4b42:	93 81       	ldd	r25, Z+3	; 0x03
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	3f ef       	ldi	r19, 0xFF	; 255
    4b48:	4f e7       	ldi	r20, 0x7F	; 127
    4b4a:	57 e4       	ldi	r21, 0x47	; 71
    4b4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b50:	18 16       	cp	r1, r24
    4b52:	64 f5       	brge	.+88     	; 0x4bac <main+0x18e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b54:	fe 01       	movw	r30, r28
    4b56:	ed 5b       	subi	r30, 0xBD	; 189
    4b58:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5a:	60 81       	ld	r22, Z
    4b5c:	71 81       	ldd	r23, Z+1	; 0x01
    4b5e:	82 81       	ldd	r24, Z+2	; 0x02
    4b60:	93 81       	ldd	r25, Z+3	; 0x03
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e2       	ldi	r20, 0x20	; 32
    4b68:	51 e4       	ldi	r21, 0x41	; 65
    4b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	bc 01       	movw	r22, r24
    4b74:	cd 01       	movw	r24, r26
    4b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	9e af       	std	Y+62, r25	; 0x3e
    4b80:	8d af       	std	Y+61, r24	; 0x3d
    4b82:	0f c0       	rjmp	.+30     	; 0x4ba2 <main+0x18d6>
    4b84:	88 ec       	ldi	r24, 0xC8	; 200
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	9c af       	std	Y+60, r25	; 0x3c
    4b8a:	8b af       	std	Y+59, r24	; 0x3b
    4b8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b90:	01 97       	sbiw	r24, 0x01	; 1
    4b92:	f1 f7       	brne	.-4      	; 0x4b90 <main+0x18c4>
    4b94:	9c af       	std	Y+60, r25	; 0x3c
    4b96:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b98:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	9e af       	std	Y+62, r25	; 0x3e
    4ba0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba2:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ba4:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ba6:	00 97       	sbiw	r24, 0x00	; 0
    4ba8:	69 f7       	brne	.-38     	; 0x4b84 <main+0x18b8>
    4baa:	16 c0       	rjmp	.+44     	; 0x4bd8 <main+0x190c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bac:	fe 01       	movw	r30, r28
    4bae:	ff 96       	adiw	r30, 0x3f	; 63
    4bb0:	60 81       	ld	r22, Z
    4bb2:	71 81       	ldd	r23, Z+1	; 0x01
    4bb4:	82 81       	ldd	r24, Z+2	; 0x02
    4bb6:	93 81       	ldd	r25, Z+3	; 0x03
    4bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	cb 01       	movw	r24, r22
    4bc0:	9e af       	std	Y+62, r25	; 0x3e
    4bc2:	8d af       	std	Y+61, r24	; 0x3d
    4bc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bc8:	9a af       	std	Y+58, r25	; 0x3a
    4bca:	89 af       	std	Y+57, r24	; 0x39
    4bcc:	89 ad       	ldd	r24, Y+57	; 0x39
    4bce:	9a ad       	ldd	r25, Y+58	; 0x3a
    4bd0:	01 97       	sbiw	r24, 0x01	; 1
    4bd2:	f1 f7       	brne	.-4      	; 0x4bd0 <main+0x1904>
    4bd4:	9a af       	std	Y+58, r25	; 0x3a
    4bd6:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(700);


						DIO_voidWritePin(PORT_A,DIO_PIN_NUM_A2,DIO_LOW);
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	62 e0       	ldi	r22, 0x02	; 2
    4bdc:	40 e0       	ldi	r20, 0x00	; 0
    4bde:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

						LCD_vidSendCommand(lcd_Clear);
    4be2:	81 e0       	ldi	r24, 0x01	; 1
    4be4:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
						LCD_vidWriteString("NOT AVAILABLE!");
    4be8:	84 e4       	ldi	r24, 0x44	; 68
    4bea:	91 e0       	ldi	r25, 0x01	; 1
    4bec:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	af e2       	ldi	r26, 0x2F	; 47
    4bf6:	b4 e4       	ldi	r27, 0x44	; 68
    4bf8:	8d ab       	std	Y+53, r24	; 0x35
    4bfa:	9e ab       	std	Y+54, r25	; 0x36
    4bfc:	af ab       	std	Y+55, r26	; 0x37
    4bfe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c00:	6d a9       	ldd	r22, Y+53	; 0x35
    4c02:	7e a9       	ldd	r23, Y+54	; 0x36
    4c04:	8f a9       	ldd	r24, Y+55	; 0x37
    4c06:	98 ad       	ldd	r25, Y+56	; 0x38
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	4a ef       	ldi	r20, 0xFA	; 250
    4c0e:	54 e4       	ldi	r21, 0x44	; 68
    4c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c14:	dc 01       	movw	r26, r24
    4c16:	cb 01       	movw	r24, r22
    4c18:	89 ab       	std	Y+49, r24	; 0x31
    4c1a:	9a ab       	std	Y+50, r25	; 0x32
    4c1c:	ab ab       	std	Y+51, r26	; 0x33
    4c1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c20:	69 a9       	ldd	r22, Y+49	; 0x31
    4c22:	7a a9       	ldd	r23, Y+50	; 0x32
    4c24:	8b a9       	ldd	r24, Y+51	; 0x33
    4c26:	9c a9       	ldd	r25, Y+52	; 0x34
    4c28:	20 e0       	ldi	r18, 0x00	; 0
    4c2a:	30 e0       	ldi	r19, 0x00	; 0
    4c2c:	40 e8       	ldi	r20, 0x80	; 128
    4c2e:	5f e3       	ldi	r21, 0x3F	; 63
    4c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c34:	88 23       	and	r24, r24
    4c36:	2c f4       	brge	.+10     	; 0x4c42 <main+0x1976>
		__ticks = 1;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	98 ab       	std	Y+48, r25	; 0x30
    4c3e:	8f a7       	std	Y+47, r24	; 0x2f
    4c40:	3f c0       	rjmp	.+126    	; 0x4cc0 <main+0x19f4>
	else if (__tmp > 65535)
    4c42:	69 a9       	ldd	r22, Y+49	; 0x31
    4c44:	7a a9       	ldd	r23, Y+50	; 0x32
    4c46:	8b a9       	ldd	r24, Y+51	; 0x33
    4c48:	9c a9       	ldd	r25, Y+52	; 0x34
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	3f ef       	ldi	r19, 0xFF	; 255
    4c4e:	4f e7       	ldi	r20, 0x7F	; 127
    4c50:	57 e4       	ldi	r21, 0x47	; 71
    4c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c56:	18 16       	cp	r1, r24
    4c58:	4c f5       	brge	.+82     	; 0x4cac <main+0x19e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c5a:	6d a9       	ldd	r22, Y+53	; 0x35
    4c5c:	7e a9       	ldd	r23, Y+54	; 0x36
    4c5e:	8f a9       	ldd	r24, Y+55	; 0x37
    4c60:	98 ad       	ldd	r25, Y+56	; 0x38
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	40 e2       	ldi	r20, 0x20	; 32
    4c68:	51 e4       	ldi	r21, 0x41	; 65
    4c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	cb 01       	movw	r24, r22
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	98 ab       	std	Y+48, r25	; 0x30
    4c80:	8f a7       	std	Y+47, r24	; 0x2f
    4c82:	0f c0       	rjmp	.+30     	; 0x4ca2 <main+0x19d6>
    4c84:	88 ec       	ldi	r24, 0xC8	; 200
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	9e a7       	std	Y+46, r25	; 0x2e
    4c8a:	8d a7       	std	Y+45, r24	; 0x2d
    4c8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c90:	01 97       	sbiw	r24, 0x01	; 1
    4c92:	f1 f7       	brne	.-4      	; 0x4c90 <main+0x19c4>
    4c94:	9e a7       	std	Y+46, r25	; 0x2e
    4c96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c98:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c9a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c9c:	01 97       	sbiw	r24, 0x01	; 1
    4c9e:	98 ab       	std	Y+48, r25	; 0x30
    4ca0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	69 f7       	brne	.-38     	; 0x4c84 <main+0x19b8>
    4caa:	f0 c1       	rjmp	.+992    	; 0x508c <main+0x1dc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cac:	69 a9       	ldd	r22, Y+49	; 0x31
    4cae:	7a a9       	ldd	r23, Y+50	; 0x32
    4cb0:	8b a9       	ldd	r24, Y+51	; 0x33
    4cb2:	9c a9       	ldd	r25, Y+52	; 0x34
    4cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	98 ab       	std	Y+48, r25	; 0x30
    4cbe:	8f a7       	std	Y+47, r24	; 0x2f
    4cc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cc2:	98 a9       	ldd	r25, Y+48	; 0x30
    4cc4:	9c a7       	std	Y+44, r25	; 0x2c
    4cc6:	8b a7       	std	Y+43, r24	; 0x2b
    4cc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cca:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	f1 f7       	brne	.-4      	; 0x4ccc <main+0x1a00>
    4cd0:	9c a7       	std	Y+44, r25	; 0x2c
    4cd2:	8b a7       	std	Y+43, r24	; 0x2b
    4cd4:	db c1       	rjmp	.+950    	; 0x508c <main+0x1dc0>
						_delay_ms(700);

					}
					else
					{
						LCD_vidSendCommand(lcd_Clear);
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
						//UPDATE THE NUMBER IN SAVE IT IN EEPROM
						spiro--;
    4cdc:	de 01       	movw	r26, r28
    4cde:	ad 5f       	subi	r26, 0xFD	; 253
    4ce0:	be 4f       	sbci	r27, 0xFE	; 254
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	ed 5f       	subi	r30, 0xFD	; 253
    4ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce8:	80 81       	ld	r24, Z
    4cea:	81 50       	subi	r24, 0x01	; 1
    4cec:	8c 93       	st	X, r24
						EEPROM_vWrite(EEPROM_SPIRO_ADDRESS,spiro);
    4cee:	fe 01       	movw	r30, r28
    4cf0:	ed 5f       	subi	r30, 0xFD	; 253
    4cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf4:	8d ef       	ldi	r24, 0xFD	; 253
    4cf6:	60 81       	ld	r22, Z
    4cf8:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
						DIO_voidWritePin(PORT_C,DIO_PIN_NUM_C7,DIO_HIGH);
    4cfc:	83 e0       	ldi	r24, 0x03	; 3
    4cfe:	67 e0       	ldi	r22, 0x07	; 7
    4d00:	41 e0       	ldi	r20, 0x01	; 1
    4d02:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidSendCommand(lcd_Clear);
    4d06:	81 e0       	ldi	r24, 0x01	; 1
    4d08:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

						//MOTOR WORK AS THE ITEM IS OUT
						Gotoxy(0,1);
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	61 e0       	ldi	r22, 0x01	; 1
    4d10:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						DCM_voidRotateCCW();
    4d14:	0e 94 23 06 	call	0xc46	; 0xc46 <DCM_voidRotateCCW>
						DIO_voidTogglePin(PORT_A,DIO_PIN_NUM_A1);
    4d18:	81 e0       	ldi	r24, 0x01	; 1
    4d1a:	61 e0       	ldi	r22, 0x01	; 1
    4d1c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DIO_voidTogglePin>
						LCD_vidWriteString("ENJOY Refreshing!");
    4d20:	83 e5       	ldi	r24, 0x53	; 83
    4d22:	91 e0       	ldi	r25, 0x01	; 1
    4d24:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	aa e7       	ldi	r26, 0x7A	; 122
    4d2e:	b4 e4       	ldi	r27, 0x44	; 68
    4d30:	8f a3       	std	Y+39, r24	; 0x27
    4d32:	98 a7       	std	Y+40, r25	; 0x28
    4d34:	a9 a7       	std	Y+41, r26	; 0x29
    4d36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d38:	6f a1       	ldd	r22, Y+39	; 0x27
    4d3a:	78 a5       	ldd	r23, Y+40	; 0x28
    4d3c:	89 a5       	ldd	r24, Y+41	; 0x29
    4d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	4a ef       	ldi	r20, 0xFA	; 250
    4d46:	54 e4       	ldi	r21, 0x44	; 68
    4d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	cb 01       	movw	r24, r22
    4d50:	8b a3       	std	Y+35, r24	; 0x23
    4d52:	9c a3       	std	Y+36, r25	; 0x24
    4d54:	ad a3       	std	Y+37, r26	; 0x25
    4d56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d58:	6b a1       	ldd	r22, Y+35	; 0x23
    4d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d60:	20 e0       	ldi	r18, 0x00	; 0
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	40 e8       	ldi	r20, 0x80	; 128
    4d66:	5f e3       	ldi	r21, 0x3F	; 63
    4d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d6c:	88 23       	and	r24, r24
    4d6e:	2c f4       	brge	.+10     	; 0x4d7a <main+0x1aae>
		__ticks = 1;
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	9a a3       	std	Y+34, r25	; 0x22
    4d76:	89 a3       	std	Y+33, r24	; 0x21
    4d78:	3f c0       	rjmp	.+126    	; 0x4df8 <main+0x1b2c>
	else if (__tmp > 65535)
    4d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    4d80:	9e a1       	ldd	r25, Y+38	; 0x26
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	3f ef       	ldi	r19, 0xFF	; 255
    4d86:	4f e7       	ldi	r20, 0x7F	; 127
    4d88:	57 e4       	ldi	r21, 0x47	; 71
    4d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d8e:	18 16       	cp	r1, r24
    4d90:	4c f5       	brge	.+82     	; 0x4de4 <main+0x1b18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d92:	6f a1       	ldd	r22, Y+39	; 0x27
    4d94:	78 a5       	ldd	r23, Y+40	; 0x28
    4d96:	89 a5       	ldd	r24, Y+41	; 0x29
    4d98:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d9a:	20 e0       	ldi	r18, 0x00	; 0
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	40 e2       	ldi	r20, 0x20	; 32
    4da0:	51 e4       	ldi	r21, 0x41	; 65
    4da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da6:	dc 01       	movw	r26, r24
    4da8:	cb 01       	movw	r24, r22
    4daa:	bc 01       	movw	r22, r24
    4dac:	cd 01       	movw	r24, r26
    4dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	9a a3       	std	Y+34, r25	; 0x22
    4db8:	89 a3       	std	Y+33, r24	; 0x21
    4dba:	0f c0       	rjmp	.+30     	; 0x4dda <main+0x1b0e>
    4dbc:	88 ec       	ldi	r24, 0xC8	; 200
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	98 a3       	std	Y+32, r25	; 0x20
    4dc2:	8f 8f       	std	Y+31, r24	; 0x1f
    4dc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dc6:	98 a1       	ldd	r25, Y+32	; 0x20
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	f1 f7       	brne	.-4      	; 0x4dc8 <main+0x1afc>
    4dcc:	98 a3       	std	Y+32, r25	; 0x20
    4dce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    4dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	9a a3       	std	Y+34, r25	; 0x22
    4dd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dda:	89 a1       	ldd	r24, Y+33	; 0x21
    4ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    4dde:	00 97       	sbiw	r24, 0x00	; 0
    4de0:	69 f7       	brne	.-38     	; 0x4dbc <main+0x1af0>
    4de2:	14 c0       	rjmp	.+40     	; 0x4e0c <main+0x1b40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de4:	6b a1       	ldd	r22, Y+35	; 0x23
    4de6:	7c a1       	ldd	r23, Y+36	; 0x24
    4de8:	8d a1       	ldd	r24, Y+37	; 0x25
    4dea:	9e a1       	ldd	r25, Y+38	; 0x26
    4dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	9a a3       	std	Y+34, r25	; 0x22
    4df6:	89 a3       	std	Y+33, r24	; 0x21
    4df8:	89 a1       	ldd	r24, Y+33	; 0x21
    4dfa:	9a a1       	ldd	r25, Y+34	; 0x22
    4dfc:	9e 8f       	std	Y+30, r25	; 0x1e
    4dfe:	8d 8f       	std	Y+29, r24	; 0x1d
    4e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	f1 f7       	brne	.-4      	; 0x4e04 <main+0x1b38>
    4e08:	9e 8f       	std	Y+30, r25	; 0x1e
    4e0a:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000);
						DCM_voidStop();
    4e0c:	0e 94 34 06 	call	0xc68	; 0xc68 <DCM_voidStop>
						DIO_voidTogglePin(PORT_A,DIO_PIN_NUM_A1);
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	61 e0       	ldi	r22, 0x01	; 1
    4e14:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DIO_voidTogglePin>
						LCD_vidSendCommand(lcd_Clear);
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    4e1e:	36 c1       	rjmp	.+620    	; 0x508c <main+0x1dc0>



					}
				}
				else if(key_pressed=='2')
    4e20:	fe 01       	movw	r30, r28
    4e22:	e1 50       	subi	r30, 0x01	; 1
    4e24:	ff 4f       	sbci	r31, 0xFF	; 255
    4e26:	80 81       	ld	r24, Z
    4e28:	82 33       	cpi	r24, 0x32	; 50
    4e2a:	09 f0       	breq	.+2      	; 0x4e2e <main+0x1b62>
    4e2c:	2f c1       	rjmp	.+606    	; 0x508c <main+0x1dc0>
				{
					if (Bigcola==0)
    4e2e:	fe 01       	movw	r30, r28
    4e30:	ee 5f       	subi	r30, 0xFE	; 254
    4e32:	fe 4f       	sbci	r31, 0xFE	; 254
    4e34:	80 81       	ld	r24, Z
    4e36:	88 23       	and	r24, r24
    4e38:	09 f0       	breq	.+2      	; 0x4e3c <main+0x1b70>
    4e3a:	84 c0       	rjmp	.+264    	; 0x4f44 <main+0x1c78>
					{
						//BUZZER ON AND PRINT THERE IS NO CANS
						DIO_voidWritePin(PORT_A,DIO_PIN_NUM_A2,DIO_HIGH);
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	62 e0       	ldi	r22, 0x02	; 2
    4e40:	41 e0       	ldi	r20, 0x01	; 1
    4e42:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidWriteString("NOT AVAILABLE!");
    4e46:	84 e4       	ldi	r24, 0x44	; 68
    4e48:	91 e0       	ldi	r25, 0x01	; 1
    4e4a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	af e2       	ldi	r26, 0x2F	; 47
    4e54:	b4 e4       	ldi	r27, 0x44	; 68
    4e56:	89 8f       	std	Y+25, r24	; 0x19
    4e58:	9a 8f       	std	Y+26, r25	; 0x1a
    4e5a:	ab 8f       	std	Y+27, r26	; 0x1b
    4e5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    4e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	4a ef       	ldi	r20, 0xFA	; 250
    4e6c:	54 e4       	ldi	r21, 0x44	; 68
    4e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	8d 8b       	std	Y+21, r24	; 0x15
    4e78:	9e 8b       	std	Y+22, r25	; 0x16
    4e7a:	af 8b       	std	Y+23, r26	; 0x17
    4e7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    4e80:	7e 89       	ldd	r23, Y+22	; 0x16
    4e82:	8f 89       	ldd	r24, Y+23	; 0x17
    4e84:	98 8d       	ldd	r25, Y+24	; 0x18
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	40 e8       	ldi	r20, 0x80	; 128
    4e8c:	5f e3       	ldi	r21, 0x3F	; 63
    4e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e92:	88 23       	and	r24, r24
    4e94:	2c f4       	brge	.+10     	; 0x4ea0 <main+0x1bd4>
		__ticks = 1;
    4e96:	81 e0       	ldi	r24, 0x01	; 1
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	9c 8b       	std	Y+20, r25	; 0x14
    4e9c:	8b 8b       	std	Y+19, r24	; 0x13
    4e9e:	3f c0       	rjmp	.+126    	; 0x4f1e <main+0x1c52>
	else if (__tmp > 65535)
    4ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	3f ef       	ldi	r19, 0xFF	; 255
    4eac:	4f e7       	ldi	r20, 0x7F	; 127
    4eae:	57 e4       	ldi	r21, 0x47	; 71
    4eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4eb4:	18 16       	cp	r1, r24
    4eb6:	4c f5       	brge	.+82     	; 0x4f0a <main+0x1c3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb8:	69 8d       	ldd	r22, Y+25	; 0x19
    4eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	40 e2       	ldi	r20, 0x20	; 32
    4ec6:	51 e4       	ldi	r21, 0x41	; 65
    4ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ecc:	dc 01       	movw	r26, r24
    4ece:	cb 01       	movw	r24, r22
    4ed0:	bc 01       	movw	r22, r24
    4ed2:	cd 01       	movw	r24, r26
    4ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed8:	dc 01       	movw	r26, r24
    4eda:	cb 01       	movw	r24, r22
    4edc:	9c 8b       	std	Y+20, r25	; 0x14
    4ede:	8b 8b       	std	Y+19, r24	; 0x13
    4ee0:	0f c0       	rjmp	.+30     	; 0x4f00 <main+0x1c34>
    4ee2:	88 ec       	ldi	r24, 0xC8	; 200
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	9a 8b       	std	Y+18, r25	; 0x12
    4ee8:	89 8b       	std	Y+17, r24	; 0x11
    4eea:	89 89       	ldd	r24, Y+17	; 0x11
    4eec:	9a 89       	ldd	r25, Y+18	; 0x12
    4eee:	01 97       	sbiw	r24, 0x01	; 1
    4ef0:	f1 f7       	brne	.-4      	; 0x4eee <main+0x1c22>
    4ef2:	9a 8b       	std	Y+18, r25	; 0x12
    4ef4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    4efa:	01 97       	sbiw	r24, 0x01	; 1
    4efc:	9c 8b       	std	Y+20, r25	; 0x14
    4efe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f00:	8b 89       	ldd	r24, Y+19	; 0x13
    4f02:	9c 89       	ldd	r25, Y+20	; 0x14
    4f04:	00 97       	sbiw	r24, 0x00	; 0
    4f06:	69 f7       	brne	.-38     	; 0x4ee2 <main+0x1c16>
    4f08:	14 c0       	rjmp	.+40     	; 0x4f32 <main+0x1c66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f10:	98 8d       	ldd	r25, Y+24	; 0x18
    4f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	9c 8b       	std	Y+20, r25	; 0x14
    4f1c:	8b 8b       	std	Y+19, r24	; 0x13
    4f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    4f20:	9c 89       	ldd	r25, Y+20	; 0x14
    4f22:	98 8b       	std	Y+16, r25	; 0x10
    4f24:	8f 87       	std	Y+15, r24	; 0x0f
    4f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f28:	98 89       	ldd	r25, Y+16	; 0x10
    4f2a:	01 97       	sbiw	r24, 0x01	; 1
    4f2c:	f1 f7       	brne	.-4      	; 0x4f2a <main+0x1c5e>
    4f2e:	98 8b       	std	Y+16, r25	; 0x10
    4f30:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(700);
						DIO_voidWritePin(PORT_A,DIO_PIN_NUM_A2,DIO_LOW);
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	62 e0       	ldi	r22, 0x02	; 2
    4f36:	40 e0       	ldi	r20, 0x00	; 0
    4f38:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidSendCommand(lcd_Clear);
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    4f42:	a4 c0       	rjmp	.+328    	; 0x508c <main+0x1dc0>

					}
					else
					{
						Bigcola--;
    4f44:	de 01       	movw	r26, r28
    4f46:	ae 5f       	subi	r26, 0xFE	; 254
    4f48:	be 4f       	sbci	r27, 0xFE	; 254
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	ee 5f       	subi	r30, 0xFE	; 254
    4f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f50:	80 81       	ld	r24, Z
    4f52:	81 50       	subi	r24, 0x01	; 1
    4f54:	8c 93       	st	X, r24
						EEPROM_vWrite(EEPROM_COLA_ADDRESS,Bigcola);
    4f56:	fe 01       	movw	r30, r28
    4f58:	ee 5f       	subi	r30, 0xFE	; 254
    4f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f5c:	81 ef       	ldi	r24, 0xF1	; 241
    4f5e:	60 81       	ld	r22, Z
    4f60:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
						LCD_vidSendCommand(lcd_Clear);
    4f64:	81 e0       	ldi	r24, 0x01	; 1
    4f66:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

						DIO_voidWritePin(PORT_C,DIO_PIN_NUM_C7,DIO_HIGH);
    4f6a:	83 e0       	ldi	r24, 0x03	; 3
    4f6c:	67 e0       	ldi	r22, 0x07	; 7
    4f6e:	41 e0       	ldi	r20, 0x01	; 1
    4f70:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidSendCommand(lcd_Clear);
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

						//MOTOR WORK AS THE ITEM IS OUT

						DCM_voidRotateCCW();
    4f7a:	0e 94 23 06 	call	0xc46	; 0xc46 <DCM_voidRotateCCW>
						DIO_voidTogglePin(PORT_A,DIO_PIN_NUM_A1);
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	61 e0       	ldi	r22, 0x01	; 1
    4f82:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DIO_voidTogglePin>
						Gotoxy(0,1);
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	61 e0       	ldi	r22, 0x01	; 1
    4f8a:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("ENJOY Refreshing!");
    4f8e:	83 e5       	ldi	r24, 0x53	; 83
    4f90:	91 e0       	ldi	r25, 0x01	; 1
    4f92:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	aa e7       	ldi	r26, 0x7A	; 122
    4f9c:	b4 e4       	ldi	r27, 0x44	; 68
    4f9e:	8b 87       	std	Y+11, r24	; 0x0b
    4fa0:	9c 87       	std	Y+12, r25	; 0x0c
    4fa2:	ad 87       	std	Y+13, r26	; 0x0d
    4fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fae:	20 e0       	ldi	r18, 0x00	; 0
    4fb0:	30 e0       	ldi	r19, 0x00	; 0
    4fb2:	4a ef       	ldi	r20, 0xFA	; 250
    4fb4:	54 e4       	ldi	r21, 0x44	; 68
    4fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fba:	dc 01       	movw	r26, r24
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	8f 83       	std	Y+7, r24	; 0x07
    4fc0:	98 87       	std	Y+8, r25	; 0x08
    4fc2:	a9 87       	std	Y+9, r26	; 0x09
    4fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc8:	78 85       	ldd	r23, Y+8	; 0x08
    4fca:	89 85       	ldd	r24, Y+9	; 0x09
    4fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fce:	20 e0       	ldi	r18, 0x00	; 0
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	40 e8       	ldi	r20, 0x80	; 128
    4fd4:	5f e3       	ldi	r21, 0x3F	; 63
    4fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fda:	88 23       	and	r24, r24
    4fdc:	2c f4       	brge	.+10     	; 0x4fe8 <main+0x1d1c>
		__ticks = 1;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	9e 83       	std	Y+6, r25	; 0x06
    4fe4:	8d 83       	std	Y+5, r24	; 0x05
    4fe6:	3f c0       	rjmp	.+126    	; 0x5066 <main+0x1d9a>
	else if (__tmp > 65535)
    4fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    4fea:	78 85       	ldd	r23, Y+8	; 0x08
    4fec:	89 85       	ldd	r24, Y+9	; 0x09
    4fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ff0:	20 e0       	ldi	r18, 0x00	; 0
    4ff2:	3f ef       	ldi	r19, 0xFF	; 255
    4ff4:	4f e7       	ldi	r20, 0x7F	; 127
    4ff6:	57 e4       	ldi	r21, 0x47	; 71
    4ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ffc:	18 16       	cp	r1, r24
    4ffe:	4c f5       	brge	.+82     	; 0x5052 <main+0x1d86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5000:	6b 85       	ldd	r22, Y+11	; 0x0b
    5002:	7c 85       	ldd	r23, Y+12	; 0x0c
    5004:	8d 85       	ldd	r24, Y+13	; 0x0d
    5006:	9e 85       	ldd	r25, Y+14	; 0x0e
    5008:	20 e0       	ldi	r18, 0x00	; 0
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	40 e2       	ldi	r20, 0x20	; 32
    500e:	51 e4       	ldi	r21, 0x41	; 65
    5010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    5018:	bc 01       	movw	r22, r24
    501a:	cd 01       	movw	r24, r26
    501c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5020:	dc 01       	movw	r26, r24
    5022:	cb 01       	movw	r24, r22
    5024:	9e 83       	std	Y+6, r25	; 0x06
    5026:	8d 83       	std	Y+5, r24	; 0x05
    5028:	0f c0       	rjmp	.+30     	; 0x5048 <main+0x1d7c>
    502a:	88 ec       	ldi	r24, 0xC8	; 200
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	9c 83       	std	Y+4, r25	; 0x04
    5030:	8b 83       	std	Y+3, r24	; 0x03
    5032:	8b 81       	ldd	r24, Y+3	; 0x03
    5034:	9c 81       	ldd	r25, Y+4	; 0x04
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	f1 f7       	brne	.-4      	; 0x5036 <main+0x1d6a>
    503a:	9c 83       	std	Y+4, r25	; 0x04
    503c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    503e:	8d 81       	ldd	r24, Y+5	; 0x05
    5040:	9e 81       	ldd	r25, Y+6	; 0x06
    5042:	01 97       	sbiw	r24, 0x01	; 1
    5044:	9e 83       	std	Y+6, r25	; 0x06
    5046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5048:	8d 81       	ldd	r24, Y+5	; 0x05
    504a:	9e 81       	ldd	r25, Y+6	; 0x06
    504c:	00 97       	sbiw	r24, 0x00	; 0
    504e:	69 f7       	brne	.-38     	; 0x502a <main+0x1d5e>
    5050:	14 c0       	rjmp	.+40     	; 0x507a <main+0x1dae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5052:	6f 81       	ldd	r22, Y+7	; 0x07
    5054:	78 85       	ldd	r23, Y+8	; 0x08
    5056:	89 85       	ldd	r24, Y+9	; 0x09
    5058:	9a 85       	ldd	r25, Y+10	; 0x0a
    505a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    505e:	dc 01       	movw	r26, r24
    5060:	cb 01       	movw	r24, r22
    5062:	9e 83       	std	Y+6, r25	; 0x06
    5064:	8d 83       	std	Y+5, r24	; 0x05
    5066:	8d 81       	ldd	r24, Y+5	; 0x05
    5068:	9e 81       	ldd	r25, Y+6	; 0x06
    506a:	9a 83       	std	Y+2, r25	; 0x02
    506c:	89 83       	std	Y+1, r24	; 0x01
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	9a 81       	ldd	r25, Y+2	; 0x02
    5072:	01 97       	sbiw	r24, 0x01	; 1
    5074:	f1 f7       	brne	.-4      	; 0x5072 <main+0x1da6>
    5076:	9a 83       	std	Y+2, r25	; 0x02
    5078:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						DCM_voidStop();
    507a:	0e 94 34 06 	call	0xc68	; 0xc68 <DCM_voidStop>
						DIO_voidTogglePin(PORT_A,DIO_PIN_NUM_A1);
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	61 e0       	ldi	r22, 0x01	; 1
    5082:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DIO_voidTogglePin>
						LCD_vidSendCommand(lcd_Clear);
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
			//FLAG OF THE FIRST LCD IN WHILE
			LCD_flag=1;
			Global_Interrupt_Disable();


			while(key_pressed!='3'){
    508c:	fe 01       	movw	r30, r28
    508e:	e1 50       	subi	r30, 0x01	; 1
    5090:	ff 4f       	sbci	r31, 0xFF	; 255
    5092:	80 81       	ld	r24, Z
    5094:	83 33       	cpi	r24, 0x33	; 51
    5096:	09 f0       	breq	.+2      	; 0x509a <main+0x1dce>
    5098:	2f cc       	rjmp	.-1954   	; 0x48f8 <main+0x162c>
    509a:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <main+0x2a6>
			}

			break;

		default:
			LCD_flag=0;
    509e:	fe 01       	movw	r30, r28
    50a0:	ef 5f       	subi	r30, 0xFF	; 255
    50a2:	fe 4f       	sbci	r31, 0xFE	; 254
    50a4:	10 82       	st	Z, r1
			LCD_vidSendCommand(lcd_Clear);
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    50ac:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <main+0x2a6>

000050b0 <SET_PASS>:
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void SET_PASS(void){
    50b0:	df 93       	push	r29
    50b2:	cf 93       	push	r28
    50b4:	cd b7       	in	r28, 0x3d	; 61
    50b6:	de b7       	in	r29, 0x3e	; 62
    50b8:	ad 97       	sbiw	r28, 0x2d	; 45
    50ba:	0f b6       	in	r0, 0x3f	; 63
    50bc:	f8 94       	cli
    50be:	de bf       	out	0x3e, r29	; 62
    50c0:	0f be       	out	0x3f, r0	; 63
    50c2:	cd bf       	out	0x3d, r28	; 61
	//SET Password from 3 digit
	u8 pass_counter=0;
    50c4:	1d a6       	std	Y+45, r1	; 0x2d
	u8 pass=0;
    50c6:	1c a6       	std	Y+44, r1	; 0x2c
	u8 key_pressed = 0;
    50c8:	1b a6       	std	Y+43, r1	; 0x2b
    50ca:	0c c1       	rjmp	.+536    	; 0x52e4 <SET_PASS+0x234>

	while (pass_counter<PASS_SIZE)
	{
		key_pressed = NOT_PRESSED;
    50cc:	8f ef       	ldi	r24, 0xFF	; 255
    50ce:	8b a7       	std	Y+43, r24	; 0x2b
    50d0:	03 c0       	rjmp	.+6      	; 0x50d8 <SET_PASS+0x28>
		while (key_pressed == NOT_PRESSED)
		{
			key_pressed = KPD_GetKey();
    50d2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    50d6:	8b a7       	std	Y+43, r24	; 0x2b
	u8 key_pressed = 0;

	while (pass_counter<PASS_SIZE)
	{
		key_pressed = NOT_PRESSED;
		while (key_pressed == NOT_PRESSED)
    50d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    50da:	8f 3f       	cpi	r24, 0xFF	; 255
    50dc:	d1 f3       	breq	.-12     	; 0x50d2 <SET_PASS+0x22>
		{
			key_pressed = KPD_GetKey();

		}
		pass = pass * 10 + (key_pressed - '0');
    50de:	8c a5       	ldd	r24, Y+44	; 0x2c
    50e0:	88 2f       	mov	r24, r24
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	9c 01       	movw	r18, r24
    50e6:	22 0f       	add	r18, r18
    50e8:	33 1f       	adc	r19, r19
    50ea:	c9 01       	movw	r24, r18
    50ec:	88 0f       	add	r24, r24
    50ee:	99 1f       	adc	r25, r25
    50f0:	88 0f       	add	r24, r24
    50f2:	99 1f       	adc	r25, r25
    50f4:	82 0f       	add	r24, r18
    50f6:	93 1f       	adc	r25, r19
    50f8:	98 2f       	mov	r25, r24
    50fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    50fc:	89 0f       	add	r24, r25
    50fe:	80 53       	subi	r24, 0x30	; 48
    5100:	8c a7       	std	Y+44, r24	; 0x2c

		LCD_vidWriteCharctr(key_pressed);
    5102:	8b a5       	ldd	r24, Y+43	; 0x2b
    5104:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    5108:	80 e0       	ldi	r24, 0x00	; 0
    510a:	90 e0       	ldi	r25, 0x00	; 0
    510c:	a8 e4       	ldi	r26, 0x48	; 72
    510e:	b3 e4       	ldi	r27, 0x43	; 67
    5110:	8f a3       	std	Y+39, r24	; 0x27
    5112:	98 a7       	std	Y+40, r25	; 0x28
    5114:	a9 a7       	std	Y+41, r26	; 0x29
    5116:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5118:	6f a1       	ldd	r22, Y+39	; 0x27
    511a:	78 a5       	ldd	r23, Y+40	; 0x28
    511c:	89 a5       	ldd	r24, Y+41	; 0x29
    511e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5120:	20 e0       	ldi	r18, 0x00	; 0
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	4a ef       	ldi	r20, 0xFA	; 250
    5126:	54 e4       	ldi	r21, 0x44	; 68
    5128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    512c:	dc 01       	movw	r26, r24
    512e:	cb 01       	movw	r24, r22
    5130:	8b a3       	std	Y+35, r24	; 0x23
    5132:	9c a3       	std	Y+36, r25	; 0x24
    5134:	ad a3       	std	Y+37, r26	; 0x25
    5136:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5138:	6b a1       	ldd	r22, Y+35	; 0x23
    513a:	7c a1       	ldd	r23, Y+36	; 0x24
    513c:	8d a1       	ldd	r24, Y+37	; 0x25
    513e:	9e a1       	ldd	r25, Y+38	; 0x26
    5140:	20 e0       	ldi	r18, 0x00	; 0
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	40 e8       	ldi	r20, 0x80	; 128
    5146:	5f e3       	ldi	r21, 0x3F	; 63
    5148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    514c:	88 23       	and	r24, r24
    514e:	2c f4       	brge	.+10     	; 0x515a <SET_PASS+0xaa>
		__ticks = 1;
    5150:	81 e0       	ldi	r24, 0x01	; 1
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	9a a3       	std	Y+34, r25	; 0x22
    5156:	89 a3       	std	Y+33, r24	; 0x21
    5158:	3f c0       	rjmp	.+126    	; 0x51d8 <SET_PASS+0x128>
	else if (__tmp > 65535)
    515a:	6b a1       	ldd	r22, Y+35	; 0x23
    515c:	7c a1       	ldd	r23, Y+36	; 0x24
    515e:	8d a1       	ldd	r24, Y+37	; 0x25
    5160:	9e a1       	ldd	r25, Y+38	; 0x26
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	3f ef       	ldi	r19, 0xFF	; 255
    5166:	4f e7       	ldi	r20, 0x7F	; 127
    5168:	57 e4       	ldi	r21, 0x47	; 71
    516a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    516e:	18 16       	cp	r1, r24
    5170:	4c f5       	brge	.+82     	; 0x51c4 <SET_PASS+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5172:	6f a1       	ldd	r22, Y+39	; 0x27
    5174:	78 a5       	ldd	r23, Y+40	; 0x28
    5176:	89 a5       	ldd	r24, Y+41	; 0x29
    5178:	9a a5       	ldd	r25, Y+42	; 0x2a
    517a:	20 e0       	ldi	r18, 0x00	; 0
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	40 e2       	ldi	r20, 0x20	; 32
    5180:	51 e4       	ldi	r21, 0x41	; 65
    5182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	bc 01       	movw	r22, r24
    518c:	cd 01       	movw	r24, r26
    518e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5192:	dc 01       	movw	r26, r24
    5194:	cb 01       	movw	r24, r22
    5196:	9a a3       	std	Y+34, r25	; 0x22
    5198:	89 a3       	std	Y+33, r24	; 0x21
    519a:	0f c0       	rjmp	.+30     	; 0x51ba <SET_PASS+0x10a>
    519c:	88 ec       	ldi	r24, 0xC8	; 200
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	98 a3       	std	Y+32, r25	; 0x20
    51a2:	8f 8f       	std	Y+31, r24	; 0x1f
    51a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51a6:	98 a1       	ldd	r25, Y+32	; 0x20
    51a8:	01 97       	sbiw	r24, 0x01	; 1
    51aa:	f1 f7       	brne	.-4      	; 0x51a8 <SET_PASS+0xf8>
    51ac:	98 a3       	std	Y+32, r25	; 0x20
    51ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b0:	89 a1       	ldd	r24, Y+33	; 0x21
    51b2:	9a a1       	ldd	r25, Y+34	; 0x22
    51b4:	01 97       	sbiw	r24, 0x01	; 1
    51b6:	9a a3       	std	Y+34, r25	; 0x22
    51b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ba:	89 a1       	ldd	r24, Y+33	; 0x21
    51bc:	9a a1       	ldd	r25, Y+34	; 0x22
    51be:	00 97       	sbiw	r24, 0x00	; 0
    51c0:	69 f7       	brne	.-38     	; 0x519c <SET_PASS+0xec>
    51c2:	14 c0       	rjmp	.+40     	; 0x51ec <SET_PASS+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51c4:	6b a1       	ldd	r22, Y+35	; 0x23
    51c6:	7c a1       	ldd	r23, Y+36	; 0x24
    51c8:	8d a1       	ldd	r24, Y+37	; 0x25
    51ca:	9e a1       	ldd	r25, Y+38	; 0x26
    51cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d0:	dc 01       	movw	r26, r24
    51d2:	cb 01       	movw	r24, r22
    51d4:	9a a3       	std	Y+34, r25	; 0x22
    51d6:	89 a3       	std	Y+33, r24	; 0x21
    51d8:	89 a1       	ldd	r24, Y+33	; 0x21
    51da:	9a a1       	ldd	r25, Y+34	; 0x22
    51dc:	9e 8f       	std	Y+30, r25	; 0x1e
    51de:	8d 8f       	std	Y+29, r24	; 0x1d
    51e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51e4:	01 97       	sbiw	r24, 0x01	; 1
    51e6:	f1 f7       	brne	.-4      	; 0x51e4 <SET_PASS+0x134>
    51e8:	9e 8f       	std	Y+30, r25	; 0x1e
    51ea:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(CHARACTER_PREVIEW_TIME);
		Gotoxy(0+pass_counter,2);
    51ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    51ee:	62 e0       	ldi	r22, 0x02	; 2
    51f0:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteCharctr(PASSWORD_SYMBOL);
    51f4:	8a e2       	ldi	r24, 0x2A	; 42
    51f6:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	a8 ec       	ldi	r26, 0xC8	; 200
    5200:	b2 e4       	ldi	r27, 0x42	; 66
    5202:	89 8f       	std	Y+25, r24	; 0x19
    5204:	9a 8f       	std	Y+26, r25	; 0x1a
    5206:	ab 8f       	std	Y+27, r26	; 0x1b
    5208:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    520a:	69 8d       	ldd	r22, Y+25	; 0x19
    520c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    520e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	4a ef       	ldi	r20, 0xFA	; 250
    5218:	54 e4       	ldi	r21, 0x44	; 68
    521a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	8d 8b       	std	Y+21, r24	; 0x15
    5224:	9e 8b       	std	Y+22, r25	; 0x16
    5226:	af 8b       	std	Y+23, r26	; 0x17
    5228:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    522a:	6d 89       	ldd	r22, Y+21	; 0x15
    522c:	7e 89       	ldd	r23, Y+22	; 0x16
    522e:	8f 89       	ldd	r24, Y+23	; 0x17
    5230:	98 8d       	ldd	r25, Y+24	; 0x18
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	30 e0       	ldi	r19, 0x00	; 0
    5236:	40 e8       	ldi	r20, 0x80	; 128
    5238:	5f e3       	ldi	r21, 0x3F	; 63
    523a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    523e:	88 23       	and	r24, r24
    5240:	2c f4       	brge	.+10     	; 0x524c <SET_PASS+0x19c>
		__ticks = 1;
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	9c 8b       	std	Y+20, r25	; 0x14
    5248:	8b 8b       	std	Y+19, r24	; 0x13
    524a:	3f c0       	rjmp	.+126    	; 0x52ca <SET_PASS+0x21a>
	else if (__tmp > 65535)
    524c:	6d 89       	ldd	r22, Y+21	; 0x15
    524e:	7e 89       	ldd	r23, Y+22	; 0x16
    5250:	8f 89       	ldd	r24, Y+23	; 0x17
    5252:	98 8d       	ldd	r25, Y+24	; 0x18
    5254:	20 e0       	ldi	r18, 0x00	; 0
    5256:	3f ef       	ldi	r19, 0xFF	; 255
    5258:	4f e7       	ldi	r20, 0x7F	; 127
    525a:	57 e4       	ldi	r21, 0x47	; 71
    525c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5260:	18 16       	cp	r1, r24
    5262:	4c f5       	brge	.+82     	; 0x52b6 <SET_PASS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5264:	69 8d       	ldd	r22, Y+25	; 0x19
    5266:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    526a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 e2       	ldi	r20, 0x20	; 32
    5272:	51 e4       	ldi	r21, 0x41	; 65
    5274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5278:	dc 01       	movw	r26, r24
    527a:	cb 01       	movw	r24, r22
    527c:	bc 01       	movw	r22, r24
    527e:	cd 01       	movw	r24, r26
    5280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5284:	dc 01       	movw	r26, r24
    5286:	cb 01       	movw	r24, r22
    5288:	9c 8b       	std	Y+20, r25	; 0x14
    528a:	8b 8b       	std	Y+19, r24	; 0x13
    528c:	0f c0       	rjmp	.+30     	; 0x52ac <SET_PASS+0x1fc>
    528e:	88 ec       	ldi	r24, 0xC8	; 200
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	9a 8b       	std	Y+18, r25	; 0x12
    5294:	89 8b       	std	Y+17, r24	; 0x11
    5296:	89 89       	ldd	r24, Y+17	; 0x11
    5298:	9a 89       	ldd	r25, Y+18	; 0x12
    529a:	01 97       	sbiw	r24, 0x01	; 1
    529c:	f1 f7       	brne	.-4      	; 0x529a <SET_PASS+0x1ea>
    529e:	9a 8b       	std	Y+18, r25	; 0x12
    52a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52a2:	8b 89       	ldd	r24, Y+19	; 0x13
    52a4:	9c 89       	ldd	r25, Y+20	; 0x14
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	9c 8b       	std	Y+20, r25	; 0x14
    52aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ac:	8b 89       	ldd	r24, Y+19	; 0x13
    52ae:	9c 89       	ldd	r25, Y+20	; 0x14
    52b0:	00 97       	sbiw	r24, 0x00	; 0
    52b2:	69 f7       	brne	.-38     	; 0x528e <SET_PASS+0x1de>
    52b4:	14 c0       	rjmp	.+40     	; 0x52de <SET_PASS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52b6:	6d 89       	ldd	r22, Y+21	; 0x15
    52b8:	7e 89       	ldd	r23, Y+22	; 0x16
    52ba:	8f 89       	ldd	r24, Y+23	; 0x17
    52bc:	98 8d       	ldd	r25, Y+24	; 0x18
    52be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52c2:	dc 01       	movw	r26, r24
    52c4:	cb 01       	movw	r24, r22
    52c6:	9c 8b       	std	Y+20, r25	; 0x14
    52c8:	8b 8b       	std	Y+19, r24	; 0x13
    52ca:	8b 89       	ldd	r24, Y+19	; 0x13
    52cc:	9c 89       	ldd	r25, Y+20	; 0x14
    52ce:	98 8b       	std	Y+16, r25	; 0x10
    52d0:	8f 87       	std	Y+15, r24	; 0x0f
    52d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    52d4:	98 89       	ldd	r25, Y+16	; 0x10
    52d6:	01 97       	sbiw	r24, 0x01	; 1
    52d8:	f1 f7       	brne	.-4      	; 0x52d6 <SET_PASS+0x226>
    52da:	98 8b       	std	Y+16, r25	; 0x10
    52dc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		pass_counter++;
    52de:	8d a5       	ldd	r24, Y+45	; 0x2d
    52e0:	8f 5f       	subi	r24, 0xFF	; 255
    52e2:	8d a7       	std	Y+45, r24	; 0x2d
	//SET Password from 3 digit
	u8 pass_counter=0;
	u8 pass=0;
	u8 key_pressed = 0;

	while (pass_counter<PASS_SIZE)
    52e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    52e6:	84 30       	cpi	r24, 0x04	; 4
    52e8:	08 f4       	brcc	.+2      	; 0x52ec <SET_PASS+0x23c>
    52ea:	f0 ce       	rjmp	.-544    	; 0x50cc <SET_PASS+0x1c>
		_delay_ms(100);
		pass_counter++;

	}

	LCD_vidSendCommand(lcd_Clear);
    52ec:	81 e0       	ldi	r24, 0x01	; 1
    52ee:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
	//SAVE PASSWORD & SAVE THE STATUS AS SET
	EEPROM_vWrite(EEPROM_PASS_ADDRESS,pass);
    52f2:	85 ee       	ldi	r24, 0xE5	; 229
    52f4:	6c a5       	ldd	r22, Y+44	; 0x2c
    52f6:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	EEPROM_vWrite(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);
    52fa:	80 e0       	ldi	r24, 0x00	; 0
    52fc:	61 e0       	ldi	r22, 0x01	; 1
    52fe:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	LCD_vidWriteString("Password is Saved");
    5302:	85 e6       	ldi	r24, 0x65	; 101
    5304:	91 e0       	ldi	r25, 0x01	; 1
    5306:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	aa e7       	ldi	r26, 0x7A	; 122
    5310:	b4 e4       	ldi	r27, 0x44	; 68
    5312:	8b 87       	std	Y+11, r24	; 0x0b
    5314:	9c 87       	std	Y+12, r25	; 0x0c
    5316:	ad 87       	std	Y+13, r26	; 0x0d
    5318:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    531a:	6b 85       	ldd	r22, Y+11	; 0x0b
    531c:	7c 85       	ldd	r23, Y+12	; 0x0c
    531e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5320:	9e 85       	ldd	r25, Y+14	; 0x0e
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	4a ef       	ldi	r20, 0xFA	; 250
    5328:	54 e4       	ldi	r21, 0x44	; 68
    532a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    532e:	dc 01       	movw	r26, r24
    5330:	cb 01       	movw	r24, r22
    5332:	8f 83       	std	Y+7, r24	; 0x07
    5334:	98 87       	std	Y+8, r25	; 0x08
    5336:	a9 87       	std	Y+9, r26	; 0x09
    5338:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    533a:	6f 81       	ldd	r22, Y+7	; 0x07
    533c:	78 85       	ldd	r23, Y+8	; 0x08
    533e:	89 85       	ldd	r24, Y+9	; 0x09
    5340:	9a 85       	ldd	r25, Y+10	; 0x0a
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	40 e8       	ldi	r20, 0x80	; 128
    5348:	5f e3       	ldi	r21, 0x3F	; 63
    534a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    534e:	88 23       	and	r24, r24
    5350:	2c f4       	brge	.+10     	; 0x535c <SET_PASS+0x2ac>
		__ticks = 1;
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
    535a:	3f c0       	rjmp	.+126    	; 0x53da <SET_PASS+0x32a>
	else if (__tmp > 65535)
    535c:	6f 81       	ldd	r22, Y+7	; 0x07
    535e:	78 85       	ldd	r23, Y+8	; 0x08
    5360:	89 85       	ldd	r24, Y+9	; 0x09
    5362:	9a 85       	ldd	r25, Y+10	; 0x0a
    5364:	20 e0       	ldi	r18, 0x00	; 0
    5366:	3f ef       	ldi	r19, 0xFF	; 255
    5368:	4f e7       	ldi	r20, 0x7F	; 127
    536a:	57 e4       	ldi	r21, 0x47	; 71
    536c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5370:	18 16       	cp	r1, r24
    5372:	4c f5       	brge	.+82     	; 0x53c6 <SET_PASS+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5374:	6b 85       	ldd	r22, Y+11	; 0x0b
    5376:	7c 85       	ldd	r23, Y+12	; 0x0c
    5378:	8d 85       	ldd	r24, Y+13	; 0x0d
    537a:	9e 85       	ldd	r25, Y+14	; 0x0e
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	40 e2       	ldi	r20, 0x20	; 32
    5382:	51 e4       	ldi	r21, 0x41	; 65
    5384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	bc 01       	movw	r22, r24
    538e:	cd 01       	movw	r24, r26
    5390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	9e 83       	std	Y+6, r25	; 0x06
    539a:	8d 83       	std	Y+5, r24	; 0x05
    539c:	0f c0       	rjmp	.+30     	; 0x53bc <SET_PASS+0x30c>
    539e:	88 ec       	ldi	r24, 0xC8	; 200
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	9c 83       	std	Y+4, r25	; 0x04
    53a4:	8b 83       	std	Y+3, r24	; 0x03
    53a6:	8b 81       	ldd	r24, Y+3	; 0x03
    53a8:	9c 81       	ldd	r25, Y+4	; 0x04
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	f1 f7       	brne	.-4      	; 0x53aa <SET_PASS+0x2fa>
    53ae:	9c 83       	std	Y+4, r25	; 0x04
    53b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b2:	8d 81       	ldd	r24, Y+5	; 0x05
    53b4:	9e 81       	ldd	r25, Y+6	; 0x06
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	9e 83       	std	Y+6, r25	; 0x06
    53ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	00 97       	sbiw	r24, 0x00	; 0
    53c2:	69 f7       	brne	.-38     	; 0x539e <SET_PASS+0x2ee>
    53c4:	14 c0       	rjmp	.+40     	; 0x53ee <SET_PASS+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53c6:	6f 81       	ldd	r22, Y+7	; 0x07
    53c8:	78 85       	ldd	r23, Y+8	; 0x08
    53ca:	89 85       	ldd	r24, Y+9	; 0x09
    53cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53d2:	dc 01       	movw	r26, r24
    53d4:	cb 01       	movw	r24, r22
    53d6:	9e 83       	std	Y+6, r25	; 0x06
    53d8:	8d 83       	std	Y+5, r24	; 0x05
    53da:	8d 81       	ldd	r24, Y+5	; 0x05
    53dc:	9e 81       	ldd	r25, Y+6	; 0x06
    53de:	9a 83       	std	Y+2, r25	; 0x02
    53e0:	89 83       	std	Y+1, r24	; 0x01
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	9a 81       	ldd	r25, Y+2	; 0x02
    53e6:	01 97       	sbiw	r24, 0x01	; 1
    53e8:	f1 f7       	brne	.-4      	; 0x53e6 <SET_PASS+0x336>
    53ea:	9a 83       	std	Y+2, r25	; 0x02
    53ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vidSendCommand(lcd_Clear);
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

}
    53f4:	ad 96       	adiw	r28, 0x2d	; 45
    53f6:	0f b6       	in	r0, 0x3f	; 63
    53f8:	f8 94       	cli
    53fa:	de bf       	out	0x3e, r29	; 62
    53fc:	0f be       	out	0x3f, r0	; 63
    53fe:	cd bf       	out	0x3d, r28	; 61
    5400:	cf 91       	pop	r28
    5402:	df 91       	pop	r29
    5404:	08 95       	ret

00005406 <ENTER_PASS>:


void ENTER_PASS(void)
{
    5406:	df 93       	push	r29
    5408:	cf 93       	push	r28
    540a:	cd b7       	in	r28, 0x3d	; 61
    540c:	de b7       	in	r29, 0x3e	; 62
    540e:	ad 97       	sbiw	r28, 0x2d	; 45
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	f8 94       	cli
    5414:	de bf       	out	0x3e, r29	; 62
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	cd bf       	out	0x3d, r28	; 61
	u8 key_pressed = 0;
    541a:	1d a6       	std	Y+45, r1	; 0x2d

	u8 pass_counter=0;
    541c:	1c a6       	std	Y+44, r1	; 0x2c
	u8 pass_entered=0;
    541e:	1b a6       	std	Y+43, r1	; 0x2b
    5420:	0c c1       	rjmp	.+536    	; 0x563a <ENTER_PASS+0x234>

	while (pass_counter<PASS_SIZE)
	{
		key_pressed = NOT_PRESSED;
    5422:	8f ef       	ldi	r24, 0xFF	; 255
    5424:	8d a7       	std	Y+45, r24	; 0x2d
    5426:	03 c0       	rjmp	.+6      	; 0x542e <ENTER_PASS+0x28>
		while (key_pressed == NOT_PRESSED)
		{
			key_pressed = KPD_GetKey();
    5428:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    542c:	8d a7       	std	Y+45, r24	; 0x2d
	u8 pass_entered=0;

	while (pass_counter<PASS_SIZE)
	{
		key_pressed = NOT_PRESSED;
		while (key_pressed == NOT_PRESSED)
    542e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5430:	8f 3f       	cpi	r24, 0xFF	; 255
    5432:	d1 f3       	breq	.-12     	; 0x5428 <ENTER_PASS+0x22>
		{
			key_pressed = KPD_GetKey();
		}
		//equation to calculate the number entered and put it into a variable
		//we enter 1 ,1 , 1 , 2 it makes it 1112
		pass_entered = pass_entered * 10 + (key_pressed - '0');
    5434:	8b a5       	ldd	r24, Y+43	; 0x2b
    5436:	88 2f       	mov	r24, r24
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	9c 01       	movw	r18, r24
    543c:	22 0f       	add	r18, r18
    543e:	33 1f       	adc	r19, r19
    5440:	c9 01       	movw	r24, r18
    5442:	88 0f       	add	r24, r24
    5444:	99 1f       	adc	r25, r25
    5446:	88 0f       	add	r24, r24
    5448:	99 1f       	adc	r25, r25
    544a:	82 0f       	add	r24, r18
    544c:	93 1f       	adc	r25, r19
    544e:	98 2f       	mov	r25, r24
    5450:	8d a5       	ldd	r24, Y+45	; 0x2d
    5452:	89 0f       	add	r24, r25
    5454:	80 53       	subi	r24, 0x30	; 48
    5456:	8b a7       	std	Y+43, r24	; 0x2b

		LCD_vidWriteCharctr(key_pressed);
    5458:	8d a5       	ldd	r24, Y+45	; 0x2d
    545a:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	a8 e4       	ldi	r26, 0x48	; 72
    5464:	b3 e4       	ldi	r27, 0x43	; 67
    5466:	8f a3       	std	Y+39, r24	; 0x27
    5468:	98 a7       	std	Y+40, r25	; 0x28
    546a:	a9 a7       	std	Y+41, r26	; 0x29
    546c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    546e:	6f a1       	ldd	r22, Y+39	; 0x27
    5470:	78 a5       	ldd	r23, Y+40	; 0x28
    5472:	89 a5       	ldd	r24, Y+41	; 0x29
    5474:	9a a5       	ldd	r25, Y+42	; 0x2a
    5476:	20 e0       	ldi	r18, 0x00	; 0
    5478:	30 e0       	ldi	r19, 0x00	; 0
    547a:	4a ef       	ldi	r20, 0xFA	; 250
    547c:	54 e4       	ldi	r21, 0x44	; 68
    547e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5482:	dc 01       	movw	r26, r24
    5484:	cb 01       	movw	r24, r22
    5486:	8b a3       	std	Y+35, r24	; 0x23
    5488:	9c a3       	std	Y+36, r25	; 0x24
    548a:	ad a3       	std	Y+37, r26	; 0x25
    548c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    548e:	6b a1       	ldd	r22, Y+35	; 0x23
    5490:	7c a1       	ldd	r23, Y+36	; 0x24
    5492:	8d a1       	ldd	r24, Y+37	; 0x25
    5494:	9e a1       	ldd	r25, Y+38	; 0x26
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	40 e8       	ldi	r20, 0x80	; 128
    549c:	5f e3       	ldi	r21, 0x3F	; 63
    549e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54a2:	88 23       	and	r24, r24
    54a4:	2c f4       	brge	.+10     	; 0x54b0 <ENTER_PASS+0xaa>
		__ticks = 1;
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	9a a3       	std	Y+34, r25	; 0x22
    54ac:	89 a3       	std	Y+33, r24	; 0x21
    54ae:	3f c0       	rjmp	.+126    	; 0x552e <ENTER_PASS+0x128>
	else if (__tmp > 65535)
    54b0:	6b a1       	ldd	r22, Y+35	; 0x23
    54b2:	7c a1       	ldd	r23, Y+36	; 0x24
    54b4:	8d a1       	ldd	r24, Y+37	; 0x25
    54b6:	9e a1       	ldd	r25, Y+38	; 0x26
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	3f ef       	ldi	r19, 0xFF	; 255
    54bc:	4f e7       	ldi	r20, 0x7F	; 127
    54be:	57 e4       	ldi	r21, 0x47	; 71
    54c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54c4:	18 16       	cp	r1, r24
    54c6:	4c f5       	brge	.+82     	; 0x551a <ENTER_PASS+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c8:	6f a1       	ldd	r22, Y+39	; 0x27
    54ca:	78 a5       	ldd	r23, Y+40	; 0x28
    54cc:	89 a5       	ldd	r24, Y+41	; 0x29
    54ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    54d0:	20 e0       	ldi	r18, 0x00	; 0
    54d2:	30 e0       	ldi	r19, 0x00	; 0
    54d4:	40 e2       	ldi	r20, 0x20	; 32
    54d6:	51 e4       	ldi	r21, 0x41	; 65
    54d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54dc:	dc 01       	movw	r26, r24
    54de:	cb 01       	movw	r24, r22
    54e0:	bc 01       	movw	r22, r24
    54e2:	cd 01       	movw	r24, r26
    54e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e8:	dc 01       	movw	r26, r24
    54ea:	cb 01       	movw	r24, r22
    54ec:	9a a3       	std	Y+34, r25	; 0x22
    54ee:	89 a3       	std	Y+33, r24	; 0x21
    54f0:	0f c0       	rjmp	.+30     	; 0x5510 <ENTER_PASS+0x10a>
    54f2:	88 ec       	ldi	r24, 0xC8	; 200
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	98 a3       	std	Y+32, r25	; 0x20
    54f8:	8f 8f       	std	Y+31, r24	; 0x1f
    54fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    54fc:	98 a1       	ldd	r25, Y+32	; 0x20
    54fe:	01 97       	sbiw	r24, 0x01	; 1
    5500:	f1 f7       	brne	.-4      	; 0x54fe <ENTER_PASS+0xf8>
    5502:	98 a3       	std	Y+32, r25	; 0x20
    5504:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5506:	89 a1       	ldd	r24, Y+33	; 0x21
    5508:	9a a1       	ldd	r25, Y+34	; 0x22
    550a:	01 97       	sbiw	r24, 0x01	; 1
    550c:	9a a3       	std	Y+34, r25	; 0x22
    550e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5510:	89 a1       	ldd	r24, Y+33	; 0x21
    5512:	9a a1       	ldd	r25, Y+34	; 0x22
    5514:	00 97       	sbiw	r24, 0x00	; 0
    5516:	69 f7       	brne	.-38     	; 0x54f2 <ENTER_PASS+0xec>
    5518:	14 c0       	rjmp	.+40     	; 0x5542 <ENTER_PASS+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    551a:	6b a1       	ldd	r22, Y+35	; 0x23
    551c:	7c a1       	ldd	r23, Y+36	; 0x24
    551e:	8d a1       	ldd	r24, Y+37	; 0x25
    5520:	9e a1       	ldd	r25, Y+38	; 0x26
    5522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5526:	dc 01       	movw	r26, r24
    5528:	cb 01       	movw	r24, r22
    552a:	9a a3       	std	Y+34, r25	; 0x22
    552c:	89 a3       	std	Y+33, r24	; 0x21
    552e:	89 a1       	ldd	r24, Y+33	; 0x21
    5530:	9a a1       	ldd	r25, Y+34	; 0x22
    5532:	9e 8f       	std	Y+30, r25	; 0x1e
    5534:	8d 8f       	std	Y+29, r24	; 0x1d
    5536:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5538:	9e 8d       	ldd	r25, Y+30	; 0x1e
    553a:	01 97       	sbiw	r24, 0x01	; 1
    553c:	f1 f7       	brne	.-4      	; 0x553a <ENTER_PASS+0x134>
    553e:	9e 8f       	std	Y+30, r25	; 0x1e
    5540:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(CHARACTER_PREVIEW_TIME);
		//move cursor to the previous location To hide the pass entered
		Gotoxy(0+pass_counter,2);
    5542:	8c a5       	ldd	r24, Y+44	; 0x2c
    5544:	62 e0       	ldi	r22, 0x02	; 2
    5546:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteCharctr(PASSWORD_SYMBOL);
    554a:	8a e2       	ldi	r24, 0x2A	; 42
    554c:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	a8 ec       	ldi	r26, 0xC8	; 200
    5556:	b2 e4       	ldi	r27, 0x42	; 66
    5558:	89 8f       	std	Y+25, r24	; 0x19
    555a:	9a 8f       	std	Y+26, r25	; 0x1a
    555c:	ab 8f       	std	Y+27, r26	; 0x1b
    555e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5560:	69 8d       	ldd	r22, Y+25	; 0x19
    5562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5568:	20 e0       	ldi	r18, 0x00	; 0
    556a:	30 e0       	ldi	r19, 0x00	; 0
    556c:	4a ef       	ldi	r20, 0xFA	; 250
    556e:	54 e4       	ldi	r21, 0x44	; 68
    5570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5574:	dc 01       	movw	r26, r24
    5576:	cb 01       	movw	r24, r22
    5578:	8d 8b       	std	Y+21, r24	; 0x15
    557a:	9e 8b       	std	Y+22, r25	; 0x16
    557c:	af 8b       	std	Y+23, r26	; 0x17
    557e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5580:	6d 89       	ldd	r22, Y+21	; 0x15
    5582:	7e 89       	ldd	r23, Y+22	; 0x16
    5584:	8f 89       	ldd	r24, Y+23	; 0x17
    5586:	98 8d       	ldd	r25, Y+24	; 0x18
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	40 e8       	ldi	r20, 0x80	; 128
    558e:	5f e3       	ldi	r21, 0x3F	; 63
    5590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5594:	88 23       	and	r24, r24
    5596:	2c f4       	brge	.+10     	; 0x55a2 <ENTER_PASS+0x19c>
		__ticks = 1;
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	9c 8b       	std	Y+20, r25	; 0x14
    559e:	8b 8b       	std	Y+19, r24	; 0x13
    55a0:	3f c0       	rjmp	.+126    	; 0x5620 <ENTER_PASS+0x21a>
	else if (__tmp > 65535)
    55a2:	6d 89       	ldd	r22, Y+21	; 0x15
    55a4:	7e 89       	ldd	r23, Y+22	; 0x16
    55a6:	8f 89       	ldd	r24, Y+23	; 0x17
    55a8:	98 8d       	ldd	r25, Y+24	; 0x18
    55aa:	20 e0       	ldi	r18, 0x00	; 0
    55ac:	3f ef       	ldi	r19, 0xFF	; 255
    55ae:	4f e7       	ldi	r20, 0x7F	; 127
    55b0:	57 e4       	ldi	r21, 0x47	; 71
    55b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55b6:	18 16       	cp	r1, r24
    55b8:	4c f5       	brge	.+82     	; 0x560c <ENTER_PASS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ba:	69 8d       	ldd	r22, Y+25	; 0x19
    55bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55c2:	20 e0       	ldi	r18, 0x00	; 0
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	40 e2       	ldi	r20, 0x20	; 32
    55c8:	51 e4       	ldi	r21, 0x41	; 65
    55ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	bc 01       	movw	r22, r24
    55d4:	cd 01       	movw	r24, r26
    55d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55da:	dc 01       	movw	r26, r24
    55dc:	cb 01       	movw	r24, r22
    55de:	9c 8b       	std	Y+20, r25	; 0x14
    55e0:	8b 8b       	std	Y+19, r24	; 0x13
    55e2:	0f c0       	rjmp	.+30     	; 0x5602 <ENTER_PASS+0x1fc>
    55e4:	88 ec       	ldi	r24, 0xC8	; 200
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	9a 8b       	std	Y+18, r25	; 0x12
    55ea:	89 8b       	std	Y+17, r24	; 0x11
    55ec:	89 89       	ldd	r24, Y+17	; 0x11
    55ee:	9a 89       	ldd	r25, Y+18	; 0x12
    55f0:	01 97       	sbiw	r24, 0x01	; 1
    55f2:	f1 f7       	brne	.-4      	; 0x55f0 <ENTER_PASS+0x1ea>
    55f4:	9a 8b       	std	Y+18, r25	; 0x12
    55f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55f8:	8b 89       	ldd	r24, Y+19	; 0x13
    55fa:	9c 89       	ldd	r25, Y+20	; 0x14
    55fc:	01 97       	sbiw	r24, 0x01	; 1
    55fe:	9c 8b       	std	Y+20, r25	; 0x14
    5600:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5602:	8b 89       	ldd	r24, Y+19	; 0x13
    5604:	9c 89       	ldd	r25, Y+20	; 0x14
    5606:	00 97       	sbiw	r24, 0x00	; 0
    5608:	69 f7       	brne	.-38     	; 0x55e4 <ENTER_PASS+0x1de>
    560a:	14 c0       	rjmp	.+40     	; 0x5634 <ENTER_PASS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    560c:	6d 89       	ldd	r22, Y+21	; 0x15
    560e:	7e 89       	ldd	r23, Y+22	; 0x16
    5610:	8f 89       	ldd	r24, Y+23	; 0x17
    5612:	98 8d       	ldd	r25, Y+24	; 0x18
    5614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5618:	dc 01       	movw	r26, r24
    561a:	cb 01       	movw	r24, r22
    561c:	9c 8b       	std	Y+20, r25	; 0x14
    561e:	8b 8b       	std	Y+19, r24	; 0x13
    5620:	8b 89       	ldd	r24, Y+19	; 0x13
    5622:	9c 89       	ldd	r25, Y+20	; 0x14
    5624:	98 8b       	std	Y+16, r25	; 0x10
    5626:	8f 87       	std	Y+15, r24	; 0x0f
    5628:	8f 85       	ldd	r24, Y+15	; 0x0f
    562a:	98 89       	ldd	r25, Y+16	; 0x10
    562c:	01 97       	sbiw	r24, 0x01	; 1
    562e:	f1 f7       	brne	.-4      	; 0x562c <ENTER_PASS+0x226>
    5630:	98 8b       	std	Y+16, r25	; 0x10
    5632:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		pass_counter++;
    5634:	8c a5       	ldd	r24, Y+44	; 0x2c
    5636:	8f 5f       	subi	r24, 0xFF	; 255
    5638:	8c a7       	std	Y+44, r24	; 0x2c
	u8 key_pressed = 0;

	u8 pass_counter=0;
	u8 pass_entered=0;

	while (pass_counter<PASS_SIZE)
    563a:	8c a5       	ldd	r24, Y+44	; 0x2c
    563c:	84 30       	cpi	r24, 0x04	; 4
    563e:	08 f4       	brcc	.+2      	; 0x5642 <ENTER_PASS+0x23c>
    5640:	f0 ce       	rjmp	.-544    	; 0x5422 <ENTER_PASS+0x1c>
		LCD_vidWriteCharctr(PASSWORD_SYMBOL);
		_delay_ms(100);
		pass_counter++;

	}
	LCD_vidSendCommand(lcd_Clear);
    5642:	81 e0       	ldi	r24, 0x01	; 1
    5644:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

	//SAVE PASSWORD & SAVE THE STATUS AS SET
	EEPROM_vWrite(EEPROM_CHECK_PASS_ADDRESS,pass_entered);
    5648:	8d ee       	ldi	r24, 0xED	; 237
    564a:	6b a5       	ldd	r22, Y+43	; 0x2b
    564c:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
    5650:	80 e0       	ldi	r24, 0x00	; 0
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	aa e7       	ldi	r26, 0x7A	; 122
    5656:	b4 e4       	ldi	r27, 0x44	; 68
    5658:	8b 87       	std	Y+11, r24	; 0x0b
    565a:	9c 87       	std	Y+12, r25	; 0x0c
    565c:	ad 87       	std	Y+13, r26	; 0x0d
    565e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5660:	6b 85       	ldd	r22, Y+11	; 0x0b
    5662:	7c 85       	ldd	r23, Y+12	; 0x0c
    5664:	8d 85       	ldd	r24, Y+13	; 0x0d
    5666:	9e 85       	ldd	r25, Y+14	; 0x0e
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	4a ef       	ldi	r20, 0xFA	; 250
    566e:	54 e4       	ldi	r21, 0x44	; 68
    5670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	8f 83       	std	Y+7, r24	; 0x07
    567a:	98 87       	std	Y+8, r25	; 0x08
    567c:	a9 87       	std	Y+9, r26	; 0x09
    567e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5680:	6f 81       	ldd	r22, Y+7	; 0x07
    5682:	78 85       	ldd	r23, Y+8	; 0x08
    5684:	89 85       	ldd	r24, Y+9	; 0x09
    5686:	9a 85       	ldd	r25, Y+10	; 0x0a
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	40 e8       	ldi	r20, 0x80	; 128
    568e:	5f e3       	ldi	r21, 0x3F	; 63
    5690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5694:	88 23       	and	r24, r24
    5696:	2c f4       	brge	.+10     	; 0x56a2 <ENTER_PASS+0x29c>
		__ticks = 1;
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	9e 83       	std	Y+6, r25	; 0x06
    569e:	8d 83       	std	Y+5, r24	; 0x05
    56a0:	3f c0       	rjmp	.+126    	; 0x5720 <ENTER_PASS+0x31a>
	else if (__tmp > 65535)
    56a2:	6f 81       	ldd	r22, Y+7	; 0x07
    56a4:	78 85       	ldd	r23, Y+8	; 0x08
    56a6:	89 85       	ldd	r24, Y+9	; 0x09
    56a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	3f ef       	ldi	r19, 0xFF	; 255
    56ae:	4f e7       	ldi	r20, 0x7F	; 127
    56b0:	57 e4       	ldi	r21, 0x47	; 71
    56b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    56b6:	18 16       	cp	r1, r24
    56b8:	4c f5       	brge	.+82     	; 0x570c <ENTER_PASS+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    56bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    56be:	8d 85       	ldd	r24, Y+13	; 0x0d
    56c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e2       	ldi	r20, 0x20	; 32
    56c8:	51 e4       	ldi	r21, 0x41	; 65
    56ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	bc 01       	movw	r22, r24
    56d4:	cd 01       	movw	r24, r26
    56d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56da:	dc 01       	movw	r26, r24
    56dc:	cb 01       	movw	r24, r22
    56de:	9e 83       	std	Y+6, r25	; 0x06
    56e0:	8d 83       	std	Y+5, r24	; 0x05
    56e2:	0f c0       	rjmp	.+30     	; 0x5702 <ENTER_PASS+0x2fc>
    56e4:	88 ec       	ldi	r24, 0xC8	; 200
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	9c 83       	std	Y+4, r25	; 0x04
    56ea:	8b 83       	std	Y+3, r24	; 0x03
    56ec:	8b 81       	ldd	r24, Y+3	; 0x03
    56ee:	9c 81       	ldd	r25, Y+4	; 0x04
    56f0:	01 97       	sbiw	r24, 0x01	; 1
    56f2:	f1 f7       	brne	.-4      	; 0x56f0 <ENTER_PASS+0x2ea>
    56f4:	9c 83       	std	Y+4, r25	; 0x04
    56f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56f8:	8d 81       	ldd	r24, Y+5	; 0x05
    56fa:	9e 81       	ldd	r25, Y+6	; 0x06
    56fc:	01 97       	sbiw	r24, 0x01	; 1
    56fe:	9e 83       	std	Y+6, r25	; 0x06
    5700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5702:	8d 81       	ldd	r24, Y+5	; 0x05
    5704:	9e 81       	ldd	r25, Y+6	; 0x06
    5706:	00 97       	sbiw	r24, 0x00	; 0
    5708:	69 f7       	brne	.-38     	; 0x56e4 <ENTER_PASS+0x2de>
    570a:	14 c0       	rjmp	.+40     	; 0x5734 <ENTER_PASS+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    570c:	6f 81       	ldd	r22, Y+7	; 0x07
    570e:	78 85       	ldd	r23, Y+8	; 0x08
    5710:	89 85       	ldd	r24, Y+9	; 0x09
    5712:	9a 85       	ldd	r25, Y+10	; 0x0a
    5714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5718:	dc 01       	movw	r26, r24
    571a:	cb 01       	movw	r24, r22
    571c:	9e 83       	std	Y+6, r25	; 0x06
    571e:	8d 83       	std	Y+5, r24	; 0x05
    5720:	8d 81       	ldd	r24, Y+5	; 0x05
    5722:	9e 81       	ldd	r25, Y+6	; 0x06
    5724:	9a 83       	std	Y+2, r25	; 0x02
    5726:	89 83       	std	Y+1, r24	; 0x01
    5728:	89 81       	ldd	r24, Y+1	; 0x01
    572a:	9a 81       	ldd	r25, Y+2	; 0x02
    572c:	01 97       	sbiw	r24, 0x01	; 1
    572e:	f1 f7       	brne	.-4      	; 0x572c <ENTER_PASS+0x326>
    5730:	9a 83       	std	Y+2, r25	; 0x02
    5732:	89 83       	std	Y+1, r24	; 0x01
	//EEPROM_vWrite(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);
	_delay_ms(1000);
	LCD_vidSendCommand(lcd_Clear);
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

}
    573a:	ad 96       	adiw	r28, 0x2d	; 45
    573c:	0f b6       	in	r0, 0x3f	; 63
    573e:	f8 94       	cli
    5740:	de bf       	out	0x3e, r29	; 62
    5742:	0f be       	out	0x3f, r0	; 63
    5744:	cd bf       	out	0x3d, r28	; 61
    5746:	cf 91       	pop	r28
    5748:	df 91       	pop	r29
    574a:	08 95       	ret

0000574c <ISR_LM35_Timer0>:


void ISR_LM35_Timer0(void)
{
    574c:	df 93       	push	r29
    574e:	cf 93       	push	r28
    5750:	00 d0       	rcall	.+0      	; 0x5752 <ISR_LM35_Timer0+0x6>
    5752:	00 d0       	rcall	.+0      	; 0x5754 <ISR_LM35_Timer0+0x8>
    5754:	00 d0       	rcall	.+0      	; 0x5756 <ISR_LM35_Timer0+0xa>
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u8Counter ;


	if(Local_u8Counter == 5)
    575a:	80 91 c0 01 	lds	r24, 0x01C0
    575e:	90 91 c1 01 	lds	r25, 0x01C1
    5762:	85 30       	cpi	r24, 0x05	; 5
    5764:	91 05       	cpc	r25, r1
    5766:	09 f0       	breq	.+2      	; 0x576a <ISR_LM35_Timer0+0x1e>
    5768:	44 c0       	rjmp	.+136    	; 0x57f2 <ISR_LM35_Timer0+0xa6>
	{
		u16 read=0;
    576a:	1e 82       	std	Y+6, r1	; 0x06
    576c:	1d 82       	std	Y+5, r1	; 0x05


		u32 millivolt=0;
    576e:	19 82       	std	Y+1, r1	; 0x01
    5770:	1a 82       	std	Y+2, r1	; 0x02
    5772:	1b 82       	std	Y+3, r1	; 0x03
    5774:	1c 82       	std	Y+4, r1	; 0x04
		read =ADC_Read(Channel_A0);
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_Read>
    577c:	9e 83       	std	Y+6, r25	; 0x06
    577e:	8d 83       	std	Y+5, r24	; 0x05
		millivolt=(((u32)read*5000)/1024);
    5780:	8d 81       	ldd	r24, Y+5	; 0x05
    5782:	9e 81       	ldd	r25, Y+6	; 0x06
    5784:	cc 01       	movw	r24, r24
    5786:	a0 e0       	ldi	r26, 0x00	; 0
    5788:	b0 e0       	ldi	r27, 0x00	; 0
    578a:	28 e8       	ldi	r18, 0x88	; 136
    578c:	33 e1       	ldi	r19, 0x13	; 19
    578e:	40 e0       	ldi	r20, 0x00	; 0
    5790:	50 e0       	ldi	r21, 0x00	; 0
    5792:	bc 01       	movw	r22, r24
    5794:	cd 01       	movw	r24, r26
    5796:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__mulsi3>
    579a:	dc 01       	movw	r26, r24
    579c:	cb 01       	movw	r24, r22
    579e:	07 2e       	mov	r0, r23
    57a0:	7a e0       	ldi	r23, 0x0A	; 10
    57a2:	b6 95       	lsr	r27
    57a4:	a7 95       	ror	r26
    57a6:	97 95       	ror	r25
    57a8:	87 95       	ror	r24
    57aa:	7a 95       	dec	r23
    57ac:	d1 f7       	brne	.-12     	; 0x57a2 <ISR_LM35_Timer0+0x56>
    57ae:	70 2d       	mov	r23, r0
    57b0:	89 83       	std	Y+1, r24	; 0x01
    57b2:	9a 83       	std	Y+2, r25	; 0x02
    57b4:	ab 83       	std	Y+3, r26	; 0x03
    57b6:	bc 83       	std	Y+4, r27	; 0x04
		Temperature = (millivolt + 5) / 10;
    57b8:	89 81       	ldd	r24, Y+1	; 0x01
    57ba:	9a 81       	ldd	r25, Y+2	; 0x02
    57bc:	ab 81       	ldd	r26, Y+3	; 0x03
    57be:	bc 81       	ldd	r27, Y+4	; 0x04
    57c0:	05 96       	adiw	r24, 0x05	; 5
    57c2:	a1 1d       	adc	r26, r1
    57c4:	b1 1d       	adc	r27, r1
    57c6:	2a e0       	ldi	r18, 0x0A	; 10
    57c8:	30 e0       	ldi	r19, 0x00	; 0
    57ca:	40 e0       	ldi	r20, 0x00	; 0
    57cc:	50 e0       	ldi	r21, 0x00	; 0
    57ce:	bc 01       	movw	r22, r24
    57d0:	cd 01       	movw	r24, r26
    57d2:	0e 94 3d 2c 	call	0x587a	; 0x587a <__udivmodsi4>
    57d6:	da 01       	movw	r26, r20
    57d8:	c9 01       	movw	r24, r18
    57da:	80 93 bc 01 	sts	0x01BC, r24
    57de:	90 93 bd 01 	sts	0x01BD, r25
    57e2:	a0 93 be 01 	sts	0x01BE, r26
    57e6:	b0 93 bf 01 	sts	0x01BF, r27
		Local_u8Counter=0;
    57ea:	10 92 c1 01 	sts	0x01C1, r1
    57ee:	10 92 c0 01 	sts	0x01C0, r1
	}
	Local_u8Counter++;
    57f2:	80 91 c0 01 	lds	r24, 0x01C0
    57f6:	90 91 c1 01 	lds	r25, 0x01C1
    57fa:	01 96       	adiw	r24, 0x01	; 1
    57fc:	90 93 c1 01 	sts	0x01C1, r25
    5800:	80 93 c0 01 	sts	0x01C0, r24
}
    5804:	26 96       	adiw	r28, 0x06	; 6
    5806:	0f b6       	in	r0, 0x3f	; 63
    5808:	f8 94       	cli
    580a:	de bf       	out	0x3e, r29	; 62
    580c:	0f be       	out	0x3f, r0	; 63
    580e:	cd bf       	out	0x3d, r28	; 61
    5810:	cf 91       	pop	r28
    5812:	df 91       	pop	r29
    5814:	08 95       	ret

00005816 <__mulsi3>:
    5816:	62 9f       	mul	r22, r18
    5818:	d0 01       	movw	r26, r0
    581a:	73 9f       	mul	r23, r19
    581c:	f0 01       	movw	r30, r0
    581e:	82 9f       	mul	r24, r18
    5820:	e0 0d       	add	r30, r0
    5822:	f1 1d       	adc	r31, r1
    5824:	64 9f       	mul	r22, r20
    5826:	e0 0d       	add	r30, r0
    5828:	f1 1d       	adc	r31, r1
    582a:	92 9f       	mul	r25, r18
    582c:	f0 0d       	add	r31, r0
    582e:	83 9f       	mul	r24, r19
    5830:	f0 0d       	add	r31, r0
    5832:	74 9f       	mul	r23, r20
    5834:	f0 0d       	add	r31, r0
    5836:	65 9f       	mul	r22, r21
    5838:	f0 0d       	add	r31, r0
    583a:	99 27       	eor	r25, r25
    583c:	72 9f       	mul	r23, r18
    583e:	b0 0d       	add	r27, r0
    5840:	e1 1d       	adc	r30, r1
    5842:	f9 1f       	adc	r31, r25
    5844:	63 9f       	mul	r22, r19
    5846:	b0 0d       	add	r27, r0
    5848:	e1 1d       	adc	r30, r1
    584a:	f9 1f       	adc	r31, r25
    584c:	bd 01       	movw	r22, r26
    584e:	cf 01       	movw	r24, r30
    5850:	11 24       	eor	r1, r1
    5852:	08 95       	ret

00005854 <__divmodhi4>:
    5854:	97 fb       	bst	r25, 7
    5856:	09 2e       	mov	r0, r25
    5858:	07 26       	eor	r0, r23
    585a:	0a d0       	rcall	.+20     	; 0x5870 <__divmodhi4_neg1>
    585c:	77 fd       	sbrc	r23, 7
    585e:	04 d0       	rcall	.+8      	; 0x5868 <__divmodhi4_neg2>
    5860:	2e d0       	rcall	.+92     	; 0x58be <__udivmodhi4>
    5862:	06 d0       	rcall	.+12     	; 0x5870 <__divmodhi4_neg1>
    5864:	00 20       	and	r0, r0
    5866:	1a f4       	brpl	.+6      	; 0x586e <__divmodhi4_exit>

00005868 <__divmodhi4_neg2>:
    5868:	70 95       	com	r23
    586a:	61 95       	neg	r22
    586c:	7f 4f       	sbci	r23, 0xFF	; 255

0000586e <__divmodhi4_exit>:
    586e:	08 95       	ret

00005870 <__divmodhi4_neg1>:
    5870:	f6 f7       	brtc	.-4      	; 0x586e <__divmodhi4_exit>
    5872:	90 95       	com	r25
    5874:	81 95       	neg	r24
    5876:	9f 4f       	sbci	r25, 0xFF	; 255
    5878:	08 95       	ret

0000587a <__udivmodsi4>:
    587a:	a1 e2       	ldi	r26, 0x21	; 33
    587c:	1a 2e       	mov	r1, r26
    587e:	aa 1b       	sub	r26, r26
    5880:	bb 1b       	sub	r27, r27
    5882:	fd 01       	movw	r30, r26
    5884:	0d c0       	rjmp	.+26     	; 0x58a0 <__udivmodsi4_ep>

00005886 <__udivmodsi4_loop>:
    5886:	aa 1f       	adc	r26, r26
    5888:	bb 1f       	adc	r27, r27
    588a:	ee 1f       	adc	r30, r30
    588c:	ff 1f       	adc	r31, r31
    588e:	a2 17       	cp	r26, r18
    5890:	b3 07       	cpc	r27, r19
    5892:	e4 07       	cpc	r30, r20
    5894:	f5 07       	cpc	r31, r21
    5896:	20 f0       	brcs	.+8      	; 0x58a0 <__udivmodsi4_ep>
    5898:	a2 1b       	sub	r26, r18
    589a:	b3 0b       	sbc	r27, r19
    589c:	e4 0b       	sbc	r30, r20
    589e:	f5 0b       	sbc	r31, r21

000058a0 <__udivmodsi4_ep>:
    58a0:	66 1f       	adc	r22, r22
    58a2:	77 1f       	adc	r23, r23
    58a4:	88 1f       	adc	r24, r24
    58a6:	99 1f       	adc	r25, r25
    58a8:	1a 94       	dec	r1
    58aa:	69 f7       	brne	.-38     	; 0x5886 <__udivmodsi4_loop>
    58ac:	60 95       	com	r22
    58ae:	70 95       	com	r23
    58b0:	80 95       	com	r24
    58b2:	90 95       	com	r25
    58b4:	9b 01       	movw	r18, r22
    58b6:	ac 01       	movw	r20, r24
    58b8:	bd 01       	movw	r22, r26
    58ba:	cf 01       	movw	r24, r30
    58bc:	08 95       	ret

000058be <__udivmodhi4>:
    58be:	aa 1b       	sub	r26, r26
    58c0:	bb 1b       	sub	r27, r27
    58c2:	51 e1       	ldi	r21, 0x11	; 17
    58c4:	07 c0       	rjmp	.+14     	; 0x58d4 <__udivmodhi4_ep>

000058c6 <__udivmodhi4_loop>:
    58c6:	aa 1f       	adc	r26, r26
    58c8:	bb 1f       	adc	r27, r27
    58ca:	a6 17       	cp	r26, r22
    58cc:	b7 07       	cpc	r27, r23
    58ce:	10 f0       	brcs	.+4      	; 0x58d4 <__udivmodhi4_ep>
    58d0:	a6 1b       	sub	r26, r22
    58d2:	b7 0b       	sbc	r27, r23

000058d4 <__udivmodhi4_ep>:
    58d4:	88 1f       	adc	r24, r24
    58d6:	99 1f       	adc	r25, r25
    58d8:	5a 95       	dec	r21
    58da:	a9 f7       	brne	.-22     	; 0x58c6 <__udivmodhi4_loop>
    58dc:	80 95       	com	r24
    58de:	90 95       	com	r25
    58e0:	bc 01       	movw	r22, r24
    58e2:	cd 01       	movw	r24, r26
    58e4:	08 95       	ret

000058e6 <__prologue_saves__>:
    58e6:	2f 92       	push	r2
    58e8:	3f 92       	push	r3
    58ea:	4f 92       	push	r4
    58ec:	5f 92       	push	r5
    58ee:	6f 92       	push	r6
    58f0:	7f 92       	push	r7
    58f2:	8f 92       	push	r8
    58f4:	9f 92       	push	r9
    58f6:	af 92       	push	r10
    58f8:	bf 92       	push	r11
    58fa:	cf 92       	push	r12
    58fc:	df 92       	push	r13
    58fe:	ef 92       	push	r14
    5900:	ff 92       	push	r15
    5902:	0f 93       	push	r16
    5904:	1f 93       	push	r17
    5906:	cf 93       	push	r28
    5908:	df 93       	push	r29
    590a:	cd b7       	in	r28, 0x3d	; 61
    590c:	de b7       	in	r29, 0x3e	; 62
    590e:	ca 1b       	sub	r28, r26
    5910:	db 0b       	sbc	r29, r27
    5912:	0f b6       	in	r0, 0x3f	; 63
    5914:	f8 94       	cli
    5916:	de bf       	out	0x3e, r29	; 62
    5918:	0f be       	out	0x3f, r0	; 63
    591a:	cd bf       	out	0x3d, r28	; 61
    591c:	09 94       	ijmp

0000591e <__epilogue_restores__>:
    591e:	2a 88       	ldd	r2, Y+18	; 0x12
    5920:	39 88       	ldd	r3, Y+17	; 0x11
    5922:	48 88       	ldd	r4, Y+16	; 0x10
    5924:	5f 84       	ldd	r5, Y+15	; 0x0f
    5926:	6e 84       	ldd	r6, Y+14	; 0x0e
    5928:	7d 84       	ldd	r7, Y+13	; 0x0d
    592a:	8c 84       	ldd	r8, Y+12	; 0x0c
    592c:	9b 84       	ldd	r9, Y+11	; 0x0b
    592e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5930:	b9 84       	ldd	r11, Y+9	; 0x09
    5932:	c8 84       	ldd	r12, Y+8	; 0x08
    5934:	df 80       	ldd	r13, Y+7	; 0x07
    5936:	ee 80       	ldd	r14, Y+6	; 0x06
    5938:	fd 80       	ldd	r15, Y+5	; 0x05
    593a:	0c 81       	ldd	r16, Y+4	; 0x04
    593c:	1b 81       	ldd	r17, Y+3	; 0x03
    593e:	aa 81       	ldd	r26, Y+2	; 0x02
    5940:	b9 81       	ldd	r27, Y+1	; 0x01
    5942:	ce 0f       	add	r28, r30
    5944:	d1 1d       	adc	r29, r1
    5946:	0f b6       	in	r0, 0x3f	; 63
    5948:	f8 94       	cli
    594a:	de bf       	out	0x3e, r29	; 62
    594c:	0f be       	out	0x3f, r0	; 63
    594e:	cd bf       	out	0x3d, r28	; 61
    5950:	ed 01       	movw	r28, r26
    5952:	08 95       	ret

00005954 <itoa>:
    5954:	fb 01       	movw	r30, r22
    5956:	9f 01       	movw	r18, r30
    5958:	e8 94       	clt
    595a:	42 30       	cpi	r20, 0x02	; 2
    595c:	c4 f0       	brlt	.+48     	; 0x598e <itoa+0x3a>
    595e:	45 32       	cpi	r20, 0x25	; 37
    5960:	b4 f4       	brge	.+44     	; 0x598e <itoa+0x3a>
    5962:	4a 30       	cpi	r20, 0x0A	; 10
    5964:	29 f4       	brne	.+10     	; 0x5970 <itoa+0x1c>
    5966:	97 fb       	bst	r25, 7
    5968:	1e f4       	brtc	.+6      	; 0x5970 <itoa+0x1c>
    596a:	90 95       	com	r25
    596c:	81 95       	neg	r24
    596e:	9f 4f       	sbci	r25, 0xFF	; 255
    5970:	64 2f       	mov	r22, r20
    5972:	77 27       	eor	r23, r23
    5974:	0e 94 5f 2c 	call	0x58be	; 0x58be <__udivmodhi4>
    5978:	80 5d       	subi	r24, 0xD0	; 208
    597a:	8a 33       	cpi	r24, 0x3A	; 58
    597c:	0c f0       	brlt	.+2      	; 0x5980 <itoa+0x2c>
    597e:	89 5d       	subi	r24, 0xD9	; 217
    5980:	81 93       	st	Z+, r24
    5982:	cb 01       	movw	r24, r22
    5984:	00 97       	sbiw	r24, 0x00	; 0
    5986:	a1 f7       	brne	.-24     	; 0x5970 <itoa+0x1c>
    5988:	16 f4       	brtc	.+4      	; 0x598e <itoa+0x3a>
    598a:	5d e2       	ldi	r21, 0x2D	; 45
    598c:	51 93       	st	Z+, r21
    598e:	10 82       	st	Z, r1
    5990:	c9 01       	movw	r24, r18
    5992:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <strrev>

00005996 <strrev>:
    5996:	dc 01       	movw	r26, r24
    5998:	fc 01       	movw	r30, r24
    599a:	67 2f       	mov	r22, r23
    599c:	71 91       	ld	r23, Z+
    599e:	77 23       	and	r23, r23
    59a0:	e1 f7       	brne	.-8      	; 0x599a <strrev+0x4>
    59a2:	32 97       	sbiw	r30, 0x02	; 2
    59a4:	04 c0       	rjmp	.+8      	; 0x59ae <strrev+0x18>
    59a6:	7c 91       	ld	r23, X
    59a8:	6d 93       	st	X+, r22
    59aa:	70 83       	st	Z, r23
    59ac:	62 91       	ld	r22, -Z
    59ae:	ae 17       	cp	r26, r30
    59b0:	bf 07       	cpc	r27, r31
    59b2:	c8 f3       	brcs	.-14     	; 0x59a6 <strrev+0x10>
    59b4:	08 95       	ret

000059b6 <_exit>:
    59b6:	f8 94       	cli

000059b8 <__stop_program>:
    59b8:	ff cf       	rjmp	.-2      	; 0x59b8 <__stop_program>
