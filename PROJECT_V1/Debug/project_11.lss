
project_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005774  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00005774  00005808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008001b0  008001b0  00005958  2**0
                  ALLOC
  3 .stab         000057d8  00000000  00000000  00005958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ade  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000cc0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000cd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000cebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000eb07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000107a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001135b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_1>
       8:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_2>
       c:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__vector_6>
      1c:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_7>
      20:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__vector_8>
      24:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__vector_9>
      28:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__vector_10>
      2c:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__vector_13>
      38:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__vector_14>
      3c:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <main>
      8a:	0c 94 b8 2b 	jmp	0x5770	; 0x5770 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 2b 	jmp	0x56d8	; 0x56d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 2b 	jmp	0x56d8	; 0x56d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 2b 	jmp	0x56f8	; 0x56f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include  "ADC_interface.h"
#include "ADC_register.h"


void ADC_Init (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(ADMUX,REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
SET_BIT(ADMUX,REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

CLR_BIT(ADMUX,ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

SET_BIT(ADCSRA,ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
SET_BIT(ADCSRA,ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
SET_BIT(ADCSRA,ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

SET_BIT(ADCSRA,ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_Read>:

u16 ADC_Read (u8 Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
ADMUX=((ADMUX&0b11100000)|(Channel));
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	98 2f       	mov	r25, r24
     bce:	90 7e       	andi	r25, 0xE0	; 224
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	89 2b       	or	r24, r25
     bd4:	8c 93       	st	X, r24

SET_BIT(ADCSRA,ADSC);
     bd6:	a6 e2       	ldi	r26, 0x26	; 38
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e6 e2       	ldi	r30, 0x26	; 38
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	8c 93       	st	X, r24

while(GET_BIT(ADCSRA,ADIF)==0);
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	80 71       	andi	r24, 0x10	; 16
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	95 95       	asr	r25
     bfc:	87 95       	ror	r24
     bfe:	95 95       	asr	r25
     c00:	87 95       	ror	r24
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	79 f3       	breq	.-34     	; 0xbe4 <ADC_Read+0x2e>

SET_BIT(ADCSRA,ADIE);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	8c 93       	st	X, r24
return	ADC_Reg;
     c14:	e4 e2       	ldi	r30, 0x24	; 36
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01

}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <DCM_voidRotateCW>:
#include "DC_motor_config.h"
#include "DIO_interface.h"


void DCM_voidRotateCW(void)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT,DCM_PIN1,DIO_LOW);
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	64 e0       	ldi	r22, 0x04	; 4
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT2,DCM_PIN3,DIO_HIGH);
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	67 e0       	ldi	r22, 0x07	; 7
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

}
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <DCM_voidRotateCCW>:
void DCM_voidRotateCCW(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT,DCM_PIN1,DIO_LOW);
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	64 e0       	ldi	r22, 0x04	; 4
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT,DCM_PIN0,DIO_HIGH);
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	63 e0       	ldi	r22, 0x03	; 3
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <DCM_voidStop>:
void DCM_voidStop(void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePin(DCM_PORT,DCM_PIN1,DIO_LOW);
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	DIO_voidWritePin(DCM_PORT2,DCM_PIN3,DIO_LOW);
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	67 e0       	ldi	r22, 0x07	; 7
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>


}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <DIO_voidInit>:

//#include "STD_TYPES.h"
//#include "BIT_MATH.h"

void DIO_voidInit(void)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62

DDRA=CONCAT(DIO_PIN_NUM_A7_DIR,DIO_PIN_NUM_A6_DIR,DIO_PIN_NUM_A5_DIR,DIO_PIN_NUM_A4_DIR,DIO_PIN_NUM_A3_DIR,DIO_PIN_NUM_A2_DIR,DIO_PIN_NUM_A1_DIR,DIO_PIN_NUM_A0_DIR);
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	80 83       	st	Z, r24
DDRB=CONCAT(DIO_PIN_NUM_B7_DIR,DIO_PIN_NUM_B6_DIR,DIO_PIN_NUM_B5_DIR,DIO_PIN_NUM_B4_DIR,DIO_PIN_NUM_B3_DIR,DIO_PIN_NUM_B2_DIR,DIO_PIN_NUM_B1_DIR,DIO_PIN_NUM_B0_DIR);
     c9a:	e7 e3       	ldi	r30, 0x37	; 55
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 ef       	ldi	r24, 0xF0	; 240
     ca0:	80 83       	st	Z, r24
DDRC=CONCAT(DIO_PIN_NUM_C7_DIR,DIO_PIN_NUM_C6_DIR,DIO_PIN_NUM_C5_DIR,DIO_PIN_NUM_C4_DIR,DIO_PIN_NUM_C3_DIR,DIO_PIN_NUM_C2_DIR,DIO_PIN_NUM_C1_DIR,DIO_PIN_NUM_C0_DIR);
     ca2:	e4 e3       	ldi	r30, 0x34	; 52
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 83       	st	Z, r24
DDRD=CONCAT(DIO_PIN_NUM_D7_DIR,DIO_PIN_NUM_D6_DIR,DIO_PIN_NUM_D5_DIR,DIO_PIN_NUM_D4_DIR,DIO_PIN_NUM_D3_DIR,DIO_PIN_NUM_D2_DIR,DIO_PIN_NUM_D1_DIR,DIO_PIN_NUM_D0_DIR);
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8e ef       	ldi	r24, 0xFE	; 254
     cb0:	80 83       	st	Z, r24
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <DIO_voidWritePin>:

void DIO_voidWritePin(u8 u8PortCpy ,u8 u8PinCpy,u8 u8ValueCpy)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <DIO_voidWritePin+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <DIO_voidWritePin+0x8>
     cc0:	0f 92       	push	r0
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	6a 83       	std	Y+2, r22	; 0x02
     cca:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortCpy)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3d 83       	std	Y+5, r19	; 0x05
     cd4:	2c 83       	std	Y+4, r18	; 0x04
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	9d 81       	ldd	r25, Y+5	; 0x05
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	91 05       	cpc	r25, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <DIO_voidWritePin+0x2a>
     ce0:	44 c0       	rjmp	.+136    	; 0xd6a <DIO_voidWritePin+0xb2>
     ce2:	2c 81       	ldd	r18, Y+4	; 0x04
     ce4:	3d 81       	ldd	r19, Y+5	; 0x05
     ce6:	23 30       	cpi	r18, 0x03	; 3
     ce8:	31 05       	cpc	r19, r1
     cea:	34 f4       	brge	.+12     	; 0xcf8 <DIO_voidWritePin+0x40>
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	71 f0       	breq	.+28     	; 0xd12 <DIO_voidWritePin+0x5a>
     cf6:	bc c0       	rjmp	.+376    	; 0xe70 <DIO_voidWritePin+0x1b8>
     cf8:	2c 81       	ldd	r18, Y+4	; 0x04
     cfa:	3d 81       	ldd	r19, Y+5	; 0x05
     cfc:	23 30       	cpi	r18, 0x03	; 3
     cfe:	31 05       	cpc	r19, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <DIO_voidWritePin+0x4c>
     d02:	5f c0       	rjmp	.+190    	; 0xdc2 <DIO_voidWritePin+0x10a>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	9d 81       	ldd	r25, Y+5	; 0x05
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <DIO_voidWritePin+0x58>
     d0e:	85 c0       	rjmp	.+266    	; 0xe1a <DIO_voidWritePin+0x162>
     d10:	af c0       	rjmp	.+350    	; 0xe70 <DIO_voidWritePin+0x1b8>
	{
	case PORT_A:
		if(u8ValueCpy==DIO_HIGH){
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	a1 f4       	brne	.+40     	; 0xd40 <DIO_voidWritePin+0x88>
			SET_BIT(PORTA,u8PinCpy);
     d18:	ab e3       	ldi	r26, 0x3B	; 59
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	eb e3       	ldi	r30, 0x3B	; 59
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_voidWritePin+0x7e>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_voidWritePin+0x7a>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	98 c0       	rjmp	.+304    	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTA,u8PinCpy);
     d40:	ab e3       	ldi	r26, 0x3B	; 59
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	eb e3       	ldi	r30, 0x3B	; 59
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_voidWritePin+0xa6>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_voidWritePin+0xa2>
     d62:	80 95       	com	r24
     d64:	84 23       	and	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	83 c0       	rjmp	.+262    	; 0xe70 <DIO_voidWritePin+0x1b8>

		break;
	case PORT_B:
		if(u8ValueCpy==DIO_HIGH){
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	a1 f4       	brne	.+40     	; 0xd98 <DIO_voidWritePin+0xe0>
			SET_BIT(PORTB,u8PinCpy);
     d70:	a8 e3       	ldi	r26, 0x38	; 56
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e8 e3       	ldi	r30, 0x38	; 56
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_voidWritePin+0xd6>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_voidWritePin+0xd2>
     d92:	84 2b       	or	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	6c c0       	rjmp	.+216    	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTB,u8PinCpy);
     d98:	a8 e3       	ldi	r26, 0x38	; 56
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e8 e3       	ldi	r30, 0x38	; 56
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_voidWritePin+0xfe>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_voidWritePin+0xfa>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	57 c0       	rjmp	.+174    	; 0xe70 <DIO_voidWritePin+0x1b8>
		break;
	case PORT_C:
		if(u8ValueCpy==DIO_HIGH){
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <DIO_voidWritePin+0x138>
			SET_BIT(PORTC,u8PinCpy);
     dc8:	a5 e3       	ldi	r26, 0x35	; 53
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e3       	ldi	r30, 0x35	; 53
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_voidWritePin+0x12e>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <DIO_voidWritePin+0x12a>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	40 c0       	rjmp	.+128    	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTC,u8PinCpy);
     df0:	a5 e3       	ldi	r26, 0x35	; 53
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e3       	ldi	r30, 0x35	; 53
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_voidWritePin+0x156>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_voidWritePin+0x152>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	2b c0       	rjmp	.+86     	; 0xe70 <DIO_voidWritePin+0x1b8>
		break;
	case PORT_D:
		if(u8ValueCpy==DIO_HIGH){
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <DIO_voidWritePin+0x190>
			SET_BIT(PORTD,u8PinCpy);
     e20:	a2 e3       	ldi	r26, 0x32	; 50
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e2 e3       	ldi	r30, 0x32	; 50
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_voidWritePin+0x186>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_voidWritePin+0x182>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <DIO_voidWritePin+0x1b8>
		}
		else
			CLR_BIT(PORTD,u8PinCpy);
     e48:	a2 e3       	ldi	r26, 0x32	; 50
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_voidWritePin+0x1ae>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_voidWritePin+0x1aa>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
		break;
	}

}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DIO_u8ReadPin>:
u8 DIO_u8ReadPin(u8 u8PortCpy ,u8 u8PinCpy)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <DIO_u8ReadPin+0x6>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <DIO_u8ReadPin+0x8>
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	8a 83       	std	Y+2, r24	; 0x02
     e90:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8PinVal ;

	switch(u8PortCpy)
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	3d 83       	std	Y+5, r19	; 0x05
     e9a:	2c 83       	std	Y+4, r18	; 0x04
     e9c:	4c 81       	ldd	r20, Y+4	; 0x04
     e9e:	5d 81       	ldd	r21, Y+5	; 0x05
     ea0:	42 30       	cpi	r20, 0x02	; 2
     ea2:	51 05       	cpc	r21, r1
     ea4:	b1 f1       	breq	.+108    	; 0xf12 <DIO_u8ReadPin+0x92>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	34 f4       	brge	.+12     	; 0xebc <DIO_u8ReadPin+0x3c>
     eb0:	2c 81       	ldd	r18, Y+4	; 0x04
     eb2:	3d 81       	ldd	r19, Y+5	; 0x05
     eb4:	21 30       	cpi	r18, 0x01	; 1
     eb6:	31 05       	cpc	r19, r1
     eb8:	71 f0       	breq	.+28     	; 0xed6 <DIO_u8ReadPin+0x56>
     eba:	84 c0       	rjmp	.+264    	; 0xfc4 <DIO_u8ReadPin+0x144>
     ebc:	4c 81       	ldd	r20, Y+4	; 0x04
     ebe:	5d 81       	ldd	r21, Y+5	; 0x05
     ec0:	43 30       	cpi	r20, 0x03	; 3
     ec2:	51 05       	cpc	r21, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <DIO_u8ReadPin+0x48>
     ec6:	43 c0       	rjmp	.+134    	; 0xf4e <DIO_u8ReadPin+0xce>
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	84 30       	cpi	r24, 0x04	; 4
     ece:	91 05       	cpc	r25, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <DIO_u8ReadPin+0x54>
     ed2:	5b c0       	rjmp	.+182    	; 0xf8a <DIO_u8ReadPin+0x10a>
     ed4:	77 c0       	rjmp	.+238    	; 0xfc4 <DIO_u8ReadPin+0x144>
	{
	case PORT_A :
		u8PinVal=GET_BIT(PINA,u8PinCpy);
     ed6:	e9 e3       	ldi	r30, 0x39	; 57
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_u8ReadPin+0x70>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	2a 95       	dec	r18
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_u8ReadPin+0x6c>
     ef4:	9a 01       	movw	r18, r20
     ef6:	28 23       	and	r18, r24
     ef8:	39 23       	and	r19, r25
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a9 01       	movw	r20, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8ReadPin+0x88>
     f04:	55 95       	asr	r21
     f06:	47 95       	ror	r20
     f08:	8a 95       	dec	r24
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8ReadPin+0x84>
     f0c:	ca 01       	movw	r24, r20
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	59 c0       	rjmp	.+178    	; 0xfc4 <DIO_u8ReadPin+0x144>
		break;

	case PORT_B :
		u8PinVal=GET_BIT(PINB,u8PinCpy);
     f12:	e6 e3       	ldi	r30, 0x36	; 54
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_u8ReadPin+0xac>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	2a 95       	dec	r18
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_u8ReadPin+0xa8>
     f30:	9a 01       	movw	r18, r20
     f32:	28 23       	and	r18, r24
     f34:	39 23       	and	r19, r25
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a9 01       	movw	r20, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_u8ReadPin+0xc4>
     f40:	55 95       	asr	r21
     f42:	47 95       	ror	r20
     f44:	8a 95       	dec	r24
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_u8ReadPin+0xc0>
     f48:	ca 01       	movw	r24, r20
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	3b c0       	rjmp	.+118    	; 0xfc4 <DIO_u8ReadPin+0x144>
		break;
	case PORT_C :
		u8PinVal=GET_BIT(PINC,u8PinCpy);
     f4e:	e3 e3       	ldi	r30, 0x33	; 51
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_u8ReadPin+0xe8>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	2a 95       	dec	r18
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_u8ReadPin+0xe4>
     f6c:	9a 01       	movw	r18, r20
     f6e:	28 23       	and	r18, r24
     f70:	39 23       	and	r19, r25
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a9 01       	movw	r20, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8ReadPin+0x100>
     f7c:	55 95       	asr	r21
     f7e:	47 95       	ror	r20
     f80:	8a 95       	dec	r24
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8ReadPin+0xfc>
     f84:	ca 01       	movw	r24, r20
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	1d c0       	rjmp	.+58     	; 0xfc4 <DIO_u8ReadPin+0x144>
		break;
	case PORT_D :
		u8PinVal=GET_BIT(PIND,u8PinCpy);
     f8a:	e0 e3       	ldi	r30, 0x30	; 48
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_u8ReadPin+0x124>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	2a 95       	dec	r18
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_u8ReadPin+0x120>
     fa8:	9a 01       	movw	r18, r20
     faa:	28 23       	and	r18, r24
     fac:	39 23       	and	r19, r25
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a9 01       	movw	r20, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_u8ReadPin+0x13c>
     fb8:	55 95       	asr	r21
     fba:	47 95       	ror	r20
     fbc:	8a 95       	dec	r24
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_u8ReadPin+0x138>
     fc0:	ca 01       	movw	r24, r20
     fc2:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	return u8PinVal;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01

}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 u8PortCpy ,u8 u8PinCpy)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <DIO_voidTogglePin+0x6>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <DIO_voidTogglePin+0x8>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3c 83       	std	Y+4, r19	; 0x04
     fee:	2b 83       	std	Y+3, r18	; 0x03
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	82 30       	cpi	r24, 0x02	; 2
     ff6:	91 05       	cpc	r25, r1
     ff8:	51 f1       	breq	.+84     	; 0x104e <DIO_voidTogglePin+0x78>
     ffa:	2b 81       	ldd	r18, Y+3	; 0x03
     ffc:	3c 81       	ldd	r19, Y+4	; 0x04
     ffe:	23 30       	cpi	r18, 0x03	; 3
    1000:	31 05       	cpc	r19, r1
    1002:	34 f4       	brge	.+12     	; 0x1010 <DIO_voidTogglePin+0x3a>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	61 f0       	breq	.+24     	; 0x1026 <DIO_voidTogglePin+0x50>
    100e:	5a c0       	rjmp	.+180    	; 0x10c4 <DIO_voidTogglePin+0xee>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	23 30       	cpi	r18, 0x03	; 3
    1016:	31 05       	cpc	r19, r1
    1018:	71 f1       	breq	.+92     	; 0x1076 <DIO_voidTogglePin+0xa0>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	91 05       	cpc	r25, r1
    1022:	e9 f1       	breq	.+122    	; 0x109e <DIO_voidTogglePin+0xc8>
    1024:	4f c0       	rjmp	.+158    	; 0x10c4 <DIO_voidTogglePin+0xee>
	{
	case PORT_A:
		TOG_BIT(PORTA,u8PinCpy);
    1026:	ab e3       	ldi	r26, 0x3B	; 59
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	eb e3       	ldi	r30, 0x3B	; 59
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_voidTogglePin+0x6e>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_voidTogglePin+0x6a>
    1048:	84 27       	eor	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	3b c0       	rjmp	.+118    	; 0x10c4 <DIO_voidTogglePin+0xee>
		break;
	case PORT_B:
		TOG_BIT(PORTB,u8PinCpy);
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_voidTogglePin+0x96>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_voidTogglePin+0x92>
    1070:	84 27       	eor	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	27 c0       	rjmp	.+78     	; 0x10c4 <DIO_voidTogglePin+0xee>
		break;
	case PORT_C:
		TOG_BIT(PORTC,u8PinCpy);
    1076:	a5 e3       	ldi	r26, 0x35	; 53
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e3       	ldi	r30, 0x35	; 53
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_voidTogglePin+0xbe>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_voidTogglePin+0xba>
    1098:	84 27       	eor	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <DIO_voidTogglePin+0xee>
		break;
	case PORT_D:
		TOG_BIT(PORTD,u8PinCpy);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidTogglePin+0xe6>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidTogglePin+0xe2>
    10c0:	84 27       	eor	r24, r20
    10c2:	8c 93       	st	X, r24
		break;


	}

}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <DIO_voidWritePort>:

void DIO_voidWritePort(u8  u8PortCpy,u8 u8ValueCpy)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_voidWritePort+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <DIO_voidWritePort+0x8>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortCpy)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3c 83       	std	Y+4, r19	; 0x04
    10ea:	2b 83       	std	Y+3, r18	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	d9 f0       	breq	.+54     	; 0x112c <DIO_voidWritePort+0x5a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	23 30       	cpi	r18, 0x03	; 3
    10fc:	31 05       	cpc	r19, r1
    10fe:	34 f4       	brge	.+12     	; 0x110c <DIO_voidWritePort+0x3a>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	61 f0       	breq	.+24     	; 0x1122 <DIO_voidWritePort+0x50>
    110a:	1e c0       	rjmp	.+60     	; 0x1148 <DIO_voidWritePort+0x76>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	23 30       	cpi	r18, 0x03	; 3
    1112:	31 05       	cpc	r19, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <DIO_voidWritePort+0x64>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	91 05       	cpc	r25, r1
    111e:	81 f0       	breq	.+32     	; 0x1140 <DIO_voidWritePort+0x6e>
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <DIO_voidWritePort+0x76>
	{
	case PORT_A :
		PORTA=u8ValueCpy;
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
    112a:	0e c0       	rjmp	.+28     	; 0x1148 <DIO_voidWritePort+0x76>
		break;
	case PORT_B :
			PORTB=u8ValueCpy;
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	80 83       	st	Z, r24
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <DIO_voidWritePort+0x76>
			break;
	case PORT_C :
			PORTC=u8ValueCpy;
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <DIO_voidWritePort+0x76>
			break;
	case PORT_D :
			PORTD=u8ValueCpy;
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
			break;
	}


}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DIO_voidPullUpState>:

void DIO_voidPullUpState(u8  u8PortCpy,u8 u8PinCpy,u8 u8state)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_voidPullUpState+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_voidPullUpState+0x8>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_voidPullUpState+0xa>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	6b 83       	std	Y+3, r22	; 0x03
    1168:	4c 83       	std	Y+4, r20	; 0x04
	//check if input or output
	u8 u8Direction_status;
	switch(u8PortCpy)
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3e 83       	std	Y+6, r19	; 0x06
    1172:	2d 83       	std	Y+5, r18	; 0x05
    1174:	4d 81       	ldd	r20, Y+5	; 0x05
    1176:	5e 81       	ldd	r21, Y+6	; 0x06
    1178:	42 30       	cpi	r20, 0x02	; 2
    117a:	51 05       	cpc	r21, r1
    117c:	b1 f1       	breq	.+108    	; 0x11ea <DIO_voidPullUpState+0x94>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	34 f4       	brge	.+12     	; 0x1194 <DIO_voidPullUpState+0x3e>
    1188:	2d 81       	ldd	r18, Y+5	; 0x05
    118a:	3e 81       	ldd	r19, Y+6	; 0x06
    118c:	21 30       	cpi	r18, 0x01	; 1
    118e:	31 05       	cpc	r19, r1
    1190:	71 f0       	breq	.+28     	; 0x11ae <DIO_voidPullUpState+0x58>
    1192:	84 c0       	rjmp	.+264    	; 0x129c <DIO_voidPullUpState+0x146>
    1194:	4d 81       	ldd	r20, Y+5	; 0x05
    1196:	5e 81       	ldd	r21, Y+6	; 0x06
    1198:	43 30       	cpi	r20, 0x03	; 3
    119a:	51 05       	cpc	r21, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <DIO_voidPullUpState+0x4a>
    119e:	43 c0       	rjmp	.+134    	; 0x1226 <DIO_voidPullUpState+0xd0>
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <DIO_voidPullUpState+0x56>
    11aa:	5b c0       	rjmp	.+182    	; 0x1262 <DIO_voidPullUpState+0x10c>
    11ac:	77 c0       	rjmp	.+238    	; 0x129c <DIO_voidPullUpState+0x146>
		{
		case PORT_A:
			u8Direction_status=GET_BIT(DDRA,u8PinCpy);
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_voidPullUpState+0x72>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	2a 95       	dec	r18
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_voidPullUpState+0x6e>
    11cc:	9a 01       	movw	r18, r20
    11ce:	28 23       	and	r18, r24
    11d0:	39 23       	and	r19, r25
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a9 01       	movw	r20, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_voidPullUpState+0x8a>
    11dc:	55 95       	asr	r21
    11de:	47 95       	ror	r20
    11e0:	8a 95       	dec	r24
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_voidPullUpState+0x86>
    11e4:	ca 01       	movw	r24, r20
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	59 c0       	rjmp	.+178    	; 0x129c <DIO_voidPullUpState+0x146>
			break;
		case PORT_B:
			u8Direction_status=GET_BIT(DDRB,u8PinCpy);
    11ea:	e7 e3       	ldi	r30, 0x37	; 55
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_voidPullUpState+0xae>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	2a 95       	dec	r18
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_voidPullUpState+0xaa>
    1208:	9a 01       	movw	r18, r20
    120a:	28 23       	and	r18, r24
    120c:	39 23       	and	r19, r25
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_voidPullUpState+0xc6>
    1218:	55 95       	asr	r21
    121a:	47 95       	ror	r20
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_voidPullUpState+0xc2>
    1220:	ca 01       	movw	r24, r20
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	3b c0       	rjmp	.+118    	; 0x129c <DIO_voidPullUpState+0x146>
			break;
		case PORT_C:
			u8Direction_status=GET_BIT(DDRC,u8PinCpy);
    1226:	e4 e3       	ldi	r30, 0x34	; 52
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_voidPullUpState+0xea>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	2a 95       	dec	r18
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_voidPullUpState+0xe6>
    1244:	9a 01       	movw	r18, r20
    1246:	28 23       	and	r18, r24
    1248:	39 23       	and	r19, r25
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_voidPullUpState+0x102>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_voidPullUpState+0xfe>
    125c:	ca 01       	movw	r24, r20
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	1d c0       	rjmp	.+58     	; 0x129c <DIO_voidPullUpState+0x146>
			break;
		case PORT_D:
			u8Direction_status=GET_BIT(DDRD,u8PinCpy);
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_voidPullUpState+0x126>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	2a 95       	dec	r18
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_voidPullUpState+0x122>
    1280:	9a 01       	movw	r18, r20
    1282:	28 23       	and	r18, r24
    1284:	39 23       	and	r19, r25
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_voidPullUpState+0x13e>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_voidPullUpState+0x13a>
    1298:	ca 01       	movw	r24, r20
    129a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
if (u8Direction_status ==DIO_INPUT)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 23       	and	r24, r24
    12a0:	29 f4       	brne	.+10     	; 0x12ac <DIO_voidPullUpState+0x156>
{
	DIO_voidWritePin(u8PortCpy,u8PinCpy,u8state);
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	6b 81       	ldd	r22, Y+3	; 0x03
    12a6:	4c 81       	ldd	r20, Y+4	; 0x04
    12a8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
}else {
	//DO NOTHING
}

}
    12ac:	26 96       	adiw	r28, 0x06	; 6
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <EEPROM_vRead>:
#include "EEPROM_private.h"
#include "EEPROM_config.h"


void EEPROM_vRead(u8 cpy_u8LocationAddress,u8 *cpy_pu8Data)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <EEPROM_vRead+0x6>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	7b 83       	std	Y+3, r23	; 0x03
    12ce:	6a 83       	std	Y+2, r22	; 0x02
	//start condition
	TWI_enStartCondition();
    12d0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TWI_enStartCondition>

	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    12d4:	80 ea       	ldi	r24, 0xA0	; 160
    12d6:	0e 94 51 14 	call	0x28a2	; 0x28a2 <TWI_enSetSlaveAddressWithWrite>

	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>

	//REPEAT START TO CHANGE WRITE OPERATION TO READ OPERATION
	TWI_enRepeateStart();
    12e0:	0e 94 1a 14 	call	0x2834	; 0x2834 <TWI_enRepeateStart>
	TWI_enSetSlaveAddressWithRead(SLAVE_ADDRESS);
    12e4:	80 ea       	ldi	r24, 0xA0	; 160
    12e6:	0e 94 95 14 	call	0x292a	; 0x292a <TWI_enSetSlaveAddressWithRead>
	//MASTER RECIEVE DATA
	TWI_enMasterReadData(cpy_pu8Data);
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	0e 94 10 15 	call	0x2a20	; 0x2a20 <TWI_enMasterReadData>

	//STOP
	TWI_vStopCondition();
    12f2:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <TWI_vStopCondition>
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <EEPROM_vWrite>:

void EEPROM_vWrite(u8 cpy_u8LocationAddress, u8 cpy_pu8Data)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	60 97       	sbiw	r28, 0x10	; 16
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	8f 87       	std	Y+15, r24	; 0x0f
    1318:	68 8b       	std	Y+16, r22	; 0x10
	//start condition
	TWI_enStartCondition();
    131a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TWI_enStartCondition>

	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    131e:	80 ea       	ldi	r24, 0xA0	; 160
    1320:	0e 94 51 14 	call	0x28a2	; 0x28a2 <TWI_enSetSlaveAddressWithWrite>
	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);
    1324:	8f 85       	ldd	r24, Y+15	; 0x0f
    1326:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>
	//MASTER SEN DATA
	TWI_enMasterWriteData(cpy_pu8Data);
    132a:	88 89       	ldd	r24, Y+16	; 0x10
    132c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>

	//stop condition
	TWI_vStopCondition();
    1330:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <TWI_vStopCondition>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a0 e2       	ldi	r26, 0x20	; 32
    133a:	b1 e4       	ldi	r27, 0x41	; 65
    133c:	8b 87       	std	Y+11, r24	; 0x0b
    133e:	9c 87       	std	Y+12, r25	; 0x0c
    1340:	ad 87       	std	Y+13, r26	; 0x0d
    1342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1344:	6b 85       	ldd	r22, Y+11	; 0x0b
    1346:	7c 85       	ldd	r23, Y+12	; 0x0c
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4a ef       	ldi	r20, 0xFA	; 250
    1352:	54 e4       	ldi	r21, 0x44	; 68
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8f 83       	std	Y+7, r24	; 0x07
    135e:	98 87       	std	Y+8, r25	; 0x08
    1360:	a9 87       	std	Y+9, r26	; 0x09
    1362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1378:	88 23       	and	r24, r24
    137a:	2c f4       	brge	.+10     	; 0x1386 <EEPROM_vWrite+0x84>
		__ticks = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	3f c0       	rjmp	.+126    	; 0x1404 <EEPROM_vWrite+0x102>
	else if (__tmp > 65535)
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	3f ef       	ldi	r19, 0xFF	; 255
    1392:	4f e7       	ldi	r20, 0x7F	; 127
    1394:	57 e4       	ldi	r21, 0x47	; 71
    1396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139a:	18 16       	cp	r1, r24
    139c:	4c f5       	brge	.+82     	; 0x13f0 <EEPROM_vWrite+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139e:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <EEPROM_vWrite+0xe4>
    13c8:	88 ec       	ldi	r24, 0xC8	; 200
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <EEPROM_vWrite+0xd2>
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	69 f7       	brne	.-38     	; 0x13c8 <EEPROM_vWrite+0xc6>
    13ee:	14 c0       	rjmp	.+40     	; 0x1418 <EEPROM_vWrite+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <EEPROM_vWrite+0x10e>
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);
}
    1418:	60 96       	adiw	r28, 0x10	; 16
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <EEPROM_vWritePage>:


void EEPROM_vWritePage(u8 cpy_u8LocationAddress,u8 *cpy_pu8Data,u8 length)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	63 97       	sbiw	r28, 0x13	; 19
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	88 8b       	std	Y+16, r24	; 0x10
    1440:	7a 8b       	std	Y+18, r23	; 0x12
    1442:	69 8b       	std	Y+17, r22	; 0x11
    1444:	4b 8b       	std	Y+19, r20	; 0x13
	u8 i;
	//start condition
	TWI_enStartCondition();
    1446:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TWI_enStartCondition>

	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
    144a:	80 ea       	ldi	r24, 0xA0	; 160
    144c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <TWI_enSetSlaveAddressWithWrite>
	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);
    1450:	88 89       	ldd	r24, Y+16	; 0x10
    1452:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>

	for(i=0;i<length;i++)
    1456:	1f 86       	std	Y+15, r1	; 0x0f
    1458:	80 c0       	rjmp	.+256    	; 0x155a <EEPROM_vWritePage+0x130>
	{
		//MASTER SEN DATA
			TWI_enMasterWriteData(cpy_pu8Data[i]);
    145a:	8f 85       	ldd	r24, Y+15	; 0x0f
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	9a 89       	ldd	r25, Y+18	; 0x12
    1464:	fc 01       	movw	r30, r24
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	80 81       	ld	r24, Z
    146c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TWI_enMasterWriteData>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e2       	ldi	r26, 0x20	; 32
    1476:	b1 e4       	ldi	r27, 0x41	; 65
    1478:	8b 87       	std	Y+11, r24	; 0x0b
    147a:	9c 87       	std	Y+12, r25	; 0x0c
    147c:	ad 87       	std	Y+13, r26	; 0x0d
    147e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	6b 85       	ldd	r22, Y+11	; 0x0b
    1482:	7c 85       	ldd	r23, Y+12	; 0x0c
    1484:	8d 85       	ldd	r24, Y+13	; 0x0d
    1486:	9e 85       	ldd	r25, Y+14	; 0x0e
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
    149c:	a9 87       	std	Y+9, r26	; 0x09
    149e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <EEPROM_vWritePage+0x98>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <EEPROM_vWritePage+0x116>
	else if (__tmp > 65535)
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <EEPROM_vWritePage+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <EEPROM_vWritePage+0xf8>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <EEPROM_vWritePage+0xe6>
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <EEPROM_vWritePage+0xda>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <EEPROM_vWritePage+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <EEPROM_vWritePage+0x122>
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
	//send slave addreess with write
	TWI_enSetSlaveAddressWithWrite(SLAVE_ADDRESS);
	//send memory location
	TWI_enMasterWriteData(cpy_u8LocationAddress);

	for(i=0;i<length;i++)
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	8f 87       	std	Y+15, r24	; 0x0f
    155a:	9f 85       	ldd	r25, Y+15	; 0x0f
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	98 17       	cp	r25, r24
    1560:	08 f4       	brcc	.+2      	; 0x1564 <EEPROM_vWritePage+0x13a>
    1562:	7b cf       	rjmp	.-266    	; 0x145a <EEPROM_vWritePage+0x30>
			TWI_enMasterWriteData(cpy_pu8Data[i]);
			_delay_ms(10);
	}

	//stop condition
	TWI_vStopCondition();
    1564:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <TWI_vStopCondition>


}
    1568:	63 96       	adiw	r28, 0x13	; 19
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <EXT_INTERRUPT_VID_INIT>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL;
void (*EXTI1_CALLBACK_PTR)(void)=NULL;
void (*EXTI2_CALLBACK_PTR)(void)=NULL;


void EXT_INTERRUPT_VID_INIT(void){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
#if EXT0_MODE==     LOW_LEVEL
	CLR_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif EXT0_MODE==   IOC
	SET_BIT(MCUCR,ISC00);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	81 60       	ori	r24, 0x01	; 1
    158e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
    1590:	a5 e5       	ldi	r26, 0x55	; 85
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e5       	ldi	r30, 0x55	; 85
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8d 7f       	andi	r24, 0xFD	; 253
    159c:	8c 93       	st	X, r24

#if EXT1_MODE==     LOW_LEVEL
	CLR_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
#elif EXT1_MODE==   IOC
	SET_BIT(MCUCR,ISC10);
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	84 60       	ori	r24, 0x04	; 4
    15aa:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
    15ac:	a5 e5       	ldi	r26, 0x55	; 85
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e5       	ldi	r30, 0x55	; 85
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	87 7f       	andi	r24, 0xF7	; 247
    15b8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC10);
	SET_BIT(MCUCR,ISC11);
#else
#endif
#if EXT2_MODE== FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    15ba:	a4 e5       	ldi	r26, 0x54	; 84
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e4 e5       	ldi	r30, 0x54	; 84
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7b       	andi	r24, 0xBF	; 191
    15c6:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,ISC2);


#else
#endif
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <EXT0_VID_SET_CALL_BACK>:



void EXT0_VID_SET_CALL_BACK(void (*PTR)(void)){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <EXT0_VID_SET_CALL_BACK+0x6>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CALLBACK_PTR=PTR;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	90 93 b1 01 	sts	0x01B1, r25
    15e4:	80 93 b0 01 	sts	0x01B0, r24
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <EXT1_VID_SET_CALL_BACK>:

void EXT1_VID_SET_CALL_BACK(void (*PTR)(void)){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <EXT1_VID_SET_CALL_BACK+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_CALLBACK_PTR=PTR;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	90 93 b3 01 	sts	0x01B3, r25
    1608:	80 93 b2 01 	sts	0x01B2, r24
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <EXT2_VID_SET_CALL_BACK>:

void EXT2_VID_SET_CALL_BACK(void (*PTR)(void)){
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <EXT2_VID_SET_CALL_BACK+0x6>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_CALLBACK_PTR=PTR;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	90 93 b5 01 	sts	0x01B5, r25
    162c:	80 93 b4 01 	sts	0x01B4, r24
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <__vector_1>:


void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_1 (void){
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CALLBACK_PTR();
    1664:	e0 91 b0 01 	lds	r30, 0x01B0
    1668:	f0 91 b1 01 	lds	r31, 0x01B1
    166c:	09 95       	icall
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_2>:

void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_2 (void){
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CALLBACK_PTR();
    16be:	e0 91 b2 01 	lds	r30, 0x01B2
    16c2:	f0 91 b3 01 	lds	r31, 0x01B3
    16c6:	09 95       	icall
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_3 (void){
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CALLBACK_PTR();
    1718:	e0 91 b4 01 	lds	r30, 0x01B4
    171c:	f0 91 b5 01 	lds	r31, 0x01B5
    1720:	09 95       	icall
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <EXT_INTERRUPT_VID_ENABLE>:


void EXT_INTERRUPT_VID_ENABLE(u8 interrupt_number)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <EXT_INTERRUPT_VID_ENABLE+0x6>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number)
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3b 83       	std	Y+3, r19	; 0x03
    175e:	2a 83       	std	Y+2, r18	; 0x02
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	9b 81       	ldd	r25, Y+3	; 0x03
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	89 f0       	breq	.+34     	; 0x178c <EXT_INTERRUPT_VID_ENABLE+0x44>
    176a:	2a 81       	ldd	r18, Y+2	; 0x02
    176c:	3b 81       	ldd	r19, Y+3	; 0x03
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	a1 f0       	breq	.+40     	; 0x179c <EXT_INTERRUPT_VID_ENABLE+0x54>
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	b9 f4       	brne	.+46     	; 0x17aa <EXT_INTERRUPT_VID_ENABLE+0x62>
	{
	case EXT0 :SET_BIT(GICR,INT0)	;
    177c:	ab e5       	ldi	r26, 0x5B	; 91
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e5       	ldi	r30, 0x5B	; 91
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 64       	ori	r24, 0x40	; 64
    1788:	8c 93       	st	X, r24
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <EXT_INTERRUPT_VID_ENABLE+0x62>
	break;
	case EXT1 :SET_BIT(GICR,INT1)	;
    178c:	ab e5       	ldi	r26, 0x5B	; 91
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	eb e5       	ldi	r30, 0x5B	; 91
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	80 68       	ori	r24, 0x80	; 128
    1798:	8c 93       	st	X, r24
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXT2 :SET_BIT(GICR,INT2)	;
    179c:	ab e5       	ldi	r26, 0x5B	; 91
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	eb e5       	ldi	r30, 0x5B	; 91
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 62       	ori	r24, 0x20	; 32
    17a8:	8c 93       	st	X, r24
		break;

	}
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <EXT_INTERRUPT_VID_SET_MODE>:

void EXT_INTERRUPT_VID_SET_MODE(u8 interrupt_number , u8 mode)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <EXT_INTERRUPT_VID_SET_MODE+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <EXT_INTERRUPT_VID_SET_MODE+0x8>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt_number)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3c 83       	std	Y+4, r19	; 0x04
    17ce:	2b 83       	std	Y+3, r18	; 0x03
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	e9 f0       	breq	.+58     	; 0x1814 <EXT_INTERRUPT_VID_SET_MODE+0x5e>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	22 30       	cpi	r18, 0x02	; 2
    17e0:	31 05       	cpc	r19, r1
    17e2:	61 f1       	breq	.+88     	; 0x183c <EXT_INTERRUPT_VID_SET_MODE+0x86>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	d9 f5       	brne	.+118    	; 0x1862 <EXT_INTERRUPT_VID_SET_MODE+0xac>
		{
		case EXT0 :SET_BIT(GIFR,mode)	;
    17ec:	aa e5       	ldi	r26, 0x5A	; 90
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ea e5       	ldi	r30, 0x5A	; 90
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <EXT_INTERRUPT_VID_SET_MODE+0x54>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <EXT_INTERRUPT_VID_SET_MODE+0x50>
    180e:	84 2b       	or	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	27 c0       	rjmp	.+78     	; 0x1862 <EXT_INTERRUPT_VID_SET_MODE+0xac>
		break;
		case EXT1 :SET_BIT(GIFR,mode)	;
    1814:	aa e5       	ldi	r26, 0x5A	; 90
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ea e5       	ldi	r30, 0x5A	; 90
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <EXT_INTERRUPT_VID_SET_MODE+0x7c>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <EXT_INTERRUPT_VID_SET_MODE+0x78>
    1836:	84 2b       	or	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	13 c0       	rjmp	.+38     	; 0x1862 <EXT_INTERRUPT_VID_SET_MODE+0xac>
			break;
		case EXT2 :SET_BIT(GIFR,mode)	;
    183c:	aa e5       	ldi	r26, 0x5A	; 90
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ea e5       	ldi	r30, 0x5A	; 90
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <EXT_INTERRUPT_VID_SET_MODE+0xa4>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <EXT_INTERRUPT_VID_SET_MODE+0xa0>
    185e:	84 2b       	or	r24, r20
    1860:	8c 93       	st	X, r24
			break;

		}

}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <Global_Interrupt_Enable>:
#include "BIT_MATH.h"
#include "Global_Interrupt_register.h"
#include "Global_Interrupt_interface.h"

void Global_Interrupt_Enable(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1878:	af e5       	ldi	r26, 0x5F	; 95
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ef e5       	ldi	r30, 0x5F	; 95
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 68       	ori	r24, 0x80	; 128
    1884:	8c 93       	st	X, r24
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1894:	af e5       	ldi	r26, 0x5F	; 95
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ef e5       	ldi	r30, 0x5F	; 95
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8f 77       	andi	r24, 0x7F	; 127
    18a0:	8c 93       	st	X, r24
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <KPD_init>:
//};
	u8 KPD_arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons


void KPD_init(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
	u8 i;


	for(i=ROW_START;i<=ROW_END;i++)
    18b2:	19 82       	std	Y+1, r1	; 0x01
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <KPD_init+0x1e>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN INPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	69 81       	ldd	r22, Y+1	; 0x01
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
void KPD_init(void)
{
	u8 i;


	for(i=ROW_START;i<=ROW_END;i++)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	a8 f3       	brcs	.-22     	; 0x18b6 <KPD_init+0xe>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN INPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
	}

	for(i=COLUMN_START;i<=COLUMN_END;i++)
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	08 c0       	rjmp	.+16     	; 0x18e2 <KPD_init+0x3a>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN OUTPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	69 81       	ldd	r22, Y+1	; 0x01
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	{
		//DIO_SETPINDIR(KPD_PORT,PIN INPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
	}

	for(i=COLUMN_START;i<=COLUMN_END;i++)
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	88 30       	cpi	r24, 0x08	; 8
    18e6:	a8 f3       	brcs	.-22     	; 0x18d2 <KPD_init+0x2a>
		//DIO_SETPINDIR(KPD_PORT,PIN OUTPUT) WE DID IT FROM DIO_CONFIG.H
		DIO_voidWritePin(KPD_PORT,i,DIO_HIGH);
	}


}
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <KPD_GetKey>:


u8 KPD_GetKey(void)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	64 97       	sbiw	r28, 0x14	; 20
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
	u8 key=NoPressedKEY;
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	8c 8b       	std	Y+20, r24	; 0x14
	u8 i,j,k;
	u8 result;
	u8 exitflag=0;
    1908:	1f 86       	std	Y+15, r1	; 0x0f

	for(i=0;i<4;i++)
    190a:	1b 8a       	std	Y+19, r1	; 0x13
    190c:	ba c0       	rjmp	.+372    	; 0x1a82 <KPD_GetKey+0x192>
	{
		//SET ALL COLUMNS HIGH
		for(k=COLUMN_START;k<=COLUMN_END;k++)
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	89 8b       	std	Y+17, r24	; 0x11
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <KPD_GetKey+0x34>
		{
			DIO_voidWritePin(KPD_PORT,k,DIO_HIGH);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	69 89       	ldd	r22, Y+17	; 0x11
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	u8 exitflag=0;

	for(i=0;i<4;i++)
	{
		//SET ALL COLUMNS HIGH
		for(k=COLUMN_START;k<=COLUMN_END;k++)
    191e:	89 89       	ldd	r24, Y+17	; 0x11
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	89 8b       	std	Y+17, r24	; 0x11
    1924:	89 89       	ldd	r24, Y+17	; 0x11
    1926:	88 30       	cpi	r24, 0x08	; 8
    1928:	a8 f3       	brcs	.-22     	; 0x1914 <KPD_GetKey+0x24>
			DIO_voidWritePin(KPD_PORT,k,DIO_HIGH);

		}

		//SET COLUMNS LOW
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i),DIO_LOW);
    192a:	8b 89       	ldd	r24, Y+19	; 0x13
    192c:	98 2f       	mov	r25, r24
    192e:	9c 5f       	subi	r25, 0xFC	; 252
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	69 2f       	mov	r22, r25
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

		for(j=0;j<4;j++)
    193a:	1a 8a       	std	Y+18, r1	; 0x12
    193c:	98 c0       	rjmp	.+304    	; 0x1a6e <KPD_GetKey+0x17e>
		{
			result=DIO_u8ReadPin(KPD_PORT,(ROW_START+j));
    193e:	8a 89       	ldd	r24, Y+18	; 0x12
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	b9 01       	movw	r22, r18
    194a:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_u8ReadPin>
    194e:	88 8b       	std	Y+16, r24	; 0x10
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 ea       	ldi	r26, 0xA0	; 160
    1956:	b1 e4       	ldi	r27, 0x41	; 65
    1958:	8b 87       	std	Y+11, r24	; 0x0b
    195a:	9c 87       	std	Y+12, r25	; 0x0c
    195c:	ad 87       	std	Y+13, r26	; 0x0d
    195e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a ef       	ldi	r20, 0xFA	; 250
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8f 83       	std	Y+7, r24	; 0x07
    197a:	98 87       	std	Y+8, r25	; 0x08
    197c:	a9 87       	std	Y+9, r26	; 0x09
    197e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <KPD_GetKey+0xb2>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <KPD_GetKey+0x130>
	else if (__tmp > 65535)
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <KPD_GetKey+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <KPD_GetKey+0x112>
    19e4:	88 ec       	ldi	r24, 0xC8	; 200
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <KPD_GetKey+0x100>
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <KPD_GetKey+0xf4>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <KPD_GetKey+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <KPD_GetKey+0x13c>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			if(result==DIO_LOW)
    1a34:	88 89       	ldd	r24, Y+16	; 0x10
    1a36:	88 23       	and	r24, r24
    1a38:	b9 f4       	brne	.+46     	; 0x1a68 <KPD_GetKey+0x178>
			{
				key=KPD_arr[j][i];
    1a3a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	8b 89       	ldd	r24, Y+19	; 0x13
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	ca 01       	movw	r24, r20
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	82 0f       	add	r24, r18
    1a52:	93 1f       	adc	r25, r19
    1a54:	fc 01       	movw	r30, r24
    1a56:	e1 58       	subi	r30, 0x81	; 129
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8c 8b       	std	Y+20, r24	; 0x14
				exitflag=1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
				if(exitflag==1)
    1a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	39 f0       	breq	.+14     	; 0x1a76 <KPD_GetKey+0x186>
		}

		//SET COLUMNS LOW
		DIO_voidWritePin(KPD_PORT,(COLUMN_START+i),DIO_LOW);

		for(j=0;j<4;j++)
    1a68:	8a 89       	ldd	r24, Y+18	; 0x12
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	8a 8b       	std	Y+18, r24	; 0x12
    1a6e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	08 f4       	brcc	.+2      	; 0x1a76 <KPD_GetKey+0x186>
    1a74:	64 cf       	rjmp	.-312    	; 0x193e <KPD_GetKey+0x4e>
				{
					break;
				}
			}
		}
		if(exitflag==1)
    1a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	39 f0       	breq	.+14     	; 0x1a8a <KPD_GetKey+0x19a>
	u8 key=NoPressedKEY;
	u8 i,j,k;
	u8 result;
	u8 exitflag=0;

	for(i=0;i<4;i++)
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	84 30       	cpi	r24, 0x04	; 4
    1a86:	08 f4       	brcc	.+2      	; 0x1a8a <KPD_GetKey+0x19a>
    1a88:	42 cf       	rjmp	.-380    	; 0x190e <KPD_GetKey+0x1e>
		{
			break;
		}
	}

	return key;
    1a8a:	8c 89       	ldd	r24, Y+20	; 0x14
}
    1a8c:	64 96       	adiw	r28, 0x14	; 20
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <LCD_vidInit>:
#include <util/delay.h>
//#include "LCD_private.h"
//#include "LCD_config.h"

void LCD_vidInit(void)
{
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	c4 55       	subi	r28, 0x54	; 84
    1aac:	d0 40       	sbci	r29, 0x00	; 0
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
	//PORT IS OUTPUT FORM CONFIGURATION DIO_CONFIG.H

	//make enable low
	DIO_voidWritePin(lcd_CONTROLPORT ,lcd_EPIN,DIO_LOW);
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	66 e0       	ldi	r22, 0x06	; 6
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ef 5a       	subi	r30, 0xAF	; 175
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a0 ef       	ldi	r26, 0xF0	; 240
    1ace:	b1 e4       	ldi	r27, 0x41	; 65
    1ad0:	80 83       	st	Z, r24
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	a2 83       	std	Z+2, r26	; 0x02
    1ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	03 5b       	subi	r16, 0xB3	; 179
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ef 5a       	subi	r30, 0xAF	; 175
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a ef       	ldi	r20, 0xFA	; 250
    1af2:	54 e4       	ldi	r21, 0x44	; 68
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b06:	fe 01       	movw	r30, r28
    1b08:	e3 5b       	subi	r30, 0xB3	; 179
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	44 f4       	brge	.+16     	; 0x1b34 <LCD_vidInit+0x96>
		__ticks = 1;
    1b24:	fe 01       	movw	r30, r28
    1b26:	e5 5b       	subi	r30, 0xB5	; 181
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	64 c0       	rjmp	.+200    	; 0x1bfc <LCD_vidInit+0x15e>
	else if (__tmp > 65535)
    1b34:	fe 01       	movw	r30, r28
    1b36:	e3 5b       	subi	r30, 0xB3	; 179
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <LCD_vidInit+0xb6>
    1b52:	43 c0       	rjmp	.+134    	; 0x1bda <LCD_vidInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	fe 01       	movw	r30, r28
    1b56:	ef 5a       	subi	r30, 0xAF	; 175
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8e 01       	movw	r16, r28
    1b74:	05 5b       	subi	r16, 0xB5	; 181
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	1f c0       	rjmp	.+62     	; 0x1bca <LCD_vidInit+0x12c>
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e7 5b       	subi	r30, 0xB7	; 183
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e7 5b       	subi	r30, 0xB7	; 183
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_vidInit+0x106>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e7 5b       	subi	r30, 0xB7	; 183
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	de 01       	movw	r26, r28
    1bb4:	a5 5b       	subi	r26, 0xB5	; 181
    1bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e5 5b       	subi	r30, 0xB5	; 181
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	9c 93       	st	X, r25
    1bc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e5 5b       	subi	r30, 0xB5	; 181
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	d1 f6       	brne	.-76     	; 0x1b8c <LCD_vidInit+0xee>
    1bd8:	27 c0       	rjmp	.+78     	; 0x1c28 <LCD_vidInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	8e 01       	movw	r16, r28
    1bdc:	05 5b       	subi	r16, 0xB5	; 181
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	e3 5b       	subi	r30, 0xB3	; 179
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	80 83       	st	Z, r24
    1bfc:	de 01       	movw	r26, r28
    1bfe:	a9 5b       	subi	r26, 0xB9	; 185
    1c00:	bf 4f       	sbci	r27, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	e5 5b       	subi	r30, 0xB5	; 181
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	8d 93       	st	X+, r24
    1c0e:	9c 93       	st	X, r25
    1c10:	fe 01       	movw	r30, r28
    1c12:	e9 5b       	subi	r30, 0xB9	; 185
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_vidInit+0x17c>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e9 5b       	subi	r30, 0xB9	; 185
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24

	_delay_ms(30);
	LCD_vidSendCommand(lcd_Home);
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ed 5b       	subi	r30, 0xBD	; 189
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 ea       	ldi	r26, 0xA0	; 160
    1c3a:	b0 e4       	ldi	r27, 0x40	; 64
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	8e 01       	movw	r16, r28
    1c46:	01 5c       	subi	r16, 0xC1	; 193
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ed 5b       	subi	r30, 0xBD	; 189
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 83       	st	Z, r24
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	a2 83       	std	Z+2, r26	; 0x02
    1c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c72:	fe 01       	movw	r30, r28
    1c74:	ff 96       	adiw	r30, 0x3f	; 63
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <LCD_vidInit+0x1fa>
		__ticks = 1;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9e af       	std	Y+62, r25	; 0x3e
    1c94:	8d af       	std	Y+61, r24	; 0x3d
    1c96:	46 c0       	rjmp	.+140    	; 0x1d24 <LCD_vidInit+0x286>
	else if (__tmp > 65535)
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ff 96       	adiw	r30, 0x3f	; 63
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	64 f5       	brge	.+88     	; 0x1d0c <LCD_vidInit+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ed 5b       	subi	r30, 0xBD	; 189
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e af       	std	Y+62, r25	; 0x3e
    1ce0:	8d af       	std	Y+61, r24	; 0x3d
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_vidInit+0x264>
    1ce4:	88 ec       	ldi	r24, 0xC8	; 200
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9c af       	std	Y+60, r25	; 0x3c
    1cea:	8b af       	std	Y+59, r24	; 0x3b
    1cec:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cee:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_vidInit+0x252>
    1cf4:	9c af       	std	Y+60, r25	; 0x3c
    1cf6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cfa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9e af       	std	Y+62, r25	; 0x3e
    1d00:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_vidInit+0x246>
    1d0a:	16 c0       	rjmp	.+44     	; 0x1d38 <LCD_vidInit+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ff 96       	adiw	r30, 0x3f	; 63
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e af       	std	Y+62, r25	; 0x3e
    1d22:	8d af       	std	Y+61, r24	; 0x3d
    1d24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d28:	9a af       	std	Y+58, r25	; 0x3a
    1d2a:	89 af       	std	Y+57, r24	; 0x39
    1d2c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_vidInit+0x292>
    1d34:	9a af       	std	Y+58, r25	; 0x3a
    1d36:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    1d38:	88 e3       	ldi	r24, 0x38	; 56
    1d3a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 ea       	ldi	r26, 0xA0	; 160
    1d44:	b0 e4       	ldi	r27, 0x40	; 64
    1d46:	8d ab       	std	Y+53, r24	; 0x35
    1d48:	9e ab       	std	Y+54, r25	; 0x36
    1d4a:	af ab       	std	Y+55, r26	; 0x37
    1d4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d50:	7e a9       	ldd	r23, Y+54	; 0x36
    1d52:	8f a9       	ldd	r24, Y+55	; 0x37
    1d54:	98 ad       	ldd	r25, Y+56	; 0x38
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a ef       	ldi	r20, 0xFA	; 250
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	89 ab       	std	Y+49, r24	; 0x31
    1d68:	9a ab       	std	Y+50, r25	; 0x32
    1d6a:	ab ab       	std	Y+51, r26	; 0x33
    1d6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d70:	7a a9       	ldd	r23, Y+50	; 0x32
    1d72:	8b a9       	ldd	r24, Y+51	; 0x33
    1d74:	9c a9       	ldd	r25, Y+52	; 0x34
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_vidInit+0x2f2>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_vidInit+0x370>
	else if (__tmp > 65535)
    1d90:	69 a9       	ldd	r22, Y+49	; 0x31
    1d92:	7a a9       	ldd	r23, Y+50	; 0x32
    1d94:	8b a9       	ldd	r24, Y+51	; 0x33
    1d96:	9c a9       	ldd	r25, Y+52	; 0x34
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_vidInit+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6d a9       	ldd	r22, Y+53	; 0x35
    1daa:	7e a9       	ldd	r23, Y+54	; 0x36
    1dac:	8f a9       	ldd	r24, Y+55	; 0x37
    1dae:	98 ad       	ldd	r25, Y+56	; 0x38
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	98 ab       	std	Y+48, r25	; 0x30
    1dce:	8f a7       	std	Y+47, r24	; 0x2f
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_vidInit+0x352>
    1dd2:	88 ec       	ldi	r24, 0xC8	; 200
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e a7       	std	Y+46, r25	; 0x2e
    1dd8:	8d a7       	std	Y+45, r24	; 0x2d
    1dda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ddc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_vidInit+0x340>
    1de2:	9e a7       	std	Y+46, r25	; 0x2e
    1de4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	98 ab       	std	Y+48, r25	; 0x30
    1dee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df2:	98 a9       	ldd	r25, Y+48	; 0x30
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_vidInit+0x334>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <LCD_vidInit+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1e00:	9c a9       	ldd	r25, Y+52	; 0x34
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
    1e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e10:	98 a9       	ldd	r25, Y+48	; 0x30
    1e12:	9c a7       	std	Y+44, r25	; 0x2c
    1e14:	8b a7       	std	Y+43, r24	; 0x2b
    1e16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_vidInit+0x37c>
    1e1e:	9c a7       	std	Y+44, r25	; 0x2c
    1e20:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	LCD_vidSendCommand(lcd_DisplayOn);
    1e22:	8f e0       	ldi	r24, 0x0F	; 15
    1e24:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e2e:	b0 e4       	ldi	r27, 0x40	; 64
    1e30:	8f a3       	std	Y+39, r24	; 0x27
    1e32:	98 a7       	std	Y+40, r25	; 0x28
    1e34:	a9 a7       	std	Y+41, r26	; 0x29
    1e36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8b a3       	std	Y+35, r24	; 0x23
    1e52:	9c a3       	std	Y+36, r25	; 0x24
    1e54:	ad a3       	std	Y+37, r26	; 0x25
    1e56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e58:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <LCD_vidInit+0x3dc>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <LCD_vidInit+0x45a>
	else if (__tmp > 65535)
    1e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e80:	9e a1       	ldd	r25, Y+38	; 0x26
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <LCD_vidInit+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6f a1       	ldd	r22, Y+39	; 0x27
    1e94:	78 a5       	ldd	r23, Y+40	; 0x28
    1e96:	89 a5       	ldd	r24, Y+41	; 0x29
    1e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	89 a3       	std	Y+33, r24	; 0x21
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_vidInit+0x43c>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_vidInit+0x42a>
    1ecc:	98 a3       	std	Y+32, r25	; 0x20
    1ece:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_vidInit+0x41e>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <LCD_vidInit+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
    1f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_vidInit+0x466>
    1f08:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_vidSendCommand(lcd_Clear);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 ea       	ldi	r26, 0xA0	; 160
    1f18:	b0 e4       	ldi	r27, 0x40	; 64
    1f1a:	89 8f       	std	Y+25, r24	; 0x19
    1f1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	69 8d       	ldd	r22, Y+25	; 0x19
    1f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8d 8b       	std	Y+21, r24	; 0x15
    1f3c:	9e 8b       	std	Y+22, r25	; 0x16
    1f3e:	af 8b       	std	Y+23, r26	; 0x17
    1f40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f42:	6d 89       	ldd	r22, Y+21	; 0x15
    1f44:	7e 89       	ldd	r23, Y+22	; 0x16
    1f46:	8f 89       	ldd	r24, Y+23	; 0x17
    1f48:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e8       	ldi	r20, 0x80	; 128
    1f50:	5f e3       	ldi	r21, 0x3F	; 63
    1f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <LCD_vidInit+0x4c6>
		__ticks = 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
    1f62:	3f c0       	rjmp	.+126    	; 0x1fe2 <LCD_vidInit+0x544>
	else if (__tmp > 65535)
    1f64:	6d 89       	ldd	r22, Y+21	; 0x15
    1f66:	7e 89       	ldd	r23, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	4c f5       	brge	.+82     	; 0x1fce <LCD_vidInit+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <LCD_vidInit+0x526>
    1fa6:	88 ec       	ldi	r24, 0xC8	; 200
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9a 8b       	std	Y+18, r25	; 0x12
    1fac:	89 8b       	std	Y+17, r24	; 0x11
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_vidInit+0x514>
    1fb6:	9a 8b       	std	Y+18, r25	; 0x12
    1fb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f7       	brne	.-38     	; 0x1fa6 <LCD_vidInit+0x508>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <LCD_vidInit+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fce:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9c 8b       	std	Y+20, r25	; 0x14
    1fe0:	8b 8b       	std	Y+19, r24	; 0x13
    1fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe6:	98 8b       	std	Y+16, r25	; 0x10
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	98 89       	ldd	r25, Y+16	; 0x10
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_vidInit+0x550>
    1ff2:	98 8b       	std	Y+16, r25	; 0x10
    1ff4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	LCD_vidSendCommand(lcd_EntryMode);
    1ff6:	86 e0       	ldi	r24, 0x06	; 6
    1ff8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 ea       	ldi	r26, 0xA0	; 160
    2002:	b0 e4       	ldi	r27, 0x40	; 64
    2004:	8b 87       	std	Y+11, r24	; 0x0b
    2006:	9c 87       	std	Y+12, r25	; 0x0c
    2008:	ad 87       	std	Y+13, r26	; 0x0d
    200a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	98 87       	std	Y+8, r25	; 0x08
    2028:	a9 87       	std	Y+9, r26	; 0x09
    202a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_vidInit+0x5b0>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_vidInit+0x62e>
	else if (__tmp > 65535)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_vidInit+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_vidInit+0x610>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_vidInit+0x5fe>
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_vidInit+0x5f2>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <LCD_vidInit+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_vidInit+0x63a>
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    20e0:	cc 5a       	subi	r28, 0xAC	; 172
    20e2:	df 4f       	sbci	r29, 0xFF	; 255
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	08 95       	ret

000020f8 <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 u8CmdCpy)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	2f 97       	sbiw	r28, 0x0f	; 15
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	8f 87       	std	Y+15, r24	; 0x0f
	//COMMAND(0) OR DATA(1)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RSPIN,DIO_LOW);
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	64 e0       	ldi	r22, 0x04	; 4
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	//read(1) OR write(0)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RWPIN,DIO_LOW);
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	65 e0       	ldi	r22, 0x05	; 5
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//make enable low
	DIO_voidWritePin(lcd_CONTROLPORT ,lcd_EPIN,DIO_LOW);
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	66 e0       	ldi	r22, 0x06	; 6
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//WRITE COMMAND ON DATA_PINS
	DIO_voidWritePort(lcd_DATAPORT,u8CmdCpy);
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2130:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_voidWritePort>

	//ENABLE SEQUENCE
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_HIGH);
    2134:	83 e0       	ldi	r24, 0x03	; 3
    2136:	66 e0       	ldi	r22, 0x06	; 6
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a0 ea       	ldi	r26, 0xA0	; 160
    2144:	b0 e4       	ldi	r27, 0x40	; 64
    2146:	8b 87       	std	Y+11, r24	; 0x0b
    2148:	9c 87       	std	Y+12, r25	; 0x0c
    214a:	ad 87       	std	Y+13, r26	; 0x0d
    214c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2150:	7c 85       	ldd	r23, Y+12	; 0x0c
    2152:	8d 85       	ldd	r24, Y+13	; 0x0d
    2154:	9e 85       	ldd	r25, Y+14	; 0x0e
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a ef       	ldi	r20, 0xFA	; 250
    215c:	54 e4       	ldi	r21, 0x44	; 68
    215e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8f 83       	std	Y+7, r24	; 0x07
    2168:	98 87       	std	Y+8, r25	; 0x08
    216a:	a9 87       	std	Y+9, r26	; 0x09
    216c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216e:	6f 81       	ldd	r22, Y+7	; 0x07
    2170:	78 85       	ldd	r23, Y+8	; 0x08
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e8       	ldi	r20, 0x80	; 128
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2182:	88 23       	and	r24, r24
    2184:	2c f4       	brge	.+10     	; 0x2190 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	3f c0       	rjmp	.+126    	; 0x220e <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	3f ef       	ldi	r19, 0xFF	; 255
    219c:	4f e7       	ldi	r20, 0x7F	; 127
    219e:	57 e4       	ldi	r21, 0x47	; 71
    21a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a4:	18 16       	cp	r1, r24
    21a6:	4c f5       	brge	.+82     	; 0x21fa <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <LCD_vidSendCommand+0xf8>
    21d2:	88 ec       	ldi	r24, 0xC8	; 200
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_vidSendCommand+0xe6>
    21e2:	9c 83       	std	Y+4, r25	; 0x04
    21e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <LCD_vidSendCommand+0xda>
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	6f 81       	ldd	r22, Y+7	; 0x07
    21fc:	78 85       	ldd	r23, Y+8	; 0x08
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_vidSendCommand+0x122>
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	66 e0       	ldi	r22, 0x06	; 6
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

}
    222c:	2f 96       	adiw	r28, 0x0f	; 15
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <LCD_vidWriteCharctr>:
void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	2f 97       	sbiw	r28, 0x0f	; 15
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	8f 87       	std	Y+15, r24	; 0x0f
	//COMMAND(0) OR DATA(1)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RSPIN,DIO_HIGH);
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	64 e0       	ldi	r22, 0x04	; 4
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	//read(1) OR write(0)
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_RWPIN,DIO_LOW);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	65 e0       	ldi	r22, 0x05	; 5
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//make enable low
	DIO_voidWritePin(lcd_CONTROLPORT ,lcd_EPIN,DIO_LOW);
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	66 e0       	ldi	r22, 0x06	; 6
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>

	//WRITE COMMAND ON DATA_PINS
	DIO_voidWritePort(lcd_DATAPORT,u8DataCpy);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	6f 85       	ldd	r22, Y+15	; 0x0f
    2276:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DIO_voidWritePort>

	//ENABLE SEQUENCE
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_HIGH);
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	66 e0       	ldi	r22, 0x06	; 6
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 ea       	ldi	r26, 0xA0	; 160
    228a:	b0 e4       	ldi	r27, 0x40	; 64
    228c:	8b 87       	std	Y+11, r24	; 0x0b
    228e:	9c 87       	std	Y+12, r25	; 0x0c
    2290:	ad 87       	std	Y+13, r26	; 0x0d
    2292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2294:	6b 85       	ldd	r22, Y+11	; 0x0b
    2296:	7c 85       	ldd	r23, Y+12	; 0x0c
    2298:	8d 85       	ldd	r24, Y+13	; 0x0d
    229a:	9e 85       	ldd	r25, Y+14	; 0x0e
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	4a ef       	ldi	r20, 0xFA	; 250
    22a2:	54 e4       	ldi	r21, 0x44	; 68
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	8f 83       	std	Y+7, r24	; 0x07
    22ae:	98 87       	std	Y+8, r25	; 0x08
    22b0:	a9 87       	std	Y+9, r26	; 0x09
    22b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e8       	ldi	r20, 0x80	; 128
    22c2:	5f e3       	ldi	r21, 0x3F	; 63
    22c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c8:	88 23       	and	r24, r24
    22ca:	2c f4       	brge	.+10     	; 0x22d6 <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	3f c0       	rjmp	.+126    	; 0x2354 <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	3f ef       	ldi	r19, 0xFF	; 255
    22e2:	4f e7       	ldi	r20, 0x7F	; 127
    22e4:	57 e4       	ldi	r21, 0x47	; 71
    22e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ea:	18 16       	cp	r1, r24
    22ec:	4c f5       	brge	.+82     	; 0x2340 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e2       	ldi	r20, 0x20	; 32
    22fc:	51 e4       	ldi	r21, 0x41	; 65
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <LCD_vidWriteCharctr+0xf8>
    2318:	88 ec       	ldi	r24, 0xC8	; 200
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9c 83       	std	Y+4, r25	; 0x04
    231e:	8b 83       	std	Y+3, r24	; 0x03
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <LCD_vidWriteCharctr+0xe6>
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	69 f7       	brne	.-38     	; 0x2318 <LCD_vidWriteCharctr+0xda>
    233e:	14 c0       	rjmp	.+40     	; 0x2368 <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	f1 f7       	brne	.-4      	; 0x2360 <LCD_vidWriteCharctr+0x122>
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_voidWritePin(lcd_CONTROLPORT,lcd_EPIN,DIO_LOW);
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	66 e0       	ldi	r22, 0x06	; 6
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
}
    2372:	2f 96       	adiw	r28, 0x0f	; 15
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_vidWriteString>:

void LCD_vidWriteString (const char* pu8StringCpy)//LCD_vidWriteString
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <LCD_vidWriteString+0x6>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <LCD_vidWriteString+0x24>
//	for(i=0;i<u8Index;i++)
//	{
//		LCD_vidWriteCharctr(pu8StringCpy[i]);
//	}
	 while (*pu8StringCpy != '\0') {
	        LCD_vidWriteCharctr(*pu8StringCpy);
    2394:	e9 81       	ldd	r30, Y+1	; 0x01
    2396:	fa 81       	ldd	r31, Y+2	; 0x02
    2398:	80 81       	ld	r24, Z
    239a:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
	        pu8StringCpy++;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
//
//	for(i=0;i<u8Index;i++)
//	{
//		LCD_vidWriteCharctr(pu8StringCpy[i]);
//	}
	 while (*pu8StringCpy != '\0') {
    23a8:	e9 81       	ldd	r30, Y+1	; 0x01
    23aa:	fa 81       	ldd	r31, Y+2	; 0x02
    23ac:	80 81       	ld	r24, Z
    23ae:	88 23       	and	r24, r24
    23b0:	89 f7       	brne	.-30     	; 0x2394 <LCD_vidWriteString+0x10>
	        LCD_vidWriteCharctr(*pu8StringCpy);
	        pu8StringCpy++;
	    }
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <LCD_WRITE_STRING>:
	void LCD_WRITE_STRING( char* string)
	{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <LCD_WRITE_STRING+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <LCD_WRITE_STRING+0x8>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
		int count=0;
    23cc:	1a 82       	std	Y+2, r1	; 0x02
    23ce:	19 82       	std	Y+1, r1	; 0x01
    23d0:	2c c0       	rjmp	.+88     	; 0x242a <LCD_WRITE_STRING+0x6e>
		while(*string > 0){
			count++;
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidWriteCharctr( *string++);
    23dc:	eb 81       	ldd	r30, Y+3	; 0x03
    23de:	fc 81       	ldd	r31, Y+4	; 0x04
    23e0:	20 81       	ld	r18, Z
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	9c 83       	std	Y+4, r25	; 0x04
    23ea:	8b 83       	std	Y+3, r24	; 0x03
    23ec:	82 2f       	mov	r24, r18
    23ee:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
			if(count ==16){
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	80 31       	cpi	r24, 0x10	; 16
    23f8:	91 05       	cpc	r25, r1
    23fa:	21 f4       	brne	.+8      	; 0x2404 <LCD_WRITE_STRING+0x48>
				Gotoxy( 1, 1);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
			}
			if(count == 32 || count==33){
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	80 32       	cpi	r24, 0x20	; 32
    240a:	91 05       	cpc	r25, r1
    240c:	29 f0       	breq	.+10     	; 0x2418 <LCD_WRITE_STRING+0x5c>
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	81 32       	cpi	r24, 0x21	; 33
    2414:	91 05       	cpc	r25, r1
    2416:	49 f4       	brne	.+18     	; 0x242a <LCD_WRITE_STRING+0x6e>
				LCD_vidSendCommand(lcd_Clear);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
				Gotoxy(0,1);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	61 e0       	ldi	r22, 0x01	; 1
    2422:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				count=0;
    2426:	1a 82       	std	Y+2, r1	; 0x02
    2428:	19 82       	std	Y+1, r1	; 0x01
	    }
}
	void LCD_WRITE_STRING( char* string)
	{
		int count=0;
		while(*string > 0){
    242a:	eb 81       	ldd	r30, Y+3	; 0x03
    242c:	fc 81       	ldd	r31, Y+4	; 0x04
    242e:	80 81       	ld	r24, Z
    2430:	88 23       	and	r24, r24
    2432:	79 f6       	brne	.-98     	; 0x23d2 <LCD_WRITE_STRING+0x16>
				LCD_vidSendCommand(lcd_Clear);
				Gotoxy(0,1);
				count=0;
			}
		}
	}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <Gotoxy>:



void Gotoxy (u8 x,u8 y)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <Gotoxy+0x6>
    2448:	00 d0       	rcall	.+0      	; 0x244a <Gotoxy+0x8>
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	6a 83       	std	Y+2, r22	; 0x02
	if(x>=0 && x<16)
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	80 31       	cpi	r24, 0x10	; 16
    2456:	c8 f4       	brcc	.+50     	; 0x248a <Gotoxy+0x48>
	{
		switch(y)
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	3c 83       	std	Y+4, r19	; 0x04
    2460:	2b 83       	std	Y+3, r18	; 0x03
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	9c 81       	ldd	r25, Y+4	; 0x04
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	91 05       	cpc	r25, r1
    246a:	31 f0       	breq	.+12     	; 0x2478 <Gotoxy+0x36>
    246c:	2b 81       	ldd	r18, Y+3	; 0x03
    246e:	3c 81       	ldd	r19, Y+4	; 0x04
    2470:	22 30       	cpi	r18, 0x02	; 2
    2472:	31 05       	cpc	r19, r1
    2474:	31 f0       	breq	.+12     	; 0x2482 <Gotoxy+0x40>
    2476:	09 c0       	rjmp	.+18     	; 0x248a <Gotoxy+0x48>
		{
		case 1:
				LCD_vidSendCommand(x+LineOneStart);
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	80 58       	subi	r24, 0x80	; 128
    247c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    2480:	04 c0       	rjmp	.+8      	; 0x248a <Gotoxy+0x48>
			break;
		case 2:
			LCD_vidSendCommand(x+LineTwoStart);
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	80 54       	subi	r24, 0x40	; 64
    2486:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
	else
	{
		//do nothing
	}

}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <LCD_vidWriteExtraChar>:
void LCD_vidWriteExtraChar (u8 x,const u8* y)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <LCD_vidWriteExtraChar+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <LCD_vidWriteExtraChar+0x8>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	7c 83       	std	Y+4, r23	; 0x04
    24a8:	6b 83       	std	Y+3, r22	; 0x03

	u8 i;

	LCD_vidSendCommand(lcd_SetCGRAM + (x * 8)); // Set CGRAM address  0x40 = 0b010000000
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	08 96       	adiw	r24, 0x08	; 8
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

	for (i = 0; i < 8; i++) {
    24c2:	19 82       	std	Y+1, r1	; 0x01
    24c4:	0e c0       	rjmp	.+28     	; 0x24e2 <LCD_vidWriteExtraChar+0x4a>
	        LCD_vidWriteCharctr(y[i]);
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	fc 01       	movw	r30, r24
    24d2:	e2 0f       	add	r30, r18
    24d4:	f3 1f       	adc	r31, r19
    24d6:	80 81       	ld	r24, Z
    24d8:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>

	u8 i;

	LCD_vidSendCommand(lcd_SetCGRAM + (x * 8)); // Set CGRAM address  0x40 = 0b010000000

	for (i = 0; i < 8; i++) {
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	8f 5f       	subi	r24, 0xFF	; 255
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	88 30       	cpi	r24, 0x08	; 8
    24e6:	78 f3       	brcs	.-34     	; 0x24c6 <LCD_vidWriteExtraChar+0x2e>
	        LCD_vidWriteCharctr(y[i]);
	}
	    // Return to DDRAM address
	    Gotoxy(0,1); //0b1000 0000
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
}
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <custom_itoa>:

void custom_itoa(int num, char* buffer, int base) {
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	64 97       	sbiw	r28, 0x14	; 20
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	9d 87       	std	Y+13, r25	; 0x0d
    2514:	8c 87       	std	Y+12, r24	; 0x0c
    2516:	7f 87       	std	Y+15, r23	; 0x0f
    2518:	6e 87       	std	Y+14, r22	; 0x0e
    251a:	59 8b       	std	Y+17, r21	; 0x11
    251c:	48 8b       	std	Y+16, r20	; 0x10
    int i = 0;
    251e:	1b 86       	std	Y+11, r1	; 0x0b
    2520:	1a 86       	std	Y+10, r1	; 0x0a
    int isNegative = 0;
    2522:	19 86       	std	Y+9, r1	; 0x09
    2524:	18 86       	std	Y+8, r1	; 0x08

    // Handle 0 explicitly, otherwise empty string is printed
    if (num == 0) {
    2526:	8c 85       	ldd	r24, Y+12	; 0x0c
    2528:	9d 85       	ldd	r25, Y+13	; 0x0d
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	b1 f4       	brne	.+44     	; 0x255a <custom_itoa+0x5c>
        buffer[i++] = '0';
    252e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2530:	3b 85       	ldd	r19, Y+11	; 0x0b
    2532:	8e 85       	ldd	r24, Y+14	; 0x0e
    2534:	9f 85       	ldd	r25, Y+15	; 0x0f
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	80 e3       	ldi	r24, 0x30	; 48
    253e:	80 83       	st	Z, r24
    2540:	8a 85       	ldd	r24, Y+10	; 0x0a
    2542:	9b 85       	ldd	r25, Y+11	; 0x0b
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	9b 87       	std	Y+11, r25	; 0x0b
    2548:	8a 87       	std	Y+10, r24	; 0x0a
        buffer[i] = '\0';
    254a:	2a 85       	ldd	r18, Y+10	; 0x0a
    254c:	3b 85       	ldd	r19, Y+11	; 0x0b
    254e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2550:	9f 85       	ldd	r25, Y+15	; 0x0f
    2552:	fc 01       	movw	r30, r24
    2554:	e2 0f       	add	r30, r18
    2556:	f3 1f       	adc	r31, r19
    2558:	10 82       	st	Z, r1
    }

    // Handle negative numbers only if base is 10
    if (num < 0 && base == 10) {
    255a:	8c 85       	ldd	r24, Y+12	; 0x0c
    255c:	9d 85       	ldd	r25, Y+13	; 0x0d
    255e:	99 23       	and	r25, r25
    2560:	0c f0       	brlt	.+2      	; 0x2564 <custom_itoa+0x66>
    2562:	45 c0       	rjmp	.+138    	; 0x25ee <custom_itoa+0xf0>
    2564:	88 89       	ldd	r24, Y+16	; 0x10
    2566:	99 89       	ldd	r25, Y+17	; 0x11
    2568:	8a 30       	cpi	r24, 0x0A	; 10
    256a:	91 05       	cpc	r25, r1
    256c:	09 f0       	breq	.+2      	; 0x2570 <custom_itoa+0x72>
    256e:	3f c0       	rjmp	.+126    	; 0x25ee <custom_itoa+0xf0>
        isNegative = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	99 87       	std	Y+9, r25	; 0x09
    2576:	88 87       	std	Y+8, r24	; 0x08
        num = -num;
    2578:	8c 85       	ldd	r24, Y+12	; 0x0c
    257a:	9d 85       	ldd	r25, Y+13	; 0x0d
    257c:	90 95       	com	r25
    257e:	81 95       	neg	r24
    2580:	9f 4f       	sbci	r25, 0xFF	; 255
    2582:	9d 87       	std	Y+13, r25	; 0x0d
    2584:	8c 87       	std	Y+12, r24	; 0x0c
    2586:	33 c0       	rjmp	.+102    	; 0x25ee <custom_itoa+0xf0>
    }

    while (num != 0) {
        int rem = num % base;
    2588:	8c 85       	ldd	r24, Y+12	; 0x0c
    258a:	9d 85       	ldd	r25, Y+13	; 0x0d
    258c:	28 89       	ldd	r18, Y+16	; 0x10
    258e:	39 89       	ldd	r19, Y+17	; 0x11
    2590:	b9 01       	movw	r22, r18
    2592:	0e 94 29 2b 	call	0x5652	; 0x5652 <__divmodhi4>
    2596:	9b 83       	std	Y+3, r25	; 0x03
    2598:	8a 83       	std	Y+2, r24	; 0x02
        buffer[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
    259a:	2a 85       	ldd	r18, Y+10	; 0x0a
    259c:	3b 85       	ldd	r19, Y+11	; 0x0b
    259e:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a2:	ac 01       	movw	r20, r24
    25a4:	42 0f       	add	r20, r18
    25a6:	53 1f       	adc	r21, r19
    25a8:	5c 8b       	std	Y+20, r21	; 0x14
    25aa:	4b 8b       	std	Y+19, r20	; 0x13
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	8a 30       	cpi	r24, 0x0A	; 10
    25b2:	91 05       	cpc	r25, r1
    25b4:	2c f0       	brlt	.+10     	; 0x25c0 <custom_itoa+0xc2>
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	58 2f       	mov	r21, r24
    25ba:	59 5c       	subi	r21, 0xC9	; 201
    25bc:	5a 8b       	std	Y+18, r21	; 0x12
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <custom_itoa+0xca>
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	98 2f       	mov	r25, r24
    25c4:	90 5d       	subi	r25, 0xD0	; 208
    25c6:	9a 8b       	std	Y+18, r25	; 0x12
    25c8:	4a 89       	ldd	r20, Y+18	; 0x12
    25ca:	eb 89       	ldd	r30, Y+19	; 0x13
    25cc:	fc 89       	ldd	r31, Y+20	; 0x14
    25ce:	40 83       	st	Z, r20
    25d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	9b 87       	std	Y+11, r25	; 0x0b
    25d8:	8a 87       	std	Y+10, r24	; 0x0a
        num = num / base;
    25da:	8c 85       	ldd	r24, Y+12	; 0x0c
    25dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    25de:	28 89       	ldd	r18, Y+16	; 0x10
    25e0:	39 89       	ldd	r19, Y+17	; 0x11
    25e2:	b9 01       	movw	r22, r18
    25e4:	0e 94 29 2b 	call	0x5652	; 0x5652 <__divmodhi4>
    25e8:	cb 01       	movw	r24, r22
    25ea:	9d 87       	std	Y+13, r25	; 0x0d
    25ec:	8c 87       	std	Y+12, r24	; 0x0c
    if (num < 0 && base == 10) {
        isNegative = 1;
        num = -num;
    }

    while (num != 0) {
    25ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    25f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	49 f6       	brne	.-110    	; 0x2588 <custom_itoa+0x8a>
        buffer[i++] = (rem > 9) ? (rem - 10) + 'A' : rem + '0';
        num = num / base;
    }

    // Append negative sign for base 10
    if (isNegative && base == 10) {
    25f6:	88 85       	ldd	r24, Y+8	; 0x08
    25f8:	99 85       	ldd	r25, Y+9	; 0x09
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	99 f0       	breq	.+38     	; 0x2624 <custom_itoa+0x126>
    25fe:	88 89       	ldd	r24, Y+16	; 0x10
    2600:	99 89       	ldd	r25, Y+17	; 0x11
    2602:	8a 30       	cpi	r24, 0x0A	; 10
    2604:	91 05       	cpc	r25, r1
    2606:	71 f4       	brne	.+28     	; 0x2624 <custom_itoa+0x126>
        buffer[i++] = '-';
    2608:	2a 85       	ldd	r18, Y+10	; 0x0a
    260a:	3b 85       	ldd	r19, Y+11	; 0x0b
    260c:	8e 85       	ldd	r24, Y+14	; 0x0e
    260e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	8d e2       	ldi	r24, 0x2D	; 45
    2618:	80 83       	st	Z, r24
    261a:	8a 85       	ldd	r24, Y+10	; 0x0a
    261c:	9b 85       	ldd	r25, Y+11	; 0x0b
    261e:	01 96       	adiw	r24, 0x01	; 1
    2620:	9b 87       	std	Y+11, r25	; 0x0b
    2622:	8a 87       	std	Y+10, r24	; 0x0a
    }

    buffer[i] = '\0';
    2624:	2a 85       	ldd	r18, Y+10	; 0x0a
    2626:	3b 85       	ldd	r19, Y+11	; 0x0b
    2628:	8e 85       	ldd	r24, Y+14	; 0x0e
    262a:	9f 85       	ldd	r25, Y+15	; 0x0f
    262c:	fc 01       	movw	r30, r24
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	10 82       	st	Z, r1
    // Reverse the string
    int start = 0;
    2634:	1f 82       	std	Y+7, r1	; 0x07
    2636:	1e 82       	std	Y+6, r1	; 0x06
    int end = i - 1;
    2638:	8a 85       	ldd	r24, Y+10	; 0x0a
    263a:	9b 85       	ldd	r25, Y+11	; 0x0b
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	9d 83       	std	Y+5, r25	; 0x05
    2640:	8c 83       	std	Y+4, r24	; 0x04
    2642:	2c c0       	rjmp	.+88     	; 0x269c <custom_itoa+0x19e>
    while (start < end) {
        char temp = buffer[start];
    2644:	2e 81       	ldd	r18, Y+6	; 0x06
    2646:	3f 81       	ldd	r19, Y+7	; 0x07
    2648:	8e 85       	ldd	r24, Y+14	; 0x0e
    264a:	9f 85       	ldd	r25, Y+15	; 0x0f
    264c:	fc 01       	movw	r30, r24
    264e:	e2 0f       	add	r30, r18
    2650:	f3 1f       	adc	r31, r19
    2652:	80 81       	ld	r24, Z
    2654:	89 83       	std	Y+1, r24	; 0x01
        buffer[start] = buffer[end];
    2656:	2e 81       	ldd	r18, Y+6	; 0x06
    2658:	3f 81       	ldd	r19, Y+7	; 0x07
    265a:	8e 85       	ldd	r24, Y+14	; 0x0e
    265c:	9f 85       	ldd	r25, Y+15	; 0x0f
    265e:	dc 01       	movw	r26, r24
    2660:	a2 0f       	add	r26, r18
    2662:	b3 1f       	adc	r27, r19
    2664:	2c 81       	ldd	r18, Y+4	; 0x04
    2666:	3d 81       	ldd	r19, Y+5	; 0x05
    2668:	8e 85       	ldd	r24, Y+14	; 0x0e
    266a:	9f 85       	ldd	r25, Y+15	; 0x0f
    266c:	fc 01       	movw	r30, r24
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	80 81       	ld	r24, Z
    2674:	8c 93       	st	X, r24
        buffer[end] = temp;
    2676:	2c 81       	ldd	r18, Y+4	; 0x04
    2678:	3d 81       	ldd	r19, Y+5	; 0x05
    267a:	8e 85       	ldd	r24, Y+14	; 0x0e
    267c:	9f 85       	ldd	r25, Y+15	; 0x0f
    267e:	fc 01       	movw	r30, r24
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	80 83       	st	Z, r24
        start++;
    2688:	8e 81       	ldd	r24, Y+6	; 0x06
    268a:	9f 81       	ldd	r25, Y+7	; 0x07
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	9f 83       	std	Y+7, r25	; 0x07
    2690:	8e 83       	std	Y+6, r24	; 0x06
        end--;
    2692:	8c 81       	ldd	r24, Y+4	; 0x04
    2694:	9d 81       	ldd	r25, Y+5	; 0x05
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9d 83       	std	Y+5, r25	; 0x05
    269a:	8c 83       	std	Y+4, r24	; 0x04

    buffer[i] = '\0';
    // Reverse the string
    int start = 0;
    int end = i - 1;
    while (start < end) {
    269c:	2e 81       	ldd	r18, Y+6	; 0x06
    269e:	3f 81       	ldd	r19, Y+7	; 0x07
    26a0:	8c 81       	ldd	r24, Y+4	; 0x04
    26a2:	9d 81       	ldd	r25, Y+5	; 0x05
    26a4:	28 17       	cp	r18, r24
    26a6:	39 07       	cpc	r19, r25
    26a8:	6c f2       	brlt	.-102    	; 0x2644 <custom_itoa+0x146>
        buffer[start] = buffer[end];
        buffer[end] = temp;
        start++;
        end--;
    }
}
    26aa:	64 96       	adiw	r28, 0x14	; 20
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCD_writeNum_u8>:

void LCD_writeNum_u8(u8 num) {
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	2d 97       	sbiw	r28, 0x0d	; 13
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	8d 87       	std	Y+13, r24	; 0x0d
    // Convert the integer to a string
    char numString[12];  //
    itoa(num, numString, 10);
    26d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9e 01       	movw	r18, r28
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	b9 01       	movw	r22, r18
    26e0:	4a e0       	ldi	r20, 0x0A	; 10
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	0e 94 87 2b 	call	0x570e	; 0x570e <itoa>

    // Write the string to the LCD
    LCD_vidWriteString(numString);
    26e8:	ce 01       	movw	r24, r28
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
}
    26f0:	2d 96       	adiw	r28, 0x0d	; 13
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <LCD_writeNum_u32>:

void LCD_writeNum_u32(u32 num) {
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	60 97       	sbiw	r28, 0x10	; 16
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	6d 87       	std	Y+13, r22	; 0x0d
    2718:	7e 87       	std	Y+14, r23	; 0x0e
    271a:	8f 87       	std	Y+15, r24	; 0x0f
    271c:	98 8b       	std	Y+16, r25	; 0x10
    char numString[12];  // Assuming a 32-bit unsigned integer, so at most 10 digits plus null-terminator
    custom_itoa(num, numString, 10);  // Base 10
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	9e 01       	movw	r18, r28
    2724:	2f 5f       	subi	r18, 0xFF	; 255
    2726:	3f 4f       	sbci	r19, 0xFF	; 255
    2728:	b9 01       	movw	r22, r18
    272a:	4a e0       	ldi	r20, 0x0A	; 10
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <custom_itoa>

    // Write the string to the LCD
    LCD_vidWriteString(numString);
    2732:	ce 01       	movw	r24, r28
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
}
    273a:	60 96       	adiw	r28, 0x10	; 16
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <TWI_vMasterInit>:
#include "MTWI_private.h"
#include "MTWI_config.h"


void TWI_vMasterInit(void)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	/* Set Clock configuration  TWBR = 2 */
	TWBR = 2;
    2754:	e0 e2       	ldi	r30, 0x20	; 32
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
    275c:	a1 e2       	ldi	r26, 0x21	; 33
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e1 e2       	ldi	r30, 0x21	; 33
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	8e 7f       	andi	r24, 0xFE	; 254
    2768:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
    276a:	a1 e2       	ldi	r26, 0x21	; 33
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e1 e2       	ldi	r30, 0x21	; 33
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	8d 7f       	andi	r24, 0xFD	; 253
    2776:	8c 93       	st	X, r24

	/* Enable Acknowledge bit */
	//SET_BIT(TWCR , TWCR_TWEA);
	/* Set my own Address */
	TWAR = MASTER_ADDRESS << 1;
    2778:	e2 e2       	ldi	r30, 0x22	; 34
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	84 e6       	ldi	r24, 0x64	; 100
    277e:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2780:	a6 e5       	ldi	r26, 0x56	; 86
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e6 e5       	ldi	r30, 0x56	; 86
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	84 60       	ori	r24, 0x04	; 4
    278c:	8c 93       	st	X, r24
}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <TWI_vSlaveInit>:
void TWI_vSlaveInit(void)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
	/* Enable Acknowledge bit */
	SET_BIT(TWCR , TWCR_TWEA);
    279c:	a6 e5       	ldi	r26, 0x56	; 86
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e6 e5       	ldi	r30, 0x56	; 86
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	80 64       	ori	r24, 0x40	; 64
    27a8:	8c 93       	st	X, r24
	/* Set my own Address */
	TWAR = SLAVE_ADDRESS << 1;
    27aa:	e2 e2       	ldi	r30, 0x22	; 34
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	88 e2       	ldi	r24, 0x28	; 40
    27b0:	80 83       	st	Z, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    27b2:	a6 e5       	ldi	r26, 0x56	; 86
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e6 e5       	ldi	r30, 0x56	; 86
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	84 60       	ori	r24, 0x04	; 4
    27be:	8c 93       	st	X, r24
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <TWI_enStartCondition>:

TWI_ErrorState_t TWI_enStartCondition(void)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    27d0:	19 82       	std	Y+1, r1	; 0x01

	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    27d2:	a6 e5       	ldi	r26, 0x56	; 86
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e6 e5       	ldi	r30, 0x56	; 86
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 62       	ori	r24, 0x20	; 32
    27de:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    27e0:	a6 e5       	ldi	r26, 0x56	; 86
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e6 e5       	ldi	r30, 0x56	; 86
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	80 68       	ori	r24, 0x80	; 128
    27ec:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    27ee:	a6 e5       	ldi	r26, 0x56	; 86
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e6 e5       	ldi	r30, 0x56	; 86
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	84 60       	ori	r24, 0x04	; 4
    27fa:	8c 93       	st	X, r24
	//TWCR = 0b10100100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    27fc:	e6 e5       	ldi	r30, 0x56	; 86
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	88 1f       	adc	r24, r24
    2804:	88 27       	eor	r24, r24
    2806:	88 1f       	adc	r24, r24
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	90 70       	andi	r25, 0x00	; 0
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	a9 f3       	breq	.-22     	; 0x27fc <TWI_enStartCondition+0x36>

	if((TWSR & 0XF8) != START_CONDITION)
    2812:	e1 e2       	ldi	r30, 0x21	; 33
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	88 7f       	andi	r24, 0xF8	; 248
    281e:	90 70       	andi	r25, 0x00	; 0
    2820:	88 30       	cpi	r24, 0x08	; 8
    2822:	91 05       	cpc	r25, r1
    2824:	11 f0       	breq	.+4      	; 0x282a <TWI_enStartCondition+0x64>
	{
		Local_ErrorState = START_CONDTITION_ERR;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    282a:	89 81       	ldd	r24, Y+1	; 0x01
}
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <TWI_enRepeateStart>:
TWI_ErrorState_t TWI_enRepeateStart(void)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    283e:	19 82       	std	Y+1, r1	; 0x01
	/* enable start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    2840:	a6 e5       	ldi	r26, 0x56	; 86
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e6 e5       	ldi	r30, 0x56	; 86
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    284e:	a6 e5       	ldi	r26, 0x56	; 86
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e6 e5       	ldi	r30, 0x56	; 86
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 68       	ori	r24, 0x80	; 128
    285a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    285c:	a6 e5       	ldi	r26, 0x56	; 86
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e6 e5       	ldi	r30, 0x56	; 86
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	84 60       	ori	r24, 0x04	; 4
    2868:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    286a:	e6 e5       	ldi	r30, 0x56	; 86
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	88 1f       	adc	r24, r24
    2872:	88 27       	eor	r24, r24
    2874:	88 1f       	adc	r24, r24
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	90 70       	andi	r25, 0x00	; 0
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	a9 f3       	breq	.-22     	; 0x286a <TWI_enRepeateStart+0x36>

	if((TWSR & 0XF8) != REPEATE_START_CONDITION)
    2880:	e1 e2       	ldi	r30, 0x21	; 33
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	88 2f       	mov	r24, r24
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	88 7f       	andi	r24, 0xF8	; 248
    288c:	90 70       	andi	r25, 0x00	; 0
    288e:	80 31       	cpi	r24, 0x10	; 16
    2890:	91 05       	cpc	r25, r1
    2892:	11 f0       	breq	.+4      	; 0x2898 <TWI_enRepeateStart+0x64>
	{
		Local_ErrorState = REPEAT_START_ERR;
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2898:	89 81       	ldd	r24, Y+1	; 0x01
}
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <TWI_enSetSlaveAddressWithWrite>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <TWI_enSetSlaveAddressWithWrite+0x6>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    28ae:	19 82       	std	Y+1, r1	; 0x01
	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress;
    28b0:	e3 e2       	ldi	r30, 0x23	; 35
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	80 83       	st	Z, r24
	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    28b8:	a6 e5       	ldi	r26, 0x56	; 86
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e6 e5       	ldi	r30, 0x56	; 86
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 7d       	andi	r24, 0xDF	; 223
    28c4:	8c 93       	st	X, r24
	/* Clear bit 0 to make write operation */
	CLR_BIT(TWDR , TWDR_TWD0);
    28c6:	a3 e2       	ldi	r26, 0x23	; 35
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e3 e2       	ldi	r30, 0x23	; 35
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8e 7f       	andi	r24, 0xFE	; 254
    28d2:	8c 93       	st	X, r24

	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    28d4:	a6 e5       	ldi	r26, 0x56	; 86
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e6 e5       	ldi	r30, 0x56	; 86
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	80 68       	ori	r24, 0x80	; 128
    28e0:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    28e2:	a6 e5       	ldi	r26, 0x56	; 86
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e6 e5       	ldi	r30, 0x56	; 86
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	84 60       	ori	r24, 0x04	; 4
    28ee:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    28f0:	e6 e5       	ldi	r30, 0x56	; 86
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	88 1f       	adc	r24, r24
    28f8:	88 27       	eor	r24, r24
    28fa:	88 1f       	adc	r24, r24
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	90 70       	andi	r25, 0x00	; 0
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	a9 f3       	breq	.-22     	; 0x28f0 <TWI_enSetSlaveAddressWithWrite+0x4e>

	if((TWSR & 0XF8) == SLA_WITH_W_NOAK)
    2906:	e1 e2       	ldi	r30, 0x21	; 33
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	88 7f       	andi	r24, 0xF8	; 248
    2912:	90 70       	andi	r25, 0x00	; 0
    2914:	80 32       	cpi	r24, 0x20	; 32
    2916:	91 05       	cpc	r25, r1
    2918:	11 f4       	brne	.+4      	; 0x291e <TWI_enSetSlaveAddressWithWrite+0x7c>
	{
		Local_ErrorState = SLA_W_NOACK_ERR;
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    291e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <TWI_enSetSlaveAddressWithRead>:
TWI_ErrorState_t TWI_enSetSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <TWI_enSetSlaveAddressWithRead+0x6>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2936:	19 82       	std	Y+1, r1	; 0x01

	/* Set Slave address in TWDR register */
	TWDR = Copy_u8SlaveAddress | 1;
    2938:	e3 e2       	ldi	r30, 0x23	; 35
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	81 60       	ori	r24, 0x01	; 1
    2940:	80 83       	st	Z, r24

	/* Clear the start condition bit */
	CLR_BIT(TWCR , TWCR_TWSTA);
    2942:	a6 e5       	ldi	r26, 0x56	; 86
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e6 e5       	ldi	r30, 0x56	; 86
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8f 7d       	andi	r24, 0xDF	; 223
    294e:	8c 93       	st	X, r24
	/* Set bit 0 to make Read operation */
	SET_BIT(TWDR , TWDR_TWD0);
    2950:	a3 e2       	ldi	r26, 0x23	; 35
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e3 e2       	ldi	r30, 0x23	; 35
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	81 60       	ori	r24, 0x01	; 1
    295c:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    295e:	a6 e5       	ldi	r26, 0x56	; 86
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e6 e5       	ldi	r30, 0x56	; 86
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	80 68       	ori	r24, 0x80	; 128
    296a:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    296c:	a6 e5       	ldi	r26, 0x56	; 86
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e6 e5       	ldi	r30, 0x56	; 86
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	84 60       	ori	r24, 0x04	; 4
    2978:	8c 93       	st	X, r24

	//TWCR = 0b10000100;

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    297a:	e6 e5       	ldi	r30, 0x56	; 86
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	88 1f       	adc	r24, r24
    2982:	88 27       	eor	r24, r24
    2984:	88 1f       	adc	r24, r24
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	90 70       	andi	r25, 0x00	; 0
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	a9 f3       	breq	.-22     	; 0x297a <TWI_enSetSlaveAddressWithRead+0x50>

	if((TWSR & 0XF8) == SLA_WITH_R_NOAK)
    2990:	e1 e2       	ldi	r30, 0x21	; 33
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	88 7f       	andi	r24, 0xF8	; 248
    299c:	90 70       	andi	r25, 0x00	; 0
    299e:	88 33       	cpi	r24, 0x38	; 56
    29a0:	91 05       	cpc	r25, r1
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <TWI_enSetSlaveAddressWithRead+0x7e>
	{
		Local_ErrorState = SLA_R_NOACK_ERR;
    29a4:	84 e0       	ldi	r24, 0x04	; 4
    29a6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/* Do Nothing */
	}
	return Local_ErrorState;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01

}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	cf 91       	pop	r28
    29b0:	df 91       	pop	r29
    29b2:	08 95       	ret

000029b4 <TWI_enMasterWriteData>:
TWI_ErrorState_t TWI_enMasterWriteData(u8 Copy_u8Data)
{
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <TWI_enMasterWriteData+0x6>
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    29c0:	19 82       	std	Y+1, r1	; 0x01
	/* Write data to TWDR */
	TWDR = Copy_u8Data;
    29c2:	e3 e2       	ldi	r30, 0x23	; 35
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	80 83       	st	Z, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    29ca:	a6 e5       	ldi	r26, 0x56	; 86
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e6 e5       	ldi	r30, 0x56	; 86
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	80 68       	ori	r24, 0x80	; 128
    29d6:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    29d8:	a6 e5       	ldi	r26, 0x56	; 86
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e6 e5       	ldi	r30, 0x56	; 86
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	84 60       	ori	r24, 0x04	; 4
    29e4:	8c 93       	st	X, r24

	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    29e6:	e6 e5       	ldi	r30, 0x56	; 86
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	88 1f       	adc	r24, r24
    29ee:	88 27       	eor	r24, r24
    29f0:	88 1f       	adc	r24, r24
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	a9 f3       	breq	.-22     	; 0x29e6 <TWI_enMasterWriteData+0x32>

	if((TWSR & 0XF8) == MASTER_SEND_DATA_NOAK)
    29fc:	e1 e2       	ldi	r30, 0x21	; 33
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	88 7f       	andi	r24, 0xF8	; 248
    2a08:	90 70       	andi	r25, 0x00	; 0
    2a0a:	80 33       	cpi	r24, 0x30	; 48
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	11 f4       	brne	.+4      	; 0x2a14 <TWI_enMasterWriteData+0x60>
	{
		Local_ErrorState = MASTER_SEND_DATA_ERR;
    2a10:	85 e0       	ldi	r24, 0x05	; 5
    2a12:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* Do Nothing */
	}

	return Local_ErrorState;
    2a14:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <TWI_enMasterReadData>:
TWI_ErrorState_t TWI_enMasterReadData(u8 *Copy_u8Data)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <TWI_enMasterReadData+0x6>
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	9b 83       	std	Y+3, r25	; 0x03
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_ErrorState = NO_ERROR;
    2a30:	19 82       	std	Y+1, r1	; 0x01

	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2a32:	a6 e5       	ldi	r26, 0x56	; 86
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e6 e5       	ldi	r30, 0x56	; 86
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	84 60       	ori	r24, 0x04	; 4
    2a3e:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2a40:	a6 e5       	ldi	r26, 0x56	; 86
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e6 e5       	ldi	r30, 0x56	; 86
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 68       	ori	r24, 0x80	; 128
    2a4c:	8c 93       	st	X, r24


	//TWCR = 0b10000100;
	/*Wait until the interrupt flag us raised again  */
	while(GET_BIT(TWCR , TWCR_TWINT) == 0);
    2a4e:	e6 e5       	ldi	r30, 0x56	; 86
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	88 1f       	adc	r24, r24
    2a56:	88 27       	eor	r24, r24
    2a58:	88 1f       	adc	r24, r24
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	90 70       	andi	r25, 0x00	; 0
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	a9 f3       	breq	.-22     	; 0x2a4e <TWI_enMasterReadData+0x2e>

	if((TWSR & 0XF8) == MASTER_RECEIVE_DATA_NOAK)
    2a64:	e1 e2       	ldi	r30, 0x21	; 33
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	88 7f       	andi	r24, 0xF8	; 248
    2a70:	90 70       	andi	r25, 0x00	; 0
    2a72:	88 35       	cpi	r24, 0x58	; 88
    2a74:	91 05       	cpc	r25, r1
    2a76:	11 f4       	brne	.+4      	; 0x2a7c <TWI_enMasterReadData+0x5c>
	{
		Local_ErrorState = MASTER_RECEIVE_DATA_ERR;
    2a78:	86 e0       	ldi	r24, 0x06	; 6
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	*Copy_u8Data = TWDR;
    2a7c:	e3 e2       	ldi	r30, 0x23	; 35
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	ea 81       	ldd	r30, Y+2	; 0x02
    2a84:	fb 81       	ldd	r31, Y+3	; 0x03
    2a86:	80 83       	st	Z, r24

	return Local_ErrorState;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <TWI_vStopCondition>:
void TWI_vStopCondition(void)
{
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62

	/* Set bit TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    2a9e:	a6 e5       	ldi	r26, 0x56	; 86
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e6 e5       	ldi	r30, 0x56	; 86
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	80 61       	ori	r24, 0x10	; 16
    2aaa:	8c 93       	st	X, r24
	/* Clear interrupt flag to start the operation */
	SET_BIT(TWCR , TWCR_TWINT);
    2aac:	a6 e5       	ldi	r26, 0x56	; 86
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e6 e5       	ldi	r30, 0x56	; 86
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	80 68       	ori	r24, 0x80	; 128
    2ab8:	8c 93       	st	X, r24
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    2aba:	a6 e5       	ldi	r26, 0x56	; 86
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e6 e5       	ldi	r30, 0x56	; 86
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	84 60       	ori	r24, 0x04	; 4
    2ac6:	8c 93       	st	X, r24
}
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <TIM1_voidInit>:
pf  TIM1_pfCmpBCallBack;
pf  TIM1_pfIcuCallBack;


void TIM1_voidInit(void)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR1A , 0);
	SET_BIT(TCCR1A , 1);
	SET_BIT(TCCR1B , 3);
	CLR_BIT(TCCR1B , 4);
#elif TIM1_MODE ==  TIM1_F_PWM_TO_ICR1
    CLR_BIT(TCCR1A , 0);
    2ad6:	af e4       	ldi	r26, 0x4F	; 79
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ef e4       	ldi	r30, 0x4F	; 79
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	8e 7f       	andi	r24, 0xFE	; 254
    2ae2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 1);
    2ae4:	af e4       	ldi	r26, 0x4F	; 79
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	ef e4       	ldi	r30, 0x4F	; 79
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	82 60       	ori	r24, 0x02	; 2
    2af0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 3);
    2af2:	ae e4       	ldi	r26, 0x4E	; 78
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ee e4       	ldi	r30, 0x4E	; 78
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	88 60       	ori	r24, 0x08	; 8
    2afe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , 4);
    2b00:	ae e4       	ldi	r26, 0x4E	; 78
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ee e4       	ldi	r30, 0x4E	; 78
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	80 61       	ori	r24, 0x10	; 16
    2b0c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_SET_OC1A 
    SET_BIT(TCCR1A , 6);
	SET_BIT(TCCR1A , 7);
#elif TIM1_OUTFORM_comA == TIM1_F_NON_INVERT_OC1A 
    CLR_BIT(TCCR1A , 6);
    2b0e:	af e4       	ldi	r26, 0x4F	; 79
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	ef e4       	ldi	r30, 0x4F	; 79
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	8f 7b       	andi	r24, 0xBF	; 191
    2b1a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 7);
    2b1c:	af e4       	ldi	r26, 0x4F	; 79
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	ef e4       	ldi	r30, 0x4F	; 79
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	80 68       	ori	r24, 0x80	; 128
    2b28:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_SET_OC1B 
    SET_BIT(TCCR1A , 4);
	SET_BIT(TCCR1A , 5);
#elif TIM1_OUTFORM_comB == TIM1_F_NON_INVERT_OC1B 
    CLR_BIT(TCCR1A , 4);
    2b2a:	af e4       	ldi	r26, 0x4F	; 79
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	ef e4       	ldi	r30, 0x4F	; 79
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	8f 7e       	andi	r24, 0xEF	; 239
    2b36:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , 5);
    2b38:	af e4       	ldi	r26, 0x4F	; 79
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	ef e4       	ldi	r30, 0x4F	; 79
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	80 62       	ori	r24, 0x20	; 32
    2b44:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , 4);
	CLR_BIT(TCCR1A , 5);

#endif
  /*Disable timer*/
  TCCR1B &= 0b11111000;
    2b46:	ae e4       	ldi	r26, 0x4E	; 78
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	ee e4       	ldi	r30, 0x4E	; 78
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	88 7f       	andi	r24, 0xF8	; 248
    2b52:	8c 93       	st	X, r24
  /*Disable Int OVF-CMPA,B ICU*/
  CLR_BIT(TIMSK , 2 );
    2b54:	a9 e5       	ldi	r26, 0x59	; 89
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e9 e5       	ldi	r30, 0x59	; 89
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8b 7f       	andi	r24, 0xFB	; 251
    2b60:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 3);
    2b62:	a9 e5       	ldi	r26, 0x59	; 89
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e9 e5       	ldi	r30, 0x59	; 89
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	87 7f       	andi	r24, 0xF7	; 247
    2b6e:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 4 );
    2b70:	a9 e5       	ldi	r26, 0x59	; 89
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	e9 e5       	ldi	r30, 0x59	; 89
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	8f 7e       	andi	r24, 0xEF	; 239
    2b7c:	8c 93       	st	X, r24
  CLR_BIT(TIMSK , 5);
    2b7e:	a9 e5       	ldi	r26, 0x59	; 89
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e9 e5       	ldi	r30, 0x59	; 89
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	8f 7d       	andi	r24, 0xDF	; 223
    2b8a:	8c 93       	st	X, r24
  /*Clear Int OVF-CMP flags*/
  SET_BIT(TIFR , 2 );
    2b8c:	a8 e5       	ldi	r26, 0x58	; 88
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e8 e5       	ldi	r30, 0x58	; 88
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	84 60       	ori	r24, 0x04	; 4
    2b98:	8c 93       	st	X, r24
  SET_BIT(TIFR , 3 );
    2b9a:	a8 e5       	ldi	r26, 0x58	; 88
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e8 e5       	ldi	r30, 0x58	; 88
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 60       	ori	r24, 0x08	; 8
    2ba6:	8c 93       	st	X, r24
  SET_BIT(TIFR , 4 );
    2ba8:	a8 e5       	ldi	r26, 0x58	; 88
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e8 e5       	ldi	r30, 0x58	; 88
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	80 61       	ori	r24, 0x10	; 16
    2bb4:	8c 93       	st	X, r24
  SET_BIT(TIFR , 5 );
    2bb6:	a8 e5       	ldi	r26, 0x58	; 88
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e8 e5       	ldi	r30, 0x58	; 88
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	80 62       	ori	r24, 0x20	; 32
    2bc2:	8c 93       	st	X, r24
  
  /*Clear TCNT,OCE1A,B,ICR*/
  OCR1AL = 0 ;
    2bc4:	ea e4       	ldi	r30, 0x4A	; 74
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	10 82       	st	Z, r1
  OCR1AH = 0 ;
    2bca:	eb e4       	ldi	r30, 0x4B	; 75
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	10 82       	st	Z, r1
  OCR1BL = 0 ;
    2bd0:	e8 e4       	ldi	r30, 0x48	; 72
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	10 82       	st	Z, r1
  OCR1BH = 0 ;
    2bd6:	e9 e4       	ldi	r30, 0x49	; 73
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	10 82       	st	Z, r1
  TCNT1L = 0 ;
    2bdc:	ec e4       	ldi	r30, 0x4C	; 76
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	10 82       	st	Z, r1
  TCNT1H = 0 ;
    2be2:	ed e4       	ldi	r30, 0x4D	; 77
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	10 82       	st	Z, r1
  ICR1L  = 0 ;
    2be8:	e6 e4       	ldi	r30, 0x46	; 70
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	10 82       	st	Z, r1
  ICR1H  = 0 ;
    2bee:	e7 e4       	ldi	r30, 0x47	; 71
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	10 82       	st	Z, r1
  
}
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <TIM1_voidEnable>:
void TIM1_voidEnable(u8 u8PrescalValCpy)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	0f 92       	push	r0
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= 0b11111000;
    2c06:	ae e4       	ldi	r26, 0x4E	; 78
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	ee e4       	ldi	r30, 0x4E	; 78
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	88 7f       	andi	r24, 0xF8	; 248
    2c12:	8c 93       	st	X, r24
	TCCR1B |= u8PrescalValCpy & 0x07 ;// 0b00000111
    2c14:	ae e4       	ldi	r26, 0x4E	; 78
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	ee e4       	ldi	r30, 0x4E	; 78
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	98 2f       	mov	r25, r24
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	87 70       	andi	r24, 0x07	; 7
    2c24:	89 2b       	or	r24, r25
    2c26:	8c 93       	st	X, r24
	
}
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <TIM1_voidDisable>:
void TIM1_voidDisable(void)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    2c38:	ae e4       	ldi	r26, 0x4E	; 78
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	ee e4       	ldi	r30, 0x4E	; 78
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	88 7f       	andi	r24, 0xF8	; 248
    2c44:	8c 93       	st	X, r24
	
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <TIM1_voidEnableOvfInt>:
void TIM1_voidEnableOvfInt(void)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 2 );
    2c54:	a9 e5       	ldi	r26, 0x59	; 89
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e9 e5       	ldi	r30, 0x59	; 89
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	84 60       	ori	r24, 0x04	; 4
    2c60:	8c 93       	st	X, r24
	
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <TIM1_voidDisableOvfInt>:
void TIM1_voidDisableOvfInt(void)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 2 );
    2c70:	a9 e5       	ldi	r26, 0x59	; 89
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e9 e5       	ldi	r30, 0x59	; 89
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	8b 7f       	andi	r24, 0xFB	; 251
    2c7c:	8c 93       	st	X, r24
	
}
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <TIM1_voidEnableCmpAInt>:
void TIM1_voidEnableCmpAInt(void)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 4 );
    2c8c:	a9 e5       	ldi	r26, 0x59	; 89
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	e9 e5       	ldi	r30, 0x59	; 89
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	80 61       	ori	r24, 0x10	; 16
    2c98:	8c 93       	st	X, r24
	
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <TIM1_voidDisableCmpAInt>:
void TIM1_voidDisableCmpAInt(void)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 4 );
    2ca8:	a9 e5       	ldi	r26, 0x59	; 89
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e9 e5       	ldi	r30, 0x59	; 89
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	8f 7e       	andi	r24, 0xEF	; 239
    2cb4:	8c 93       	st	X, r24
	
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <TIM1_voidEnableCmpBInt>:
void TIM1_voidEnableCmpBInt(void)
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 3 );
    2cc4:	a9 e5       	ldi	r26, 0x59	; 89
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	e9 e5       	ldi	r30, 0x59	; 89
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	88 60       	ori	r24, 0x08	; 8
    2cd0:	8c 93       	st	X, r24
	
}
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <TIM1_voidDisableCmpBInt>:
void TIM1_voidDisableCmpBInt(void)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 3);
    2ce0:	a9 e5       	ldi	r26, 0x59	; 89
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e9 e5       	ldi	r30, 0x59	; 89
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	87 7f       	andi	r24, 0xF7	; 247
    2cec:	8c 93       	st	X, r24
	
}
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <TIM1_voidEnableIcu>:
void TIM1_voidEnableIcu(void)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5 );
    2cfc:	a9 e5       	ldi	r26, 0x59	; 89
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e9 e5       	ldi	r30, 0x59	; 89
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	80 62       	ori	r24, 0x20	; 32
    2d08:	8c 93       	st	X, r24
}
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <TIM1_voidDisableIcu>:
void TIM1_voidDisableIcu(void)
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    2d18:	a9 e5       	ldi	r26, 0x59	; 89
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e9 e5       	ldi	r30, 0x59	; 89
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8f 7d       	andi	r24, 0xDF	; 223
    2d24:	8c 93       	st	X, r24
}
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <TIM1_voidSetCallbackOvfInt>:

void TIM1_voidSetCallbackOvfInt(pf pfOvfCalbckCpy)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <TIM1_voidSetCallbackOvfInt+0x6>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	9a 83       	std	Y+2, r25	; 0x02
    2d38:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfOvfCallBack = pfOvfCalbckCpy;
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	90 93 c7 01 	sts	0x01C7, r25
    2d42:	80 93 c6 01 	sts	0x01C6, r24
}
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <TIM1_voidSetCallbackCompAInt>:
void TIM1_voidSetCallbackCompAInt(pf pfCompACalbckCpy)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <TIM1_voidSetCallbackCompAInt+0x6>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpACallBack = pfCompACalbckCpy;
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	9a 81       	ldd	r25, Y+2	; 0x02
    2d62:	90 93 c9 01 	sts	0x01C9, r25
    2d66:	80 93 c8 01 	sts	0x01C8, r24
}
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <TIM1_voidSetCallbackCompBInt>:
void TIM1_voidSetCallbackCompBInt(pf pfCompBCalbckCpy)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <TIM1_voidSetCallbackCompBInt+0x6>
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfCmpBCallBack = pfCompBCalbckCpy;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	90 93 c3 01 	sts	0x01C3, r25
    2d8a:	80 93 c2 01 	sts	0x01C2, r24
}
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <TIM1_voidSetCallbackIcu>:
void TIM1_voidSetCallbackIcu(pf pfIcuCalbckCpy)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <TIM1_voidSetCallbackIcu+0x6>
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
	TIM1_pfIcuCallBack = pfIcuCalbckCpy;
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	90 93 c5 01 	sts	0x01C5, r25
    2dae:	80 93 c4 01 	sts	0x01C4, r24
}
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <TIM1_voidSetTimerValue>:
void TIM1_voidSetTimerValue(u16 u16TimValCpy) //TCNT
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <TIM1_voidSetTimerValue+0x6>
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	9a 83       	std	Y+2, r25	; 0x02
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L =(u8) u16TimValCpy;
    2dca:	ec e4       	ldi	r30, 0x4C	; 76
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	80 83       	st	Z, r24
	TCNT1H =(u8) (u16TimValCpy>>8);
    2dd2:	ed e4       	ldi	r30, 0x4D	; 77
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	89 2f       	mov	r24, r25
    2ddc:	99 27       	eor	r25, r25
    2dde:	80 83       	st	Z, r24
	//TCNT1=u16TimValCpy
}
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	08 95       	ret

00002dea <TIM1_voidSetCmpARegValue>:
void TIM1_voidSetCmpARegValue(u16 u16CmpAValCpy)
{
    2dea:	df 93       	push	r29
    2dec:	cf 93       	push	r28
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <TIM1_voidSetCmpARegValue+0x6>
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	9a 83       	std	Y+2, r25	; 0x02
    2df6:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL= (u8)u16CmpAValCpy;
    2df8:	ea e4       	ldi	r30, 0x4A	; 74
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	80 83       	st	Z, r24
	OCR1AH= (u8)(u16CmpAValCpy>>8);
    2e00:	eb e4       	ldi	r30, 0x4B	; 75
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	89 2f       	mov	r24, r25
    2e0a:	99 27       	eor	r25, r25
    2e0c:	80 83       	st	Z, r24
	
}
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <TIM1_voidSetCmpBRegValue>:
void TIM1_voidSetCmpBRegValue(u16 u16CmpBValCpy)
{
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <TIM1_voidSetCmpBRegValue+0x6>
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL= (u8)u16CmpBValCpy;
    2e26:	e8 e4       	ldi	r30, 0x48	; 72
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	80 83       	st	Z, r24
	OCR1BH= (u8)(u16CmpBValCpy>>8);
    2e2e:	e9 e4       	ldi	r30, 0x49	; 73
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	9a 81       	ldd	r25, Y+2	; 0x02
    2e36:	89 2f       	mov	r24, r25
    2e38:	99 27       	eor	r25, r25
    2e3a:	80 83       	st	Z, r24
	
}
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <TIM1_voidSetIcuRegValue>:
void TIM1_voidSetIcuRegValue(u16 u16IcuValCpy)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <TIM1_voidSetIcuRegValue+0x6>
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
	ICR1=u16IcuValCpy;
    2e54:	e6 e4       	ldi	r30, 0x46	; 70
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24

}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <TIM1_u8ReadTimerValue>:
u16 TIM1_u8ReadTimerValue(void)
{
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <TIM1_u8ReadTimerValue+0x6>
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	u16 u16TcntValueLoc;
	u16TcntValueLoc   = TCNT1H;
    2e74:	ed e4       	ldi	r30, 0x4D	; 77
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	88 2f       	mov	r24, r24
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc   = (u16TcntValueLoc<<8);
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	98 2f       	mov	r25, r24
    2e88:	88 27       	eor	r24, r24
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01
	u16TcntValueLoc |= TCNT1L;
    2e8e:	ec e4       	ldi	r30, 0x4C	; 76
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	82 2b       	or	r24, r18
    2e9e:	93 2b       	or	r25, r19
    2ea0:	9a 83       	std	Y+2, r25	; 0x02
    2ea2:	89 83       	std	Y+1, r24	; 0x01
	return u16TcntValueLoc;
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <__vector_9>:
/* ISR for overflow*/
void __vector_9(void) __attribute__ ((signal,used));
void __vector_9 (void)
{
    2eb2:	1f 92       	push	r1
    2eb4:	0f 92       	push	r0
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	0f 92       	push	r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	2f 93       	push	r18
    2ebe:	3f 93       	push	r19
    2ec0:	4f 93       	push	r20
    2ec2:	5f 93       	push	r21
    2ec4:	6f 93       	push	r22
    2ec6:	7f 93       	push	r23
    2ec8:	8f 93       	push	r24
    2eca:	9f 93       	push	r25
    2ecc:	af 93       	push	r26
    2ece:	bf 93       	push	r27
    2ed0:	ef 93       	push	r30
    2ed2:	ff 93       	push	r31
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfOvfCallBack();
    2edc:	e0 91 c6 01 	lds	r30, 0x01C6
    2ee0:	f0 91 c7 01 	lds	r31, 0x01C7
    2ee4:	09 95       	icall
	
}
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	ff 91       	pop	r31
    2eec:	ef 91       	pop	r30
    2eee:	bf 91       	pop	r27
    2ef0:	af 91       	pop	r26
    2ef2:	9f 91       	pop	r25
    2ef4:	8f 91       	pop	r24
    2ef6:	7f 91       	pop	r23
    2ef8:	6f 91       	pop	r22
    2efa:	5f 91       	pop	r21
    2efc:	4f 91       	pop	r20
    2efe:	3f 91       	pop	r19
    2f00:	2f 91       	pop	r18
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	0f 90       	pop	r0
    2f08:	1f 90       	pop	r1
    2f0a:	18 95       	reti

00002f0c <__vector_7>:
/* ISR for compaA*/

void __vector_7 (void) __attribute__ ((signal,used));
void __vector_7 (void)
{
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	2f 93       	push	r18
    2f18:	3f 93       	push	r19
    2f1a:	4f 93       	push	r20
    2f1c:	5f 93       	push	r21
    2f1e:	6f 93       	push	r22
    2f20:	7f 93       	push	r23
    2f22:	8f 93       	push	r24
    2f24:	9f 93       	push	r25
    2f26:	af 93       	push	r26
    2f28:	bf 93       	push	r27
    2f2a:	ef 93       	push	r30
    2f2c:	ff 93       	push	r31
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpACallBack();
    2f36:	e0 91 c8 01 	lds	r30, 0x01C8
    2f3a:	f0 91 c9 01 	lds	r31, 0x01C9
    2f3e:	09 95       	icall
}
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	ff 91       	pop	r31
    2f46:	ef 91       	pop	r30
    2f48:	bf 91       	pop	r27
    2f4a:	af 91       	pop	r26
    2f4c:	9f 91       	pop	r25
    2f4e:	8f 91       	pop	r24
    2f50:	7f 91       	pop	r23
    2f52:	6f 91       	pop	r22
    2f54:	5f 91       	pop	r21
    2f56:	4f 91       	pop	r20
    2f58:	3f 91       	pop	r19
    2f5a:	2f 91       	pop	r18
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	0f 90       	pop	r0
    2f62:	1f 90       	pop	r1
    2f64:	18 95       	reti

00002f66 <__vector_8>:
/* ISR for compaB*/

void __vector_8 (void) __attribute__ ((signal,used));
void __vector_8 (void)
{
    2f66:	1f 92       	push	r1
    2f68:	0f 92       	push	r0
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	0f 92       	push	r0
    2f6e:	11 24       	eor	r1, r1
    2f70:	2f 93       	push	r18
    2f72:	3f 93       	push	r19
    2f74:	4f 93       	push	r20
    2f76:	5f 93       	push	r21
    2f78:	6f 93       	push	r22
    2f7a:	7f 93       	push	r23
    2f7c:	8f 93       	push	r24
    2f7e:	9f 93       	push	r25
    2f80:	af 93       	push	r26
    2f82:	bf 93       	push	r27
    2f84:	ef 93       	push	r30
    2f86:	ff 93       	push	r31
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfCmpBCallBack();
    2f90:	e0 91 c2 01 	lds	r30, 0x01C2
    2f94:	f0 91 c3 01 	lds	r31, 0x01C3
    2f98:	09 95       	icall
}
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	bf 91       	pop	r27
    2fa4:	af 91       	pop	r26
    2fa6:	9f 91       	pop	r25
    2fa8:	8f 91       	pop	r24
    2faa:	7f 91       	pop	r23
    2fac:	6f 91       	pop	r22
    2fae:	5f 91       	pop	r21
    2fb0:	4f 91       	pop	r20
    2fb2:	3f 91       	pop	r19
    2fb4:	2f 91       	pop	r18
    2fb6:	0f 90       	pop	r0
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	0f 90       	pop	r0
    2fbc:	1f 90       	pop	r1
    2fbe:	18 95       	reti

00002fc0 <__vector_6>:
/* ISR for ICU*/

void __vector_6 (void) __attribute__ ((signal,used));
void __vector_6 (void)
{
    2fc0:	1f 92       	push	r1
    2fc2:	0f 92       	push	r0
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	0f 92       	push	r0
    2fc8:	11 24       	eor	r1, r1
    2fca:	2f 93       	push	r18
    2fcc:	3f 93       	push	r19
    2fce:	4f 93       	push	r20
    2fd0:	5f 93       	push	r21
    2fd2:	6f 93       	push	r22
    2fd4:	7f 93       	push	r23
    2fd6:	8f 93       	push	r24
    2fd8:	9f 93       	push	r25
    2fda:	af 93       	push	r26
    2fdc:	bf 93       	push	r27
    2fde:	ef 93       	push	r30
    2fe0:	ff 93       	push	r31
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
	TIM1_pfIcuCallBack();
    2fea:	e0 91 c4 01 	lds	r30, 0x01C4
    2fee:	f0 91 c5 01 	lds	r31, 0x01C5
    2ff2:	09 95       	icall
}
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	ff 91       	pop	r31
    2ffa:	ef 91       	pop	r30
    2ffc:	bf 91       	pop	r27
    2ffe:	af 91       	pop	r26
    3000:	9f 91       	pop	r25
    3002:	8f 91       	pop	r24
    3004:	7f 91       	pop	r23
    3006:	6f 91       	pop	r22
    3008:	5f 91       	pop	r21
    300a:	4f 91       	pop	r20
    300c:	3f 91       	pop	r19
    300e:	2f 91       	pop	r18
    3010:	0f 90       	pop	r0
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	0f 90       	pop	r0
    3016:	1f 90       	pop	r1
    3018:	18 95       	reti

0000301a <TIM1_u16GetIcuValue>:

/*ICU*/


u16 TIM1_u16GetIcuValue(void)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    3022:	e6 e4       	ldi	r30, 0x46	; 70
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
}
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <ICU_voidRisingEdge>:
void ICU_voidRisingEdge(void)
 {
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B , 6);
    3038:	ae e4       	ldi	r26, 0x4E	; 78
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	ee e4       	ldi	r30, 0x4E	; 78
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	80 64       	ori	r24, 0x40	; 64
    3044:	8c 93       	st	X, r24
 }
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <ICU_voidFallenEdge>:
 
 void ICU_voidFallenEdge(void)
 {
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B , 6);
    3054:	ae e4       	ldi	r26, 0x4E	; 78
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	ee e4       	ldi	r30, 0x4E	; 78
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	8f 7b       	andi	r24, 0xBF	; 191
    3060:	8c 93       	st	X, r24
 }
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <TIM0_voidInit>:




void TIM0_voidInit(void)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
	    CLR_BIT(TCCR0, 3);
	    // Clear WGM01 and WGM00 for normal mode
	    CLR_BIT(TCCR0, 1);
	    CLR_BIT(TCCR0, 0);
#elif  TIMO_MODE == TIM0_CTC
	CLR_BIT(TCCR0,6);
    3070:	a3 e5       	ldi	r26, 0x53	; 83
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e3 e5       	ldi	r30, 0x53	; 83
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	8f 7b       	andi	r24, 0xBF	; 191
    307c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    307e:	a3 e5       	ldi	r26, 0x53	; 83
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e3 e5       	ldi	r30, 0x53	; 83
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	88 60       	ori	r24, 0x08	; 8
    308a:	8c 93       	st	X, r24
#elif TIMO_WAVE == TIM0_PHASE_NONINVERT_OC0
	CLR_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
	/*default is oco dicdonnected */
#else
	CLR_BIT(TCCR0,4);
    308c:	a3 e5       	ldi	r26, 0x53	; 83
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e3 e5       	ldi	r30, 0x53	; 83
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 7e       	andi	r24, 0xEF	; 239
    3098:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
    309a:	a3 e5       	ldi	r26, 0x53	; 83
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e3 e5       	ldi	r30, 0x53	; 83
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	8f 7d       	andi	r24, 0xDF	; 223
    30a6:	8c 93       	st	X, r24

#endif



}
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <TIM0_voidEnable>:




void TIM0_voidEnable(u8 u8PreScaler)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	0f 92       	push	r0
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=TCCR0&0b11111000;
    30ba:	a3 e5       	ldi	r26, 0x53	; 83
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e3 e5       	ldi	r30, 0x53	; 83
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	88 7f       	andi	r24, 0xF8	; 248
    30c6:	8c 93       	st	X, r24
	TCCR0=TCCR0|u8PreScaler;
    30c8:	a3 e5       	ldi	r26, 0x53	; 83
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e3 e5       	ldi	r30, 0x53	; 83
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	90 81       	ld	r25, Z
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	89 2b       	or	r24, r25
    30d6:	8c 93       	st	X, r24
}
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <TIM0_voidDisable>:


void TIM0_voidDisable(void)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
	TCCR0=TCCR0&0b11111000;
    30e8:	a3 e5       	ldi	r26, 0x53	; 83
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e3 e5       	ldi	r30, 0x53	; 83
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	88 7f       	andi	r24, 0xF8	; 248
    30f4:	8c 93       	st	X, r24
}
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <TIM0_voidEnableOvfINt>:

void TIM0_voidEnableOvfINt(void)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,0);
    3104:	a9 e5       	ldi	r26, 0x59	; 89
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e9 e5       	ldi	r30, 0x59	; 89
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	81 60       	ori	r24, 0x01	; 1
    3110:	8c 93       	st	X, r24
}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	08 95       	ret

00003118 <TIM0_voidDisableOvfINt>:

void TIM0_voidDisableOvfINt(void)
{
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    3120:	a9 e5       	ldi	r26, 0x59	; 89
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e9 e5       	ldi	r30, 0x59	; 89
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	8e 7f       	andi	r24, 0xFE	; 254
    312c:	8c 93       	st	X, r24
}
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <TIM0_voidEnableComparINt>:

void TIM0_voidEnableComparINt(void)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
    313c:	a9 e5       	ldi	r26, 0x59	; 89
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e9 e5       	ldi	r30, 0x59	; 89
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	82 60       	ori	r24, 0x02	; 2
    3148:	8c 93       	st	X, r24

}
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <TIM0_voidDisableCompareINt>:

void TIM0_voidDisableCompareINt(void)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    3158:	a9 e5       	ldi	r26, 0x59	; 89
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e9 e5       	ldi	r30, 0x59	; 89
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8d 7f       	andi	r24, 0xFD	; 253
    3164:	8c 93       	st	X, r24
}
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <TIM0_voidSetTCNTValue>:


void TIM0_voidSetTCNTValue(u8 u8TcntReg)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	0f 92       	push	r0
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=u8TcntReg;
    3178:	e2 e5       	ldi	r30, 0x52	; 82
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	80 83       	st	Z, r24
}
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	08 95       	ret

00003188 <TIM0_voidSetOCRValue>:

void TIM0_voidSetOCRValue(u8 u8OcrReg)
{
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	0f 92       	push	r0
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	89 83       	std	Y+1, r24	; 0x01
	OCR0=u8OcrReg;
    3194:	ec e5       	ldi	r30, 0x5C	; 92
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	80 83       	st	Z, r24
}
    319c:	0f 90       	pop	r0
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <TIM0_u8ReadTcntReg>:

u8 TIM0_u8ReadTcntReg(void)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    31ac:	e2 e5       	ldi	r30, 0x52	; 82
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
}
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <TIM0_voidSetCallBackOvfInt>:

void TIM0_voidSetCallBackOvfInt(pf pfOvfcallBack)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <TIM0_voidSetCallBackOvfInt+0x6>
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfOVFCallBack=pfOvfcallBack;
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ca:	90 93 b7 01 	sts	0x01B7, r25
    31ce:	80 93 b6 01 	sts	0x01B6, r24
}
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <TIM0_voidSetCallBackCompareInt>:

void TIM0_voidSetCallBackCompareInt(pf pfComcallBack)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <TIM0_voidSetCallBackCompareInt+0x6>
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	9a 83       	std	Y+2, r25	; 0x02
    31e8:	89 83       	std	Y+1, r24	; 0x01
	TIM0_pfCmpCallBack=pfComcallBack;
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	90 93 b9 01 	sts	0x01B9, r25
    31f2:	80 93 b8 01 	sts	0x01B8, r24

}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <__vector_11>:
void __vector_11 (void)   __attribute__ ((signal));

void __vector_11 (void)
{
    3200:	1f 92       	push	r1
    3202:	0f 92       	push	r0
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	0f 92       	push	r0
    3208:	11 24       	eor	r1, r1
    320a:	2f 93       	push	r18
    320c:	3f 93       	push	r19
    320e:	4f 93       	push	r20
    3210:	5f 93       	push	r21
    3212:	6f 93       	push	r22
    3214:	7f 93       	push	r23
    3216:	8f 93       	push	r24
    3218:	9f 93       	push	r25
    321a:	af 93       	push	r26
    321c:	bf 93       	push	r27
    321e:	ef 93       	push	r30
    3220:	ff 93       	push	r31
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
	if (TIM0_pfOVFCallBack!=NULL_PTR)
    322a:	80 91 b6 01 	lds	r24, 0x01B6
    322e:	90 91 b7 01 	lds	r25, 0x01B7
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	29 f0       	breq	.+10     	; 0x3240 <__vector_11+0x40>
	{
		TIM0_pfOVFCallBack();
    3236:	e0 91 b6 01 	lds	r30, 0x01B6
    323a:	f0 91 b7 01 	lds	r31, 0x01B7
    323e:	09 95       	icall
	else
	{
		///
	}

}
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	ff 91       	pop	r31
    3246:	ef 91       	pop	r30
    3248:	bf 91       	pop	r27
    324a:	af 91       	pop	r26
    324c:	9f 91       	pop	r25
    324e:	8f 91       	pop	r24
    3250:	7f 91       	pop	r23
    3252:	6f 91       	pop	r22
    3254:	5f 91       	pop	r21
    3256:	4f 91       	pop	r20
    3258:	3f 91       	pop	r19
    325a:	2f 91       	pop	r18
    325c:	0f 90       	pop	r0
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	0f 90       	pop	r0
    3262:	1f 90       	pop	r1
    3264:	18 95       	reti

00003266 <__vector_10>:

void __vector_10 (void)   __attribute__ ((signal));

void __vector_10 (void)
{
    3266:	1f 92       	push	r1
    3268:	0f 92       	push	r0
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	0f 92       	push	r0
    326e:	11 24       	eor	r1, r1
    3270:	2f 93       	push	r18
    3272:	3f 93       	push	r19
    3274:	4f 93       	push	r20
    3276:	5f 93       	push	r21
    3278:	6f 93       	push	r22
    327a:	7f 93       	push	r23
    327c:	8f 93       	push	r24
    327e:	9f 93       	push	r25
    3280:	af 93       	push	r26
    3282:	bf 93       	push	r27
    3284:	ef 93       	push	r30
    3286:	ff 93       	push	r31
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
	if (TIM0_pfCmpCallBack!=NULL_PTR)
    3290:	80 91 b8 01 	lds	r24, 0x01B8
    3294:	90 91 b9 01 	lds	r25, 0x01B9
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	29 f0       	breq	.+10     	; 0x32a6 <__vector_10+0x40>
	{
		TIM0_pfCmpCallBack();
    329c:	e0 91 b8 01 	lds	r30, 0x01B8
    32a0:	f0 91 b9 01 	lds	r31, 0x01B9
    32a4:	09 95       	icall
	else
	{

	}

}
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	ff 91       	pop	r31
    32ac:	ef 91       	pop	r30
    32ae:	bf 91       	pop	r27
    32b0:	af 91       	pop	r26
    32b2:	9f 91       	pop	r25
    32b4:	8f 91       	pop	r24
    32b6:	7f 91       	pop	r23
    32b8:	6f 91       	pop	r22
    32ba:	5f 91       	pop	r21
    32bc:	4f 91       	pop	r20
    32be:	3f 91       	pop	r19
    32c0:	2f 91       	pop	r18
    32c2:	0f 90       	pop	r0
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	0f 90       	pop	r0
    32c8:	1f 90       	pop	r1
    32ca:	18 95       	reti

000032cc <UART_voidInit>:
volatile u8 Global_Var=0;
void (*Tx_pf)(void)=NULL;
void (*Rx_pf)(void)=NULL;
u8 Data=0;
void UART_voidInit(void)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	0f 92       	push	r0
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Temp=0;
    32d6:	19 82       	std	Y+1, r1	; 0x01
/******   Enable Rx Interrupt (RXCIE)   *******/
SET_BIT(UCSRB,UCSRB_RXCIE);
    32d8:	aa e2       	ldi	r26, 0x2A	; 42
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	ea e2       	ldi	r30, 0x2A	; 42
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	80 68       	ori	r24, 0x80	; 128
    32e4:	8c 93       	st	X, r24
/******   Enable UDRIE          *******/
SET_BIT(UCSRB,UCSRB_UDRIE);
    32e6:	aa e2       	ldi	r26, 0x2A	; 42
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	ea e2       	ldi	r30, 0x2A	; 42
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	80 62       	ori	r24, 0x20	; 32
    32f2:	8c 93       	st	X, r24

/******   Select 8-BIT Data *********/
CLR_BIT(UCSRB,UCSRB_UCSZ2);
    32f4:	aa e2       	ldi	r26, 0x2A	; 42
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	ea e2       	ldi	r30, 0x2A	; 42
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	8b 7f       	andi	r24, 0xFB	; 251
    3300:	8c 93       	st	X, r24
/*select UCSRC Register*/
SET_BIT(Local_Temp,UCSRC_URSEL);
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	80 68       	ori	r24, 0x80	; 128
    3306:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ0);
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	82 60       	ori	r24, 0x02	; 2
    330c:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ1);
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	84 60       	ori	r24, 0x04	; 4
    3312:	89 83       	std	Y+1, r24	; 0x01
/******  Select UART Mode *********/
CLR_BIT(Local_Temp,UCSRC_UMSEL);//select  Asynchronous Mode
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	8f 7b       	andi	r24, 0xBF	; 191
    3318:	89 83       	std	Y+1, r24	; 0x01
/******   Select Parity Mode *********/
CLR_BIT(Local_Temp,UCSRC_UPM0);//disable Parity
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	8f 7e       	andi	r24, 0xEF	; 239
    331e:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(Local_Temp,UCSRC_UPM1);
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	8f 7d       	andi	r24, 0xDF	; 223
    3324:	89 83       	std	Y+1, r24	; 0x01
/******   Select Stop bit *********/
CLR_BIT(Local_Temp,UCSRC_USBS);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	87 7f       	andi	r24, 0xF7	; 247
    332a:	89 83       	std	Y+1, r24	; 0x01

UCSRC=Local_Temp;
    332c:	e0 e4       	ldi	r30, 0x40	; 64
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	80 83       	st	Z, r24

/******   Select BuadRate *********/
UBRRL=BUAD_RATE;
    3334:	e9 e2       	ldi	r30, 0x29	; 41
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	83 e3       	ldi	r24, 0x33	; 51
    333a:	80 83       	st	Z, r24
/******   Enable Rx *********/
SET_BIT(UCSRB,UCSRB_RXEN);
    333c:	aa e2       	ldi	r26, 0x2A	; 42
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	ea e2       	ldi	r30, 0x2A	; 42
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	80 61       	ori	r24, 0x10	; 16
    3348:	8c 93       	st	X, r24
/******   Enable Tx *********/
SET_BIT(UCSRB,UCSRB_TXEN);
    334a:	aa e2       	ldi	r26, 0x2A	; 42
    334c:	b0 e0       	ldi	r27, 0x00	; 0
    334e:	ea e2       	ldi	r30, 0x2A	; 42
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	80 81       	ld	r24, Z
    3354:	88 60       	ori	r24, 0x08	; 8
    3356:	8c 93       	st	X, r24
}
    3358:	0f 90       	pop	r0
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <UART_voidSendData_Asynch>:
void UART_voidSendData_Asynch(u8 Copy_u8Data)
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	0f 92       	push	r0
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	89 83       	std	Y+1, r24	; 0x01
//Global_Var =Copy_u8Data;
UDR =Copy_u8Data;
    336c:	ec e2       	ldi	r30, 0x2C	; 44
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	80 83       	st	Z, r24
}
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <UART_u8ReceiveData>:
u8  UART_u8ReceiveData(void)
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
//GET_BIT(UCSRA,UCSRA_RXC);
return UDR;
    3384:	ec e2       	ldi	r30, 0x2C	; 44
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
}
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <__vector_13>:


// USART, RXC
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
    3390:	1f 92       	push	r1
    3392:	0f 92       	push	r0
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	0f 92       	push	r0
    3398:	11 24       	eor	r1, r1
    339a:	2f 93       	push	r18
    339c:	3f 93       	push	r19
    339e:	4f 93       	push	r20
    33a0:	5f 93       	push	r21
    33a2:	6f 93       	push	r22
    33a4:	7f 93       	push	r23
    33a6:	8f 93       	push	r24
    33a8:	9f 93       	push	r25
    33aa:	af 93       	push	r26
    33ac:	bf 93       	push	r27
    33ae:	ef 93       	push	r30
    33b0:	ff 93       	push	r31
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
	Rx_pf();
    33ba:	e0 91 bd 01 	lds	r30, 0x01BD
    33be:	f0 91 be 01 	lds	r31, 0x01BE
    33c2:	09 95       	icall
}
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	ff 91       	pop	r31
    33ca:	ef 91       	pop	r30
    33cc:	bf 91       	pop	r27
    33ce:	af 91       	pop	r26
    33d0:	9f 91       	pop	r25
    33d2:	8f 91       	pop	r24
    33d4:	7f 91       	pop	r23
    33d6:	6f 91       	pop	r22
    33d8:	5f 91       	pop	r21
    33da:	4f 91       	pop	r20
    33dc:	3f 91       	pop	r19
    33de:	2f 91       	pop	r18
    33e0:	0f 90       	pop	r0
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	0f 90       	pop	r0
    33e6:	1f 90       	pop	r1
    33e8:	18 95       	reti

000033ea <__vector_14>:
// USART, UDRE
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
    33ea:	1f 92       	push	r1
    33ec:	0f 92       	push	r0
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	0f 92       	push	r0
    33f2:	11 24       	eor	r1, r1
    33f4:	2f 93       	push	r18
    33f6:	3f 93       	push	r19
    33f8:	4f 93       	push	r20
    33fa:	5f 93       	push	r21
    33fc:	6f 93       	push	r22
    33fe:	7f 93       	push	r23
    3400:	8f 93       	push	r24
    3402:	9f 93       	push	r25
    3404:	af 93       	push	r26
    3406:	bf 93       	push	r27
    3408:	ef 93       	push	r30
    340a:	ff 93       	push	r31
    340c:	df 93       	push	r29
    340e:	cf 93       	push	r28
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
	Tx_pf();
    3414:	e0 91 bb 01 	lds	r30, 0x01BB
    3418:	f0 91 bc 01 	lds	r31, 0x01BC
    341c:	09 95       	icall
	//UART_voidSendData_Asynch();
}
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	ff 91       	pop	r31
    3424:	ef 91       	pop	r30
    3426:	bf 91       	pop	r27
    3428:	af 91       	pop	r26
    342a:	9f 91       	pop	r25
    342c:	8f 91       	pop	r24
    342e:	7f 91       	pop	r23
    3430:	6f 91       	pop	r22
    3432:	5f 91       	pop	r21
    3434:	4f 91       	pop	r20
    3436:	3f 91       	pop	r19
    3438:	2f 91       	pop	r18
    343a:	0f 90       	pop	r0
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	0f 90       	pop	r0
    3440:	1f 90       	pop	r1
    3442:	18 95       	reti

00003444 <__vector_15>:
//USART, TXC
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void){
    3444:	1f 92       	push	r1
    3446:	0f 92       	push	r0
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	0f 92       	push	r0
    344c:	11 24       	eor	r1, r1
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62

}
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	0f 90       	pop	r0
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	0f 90       	pop	r0
    3460:	1f 90       	pop	r1
    3462:	18 95       	reti

00003464 <UARTTX_vidSetISR>:
void UARTTX_vidSetISR(void (*p)(void))
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	00 d0       	rcall	.+0      	; 0x346a <UARTTX_vidSetISR+0x6>
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	89 83       	std	Y+1, r24	; 0x01
	Tx_pf=p;
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	90 93 bc 01 	sts	0x01BC, r25
    347a:	80 93 bb 01 	sts	0x01BB, r24
	//Data=value;
	}
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <UARTRX_vidSetISR>:
void UARTRX_vidSetISR(void (*p)(void))
{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	00 d0       	rcall	.+0      	; 0x348e <UARTRX_vidSetISR+0x6>
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	9a 83       	std	Y+2, r25	; 0x02
    3494:	89 83       	std	Y+1, r24	; 0x01
	Rx_pf=p;
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	9a 81       	ldd	r25, Y+2	; 0x02
    349a:	90 93 be 01 	sts	0x01BE, r25
    349e:	80 93 bd 01 	sts	0x01BD, r24
	//Data=value;
	}
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <disable_tx>:

void disable_tx(void)
{
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    34b4:	aa e2       	ldi	r26, 0x2A	; 42
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	ea e2       	ldi	r30, 0x2A	; 42
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	8f 7d       	andi	r24, 0xDF	; 223
    34c0:	8c 93       	st	X, r24

	}
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	08 95       	ret

000034c8 <enable_tx>:
void enable_tx(void)
{
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
    34d0:	aa e2       	ldi	r26, 0x2A	; 42
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	ea e2       	ldi	r30, 0x2A	; 42
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	80 62       	ori	r24, 0x20	; 32
    34dc:	8c 93       	st	X, r24

	}
    34de:	cf 91       	pop	r28
    34e0:	df 91       	pop	r29
    34e2:	08 95       	ret

000034e4 <main>:
void function_1(void);

u8 spiro=0;
u8 Bigcola=0;
int main(void)
{
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	c1 5d       	subi	r28, 0xD1	; 209
    34f2:	d0 40       	sbci	r29, 0x00	; 0
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61
	//number of cans initialized
	spiro=1;
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	80 93 c0 01 	sts	0x01C0, r24
	Bigcola=10;
    3504:	8a e0       	ldi	r24, 0x0A	; 10
    3506:	80 93 c1 01 	sts	0x01C1, r24
	EEPROM_vWrite(EEPROM_SPIRO_ADDRESS,spiro);
    350a:	90 91 c0 01 	lds	r25, 0x01C0
    350e:	8d ef       	ldi	r24, 0xFD	; 253
    3510:	69 2f       	mov	r22, r25
    3512:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	EEPROM_vWrite(EEPROM_COLA_ADDRESS,Bigcola);
    3516:	90 91 c1 01 	lds	r25, 0x01C1
    351a:	81 ef       	ldi	r24, 0xF1	; 241
    351c:	69 2f       	mov	r22, r25
    351e:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	u8 key_pressed = 0;
    3522:	fe 01       	movw	r30, r28
    3524:	e8 53       	subi	r30, 0x38	; 56
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	10 82       	st	Z, r1
	u8 Data;

	DIO_voidInit();
    352a:	0e 94 45 06 	call	0xc8a	; 0xc8a <DIO_voidInit>

	UART_voidInit();
    352e:	0e 94 66 19 	call	0x32cc	; 0x32cc <UART_voidInit>
	KPD_init();
    3532:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <KPD_init>
	LCD_vidInit();
    3536:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LCD_vidInit>
	LCD_vidSendCommand( lcd_EntryMode);
    353a:	86 e0       	ldi	r24, 0x06	; 6
    353c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
	TIM1_voidInit();
    3540:	0e 94 67 15 	call	0x2ace	; 0x2ace <TIM1_voidInit>
	TIM1_voidSetIcuRegValue(20000);
    3544:	80 e2       	ldi	r24, 0x20	; 32
    3546:	9e e4       	ldi	r25, 0x4E	; 78
    3548:	0e 94 23 17 	call	0x2e46	; 0x2e46 <TIM1_voidSetIcuRegValue>

	//PRESCALAR 8
	TIM1_voidEnable(2);
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <TIM1_voidEnable>
	EXT_INTERRUPT_VID_INIT();
    3552:	0e 94 bd 0a 	call	0x157a	; 0x157a <EXT_INTERRUPT_VID_INIT>

	Global_Interrupt_Enable();
    3556:	0e 94 38 0c 	call	0x1870	; 0x1870 <Global_Interrupt_Enable>

	EXT_INTERRUPT_VID_ENABLE(EXT0);
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <EXT_INTERRUPT_VID_ENABLE>
	//EXT TO MAKE THE SERVO ON IF SOMEONE BOUGHT CANS
	EXT0_VID_SET_CALL_BACK(&SERVO_ON);
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	99 e2       	ldi	r25, 0x29	; 41
    3564:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <EXT0_VID_SET_CALL_BACK>

	UART_voidInit();
    3568:	0e 94 66 19 	call	0x32cc	; 0x32cc <UART_voidInit>


	TWI_vMasterInit();
    356c:	0e 94 a6 13 	call	0x274c	; 0x274c <TWI_vMasterInit>


	DIO_voidPullUpState(PORT_D,DIO_PIN_NUM_D2,Enable_PullUp);
    3570:	84 e0       	ldi	r24, 0x04	; 4
    3572:	62 e0       	ldi	r22, 0x02	; 2
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidPullUpState>


	/*<<<<<<<<<<Setting passwords if not set>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

	EEPROM_vRead(ADMIN_PASS_STATUS_ADDRESS,&Data);
    357a:	9e 01       	movw	r18, r28
    357c:	27 53       	subi	r18, 0x37	; 55
    357e:	3f 4f       	sbci	r19, 0xFF	; 255
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	b9 01       	movw	r22, r18
    3584:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>
	if(Data!=PASS_SET)
    3588:	fe 01       	movw	r30, r28
    358a:	e7 53       	subi	r30, 0x37	; 55
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 81       	ld	r24, Z
    3590:	81 30       	cpi	r24, 0x01	; 1
    3592:	09 f4       	brne	.+2      	; 0x3596 <main+0xb2>
    3594:	cc c0       	rjmp	.+408    	; 0x372e <main+0x24a>
	{


		LCD_vidWriteString("Set Machine");
    3596:	80 e6       	ldi	r24, 0x60	; 96
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
		Gotoxy(0,2);
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	62 e0       	ldi	r22, 0x02	; 2
    35a2:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteString("Password");
    35a6:	8c e6       	ldi	r24, 0x6C	; 108
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    35ae:	fe 01       	movw	r30, r28
    35b0:	ef 53       	subi	r30, 0x3F	; 63
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	aa e7       	ldi	r26, 0x7A	; 122
    35ba:	b4 e4       	ldi	r27, 0x44	; 68
    35bc:	80 83       	st	Z, r24
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	a2 83       	std	Z+2, r26	; 0x02
    35c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c4:	8e 01       	movw	r16, r28
    35c6:	03 54       	subi	r16, 0x43	; 67
    35c8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ca:	fe 01       	movw	r30, r28
    35cc:	ef 53       	subi	r30, 0x3F	; 63
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	4a ef       	ldi	r20, 0xFA	; 250
    35de:	54 e4       	ldi	r21, 0x44	; 68
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	f8 01       	movw	r30, r16
    35ea:	80 83       	st	Z, r24
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	a2 83       	std	Z+2, r26	; 0x02
    35f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f2:	fe 01       	movw	r30, r28
    35f4:	e3 54       	subi	r30, 0x43	; 67
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	60 81       	ld	r22, Z
    35fa:	71 81       	ldd	r23, Z+1	; 0x01
    35fc:	82 81       	ldd	r24, Z+2	; 0x02
    35fe:	93 81       	ldd	r25, Z+3	; 0x03
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	44 f4       	brge	.+16     	; 0x3620 <main+0x13c>
		__ticks = 1;
    3610:	fe 01       	movw	r30, r28
    3612:	e5 54       	subi	r30, 0x45	; 69
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	80 83       	st	Z, r24
    361e:	64 c0       	rjmp	.+200    	; 0x36e8 <main+0x204>
	else if (__tmp > 65535)
    3620:	fe 01       	movw	r30, r28
    3622:	e3 54       	subi	r30, 0x43	; 67
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	93 81       	ldd	r25, Z+3	; 0x03
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	57 e4       	ldi	r21, 0x47	; 71
    3636:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	0c f0       	brlt	.+2      	; 0x3640 <main+0x15c>
    363e:	43 c0       	rjmp	.+134    	; 0x36c6 <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3640:	fe 01       	movw	r30, r28
    3642:	ef 53       	subi	r30, 0x3F	; 63
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	8e 01       	movw	r16, r28
    3660:	05 54       	subi	r16, 0x45	; 69
    3662:	1f 4f       	sbci	r17, 0xFF	; 255
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	f8 01       	movw	r30, r16
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	80 83       	st	Z, r24
    3676:	1f c0       	rjmp	.+62     	; 0x36b6 <main+0x1d2>
    3678:	fe 01       	movw	r30, r28
    367a:	e7 54       	subi	r30, 0x47	; 71
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	88 ec       	ldi	r24, 0xC8	; 200
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	80 83       	st	Z, r24
    3686:	fe 01       	movw	r30, r28
    3688:	e7 54       	subi	r30, 0x47	; 71
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 81       	ld	r24, Z
    368e:	91 81       	ldd	r25, Z+1	; 0x01
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <main+0x1ac>
    3694:	fe 01       	movw	r30, r28
    3696:	e7 54       	subi	r30, 0x47	; 71
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	91 83       	std	Z+1, r25	; 0x01
    369c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369e:	de 01       	movw	r26, r28
    36a0:	a5 54       	subi	r26, 0x45	; 69
    36a2:	bf 4f       	sbci	r27, 0xFF	; 255
    36a4:	fe 01       	movw	r30, r28
    36a6:	e5 54       	subi	r30, 0x45	; 69
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	80 81       	ld	r24, Z
    36ac:	91 81       	ldd	r25, Z+1	; 0x01
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	11 96       	adiw	r26, 0x01	; 1
    36b2:	9c 93       	st	X, r25
    36b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b6:	fe 01       	movw	r30, r28
    36b8:	e5 54       	subi	r30, 0x45	; 69
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	80 81       	ld	r24, Z
    36be:	91 81       	ldd	r25, Z+1	; 0x01
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	d1 f6       	brne	.-76     	; 0x3678 <main+0x194>
    36c4:	27 c0       	rjmp	.+78     	; 0x3714 <main+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c6:	8e 01       	movw	r16, r28
    36c8:	05 54       	subi	r16, 0x45	; 69
    36ca:	1f 4f       	sbci	r17, 0xFF	; 255
    36cc:	fe 01       	movw	r30, r28
    36ce:	e3 54       	subi	r30, 0x43	; 67
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	f8 01       	movw	r30, r16
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    36e8:	de 01       	movw	r26, r28
    36ea:	a9 54       	subi	r26, 0x49	; 73
    36ec:	bf 4f       	sbci	r27, 0xFF	; 255
    36ee:	fe 01       	movw	r30, r28
    36f0:	e5 54       	subi	r30, 0x45	; 69
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	8d 93       	st	X+, r24
    36fa:	9c 93       	st	X, r25
    36fc:	fe 01       	movw	r30, r28
    36fe:	e9 54       	subi	r30, 0x49	; 73
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <main+0x222>
    370a:	fe 01       	movw	r30, r28
    370c:	e9 54       	subi	r30, 0x49	; 73
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	80 83       	st	Z, r24
		_delay_ms(1000);
		LCD_vidSendCommand(lcd_Clear);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
		LCD_vidWriteString("Set pass");
    371a:	85 e7       	ldi	r24, 0x75	; 117
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
		Gotoxy(0,2);
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	62 e0       	ldi	r22, 0x02	; 2
    3726:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		SET_PASS();
    372a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <SET_PASS>
	}
	//To save password for comparison
	u8 saved_pass=0;
    372e:	fe 01       	movw	r30, r28
    3730:	e6 53       	subi	r30, 0x36	; 54
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	10 82       	st	Z, r1

	EEPROM_vRead(EEPROM_PASS_ADDRESS,&saved_pass);
    3736:	9e 01       	movw	r18, r28
    3738:	26 53       	subi	r18, 0x36	; 54
    373a:	3f 4f       	sbci	r19, 0xFF	; 255
    373c:	85 ee       	ldi	r24, 0xE5	; 229
    373e:	b9 01       	movw	r22, r18
    3740:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>

	LCD_vidSendCommand(lcd_Clear);
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>


	u8 LCD_flag=0;
    374a:	fe 01       	movw	r30, r28
    374c:	e9 53       	subi	r30, 0x39	; 57
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	10 82       	st	Z, r1
	u8 x;
	while(1)
	{
		//flag to print one time

		if(!LCD_flag)
    3752:	fe 01       	movw	r30, r28
    3754:	e9 53       	subi	r30, 0x39	; 57
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	88 23       	and	r24, r24
    375c:	a9 f4       	brne	.+42     	; 0x3788 <main+0x2a4>
		{

			Gotoxy(3,1);
    375e:	83 e0       	ldi	r24, 0x03	; 3
    3760:	61 e0       	ldi	r22, 0x01	; 1
    3762:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>

			LCD_vidWriteString("Machine-KO");
    3766:	8e e7       	ldi	r24, 0x7E	; 126
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
			Gotoxy(0,2);
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	62 e0       	ldi	r22, 0x02	; 2
    3772:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
			LCD_vidWriteString("1:Options 2:buy");
    3776:	89 e8       	ldi	r24, 0x89	; 137
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
			LCD_flag=1;
    377e:	fe 01       	movw	r30, r28
    3780:	e9 53       	subi	r30, 0x39	; 57
    3782:	ff 4f       	sbci	r31, 0xFF	; 255
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	80 83       	st	Z, r24

		}


		key_pressed = NOT_PRESSED;
    3788:	fe 01       	movw	r30, r28
    378a:	e8 53       	subi	r30, 0x38	; 56
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	8f ef       	ldi	r24, 0xFF	; 255
    3790:	80 83       	st	Z, r24
		u8 display = 0;
    3792:	fe 01       	movw	r30, r28
    3794:	eb 53       	subi	r30, 0x3B	; 59
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	10 82       	st	Z, r1

		display=KPD_GetKey()-ASCII_ZERO;
    379a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    379e:	fe 01       	movw	r30, r28
    37a0:	eb 53       	subi	r30, 0x3B	; 59
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	80 53       	subi	r24, 0x30	; 48
    37a6:	80 83       	st	Z, r24

		//TO GET THE VALUE FROM UART TTL AND CHECK ON IT WHAT TO DO
		x=UART_u8ReceiveData();
    37a8:	0e 94 be 19 	call	0x337c	; 0x337c <UART_u8ReceiveData>
    37ac:	fe 01       	movw	r30, r28
    37ae:	ea 53       	subi	r30, 0x3A	; 58
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	80 83       	st	Z, r24
		switch(x)
    37b4:	fe 01       	movw	r30, r28
    37b6:	ea 53       	subi	r30, 0x3A	; 58
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	80 81       	ld	r24, Z
    37bc:	28 2f       	mov	r18, r24
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	c0 53       	subi	r28, 0x30	; 48
    37c2:	df 4f       	sbci	r29, 0xFF	; 255
    37c4:	39 83       	std	Y+1, r19	; 0x01
    37c6:	28 83       	st	Y, r18
    37c8:	c0 5d       	subi	r28, 0xD0	; 208
    37ca:	d0 40       	sbci	r29, 0x00	; 0
    37cc:	c0 53       	subi	r28, 0x30	; 48
    37ce:	df 4f       	sbci	r29, 0xFF	; 255
    37d0:	88 81       	ld	r24, Y
    37d2:	99 81       	ldd	r25, Y+1	; 0x01
    37d4:	c0 5d       	subi	r28, 0xD0	; 208
    37d6:	d0 40       	sbci	r29, 0x00	; 0
    37d8:	81 33       	cpi	r24, 0x31	; 49
    37da:	91 05       	cpc	r25, r1
    37dc:	61 f0       	breq	.+24     	; 0x37f6 <main+0x312>
    37de:	c0 53       	subi	r28, 0x30	; 48
    37e0:	df 4f       	sbci	r29, 0xFF	; 255
    37e2:	e8 81       	ld	r30, Y
    37e4:	f9 81       	ldd	r31, Y+1	; 0x01
    37e6:	c0 5d       	subi	r28, 0xD0	; 208
    37e8:	d0 40       	sbci	r29, 0x00	; 0
    37ea:	e2 33       	cpi	r30, 0x32	; 50
    37ec:	f1 05       	cpc	r31, r1
    37ee:	11 f4       	brne	.+4      	; 0x37f4 <main+0x310>
    37f0:	0c 94 a6 25 	jmp	0x4b4c	; 0x4b4c <main+0x1668>
    37f4:	ae cf       	rjmp	.-164    	; 0x3752 <main+0x26e>
		{
		case '1':	//OPTIONS


			LCD_flag=0;
    37f6:	fe 01       	movw	r30, r28
    37f8:	e9 53       	subi	r30, 0x39	; 57
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	10 82       	st	Z, r1
			LCD_vidSendCommand(lcd_Clear);
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

			//Entering Password
			LCD_vidWriteString("Enter Password :");
    3804:	89 e9       	ldi	r24, 0x99	; 153
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
			ENTER_PASS();
    380c:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <ENTER_PASS>

			//for checking the password
			u8 checking=0;
    3810:	fe 01       	movw	r30, r28
    3812:	e5 53       	subi	r30, 0x35	; 53
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	10 82       	st	Z, r1
			EEPROM_vRead(EEPROM_CHECK_PASS_ADDRESS,&checking);
    3818:	9e 01       	movw	r18, r28
    381a:	25 53       	subi	r18, 0x35	; 53
    381c:	3f 4f       	sbci	r19, 0xFF	; 255
    381e:	8d ee       	ldi	r24, 0xED	; 237
    3820:	b9 01       	movw	r22, r18
    3822:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>


			if( saved_pass==checking)
    3826:	fe 01       	movw	r30, r28
    3828:	e6 53       	subi	r30, 0x36	; 54
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	90 81       	ld	r25, Z
    382e:	fe 01       	movw	r30, r28
    3830:	e5 53       	subi	r30, 0x35	; 53
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	80 81       	ld	r24, Z
    3836:	98 17       	cp	r25, r24
    3838:	09 f0       	breq	.+2      	; 0x383c <main+0x358>
    383a:	dc c5       	rjmp	.+3000   	; 0x43f4 <main+0xf10>
			{
				LCD_vidSendCommand(lcd_Clear);
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

				LCD_vidWriteString("Correct Password");
    3842:	8a ea       	ldi	r24, 0xAA	; 170
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    384a:	fe 01       	movw	r30, r28
    384c:	ed 54       	subi	r30, 0x4D	; 77
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	aa ef       	ldi	r26, 0xFA	; 250
    3856:	b3 e4       	ldi	r27, 0x43	; 67
    3858:	80 83       	st	Z, r24
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	a2 83       	std	Z+2, r26	; 0x02
    385e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3860:	8e 01       	movw	r16, r28
    3862:	01 55       	subi	r16, 0x51	; 81
    3864:	1f 4f       	sbci	r17, 0xFF	; 255
    3866:	fe 01       	movw	r30, r28
    3868:	ed 54       	subi	r30, 0x4D	; 77
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	60 81       	ld	r22, Z
    386e:	71 81       	ldd	r23, Z+1	; 0x01
    3870:	82 81       	ldd	r24, Z+2	; 0x02
    3872:	93 81       	ldd	r25, Z+3	; 0x03
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a ef       	ldi	r20, 0xFA	; 250
    387a:	54 e4       	ldi	r21, 0x44	; 68
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	f8 01       	movw	r30, r16
    3886:	80 83       	st	Z, r24
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	a2 83       	std	Z+2, r26	; 0x02
    388c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    388e:	fe 01       	movw	r30, r28
    3890:	e1 55       	subi	r30, 0x51	; 81
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	60 81       	ld	r22, Z
    3896:	71 81       	ldd	r23, Z+1	; 0x01
    3898:	82 81       	ldd	r24, Z+2	; 0x02
    389a:	93 81       	ldd	r25, Z+3	; 0x03
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	40 e8       	ldi	r20, 0x80	; 128
    38a2:	5f e3       	ldi	r21, 0x3F	; 63
    38a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38a8:	88 23       	and	r24, r24
    38aa:	44 f4       	brge	.+16     	; 0x38bc <main+0x3d8>
		__ticks = 1;
    38ac:	fe 01       	movw	r30, r28
    38ae:	e3 55       	subi	r30, 0x53	; 83
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	91 83       	std	Z+1, r25	; 0x01
    38b8:	80 83       	st	Z, r24
    38ba:	64 c0       	rjmp	.+200    	; 0x3984 <main+0x4a0>
	else if (__tmp > 65535)
    38bc:	fe 01       	movw	r30, r28
    38be:	e1 55       	subi	r30, 0x51	; 81
    38c0:	ff 4f       	sbci	r31, 0xFF	; 255
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	3f ef       	ldi	r19, 0xFF	; 255
    38ce:	4f e7       	ldi	r20, 0x7F	; 127
    38d0:	57 e4       	ldi	r21, 0x47	; 71
    38d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38d6:	18 16       	cp	r1, r24
    38d8:	0c f0       	brlt	.+2      	; 0x38dc <main+0x3f8>
    38da:	43 c0       	rjmp	.+134    	; 0x3962 <main+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38dc:	fe 01       	movw	r30, r28
    38de:	ed 54       	subi	r30, 0x4D	; 77
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	60 81       	ld	r22, Z
    38e4:	71 81       	ldd	r23, Z+1	; 0x01
    38e6:	82 81       	ldd	r24, Z+2	; 0x02
    38e8:	93 81       	ldd	r25, Z+3	; 0x03
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e2       	ldi	r20, 0x20	; 32
    38f0:	51 e4       	ldi	r21, 0x41	; 65
    38f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	8e 01       	movw	r16, r28
    38fc:	03 55       	subi	r16, 0x53	; 83
    38fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	f8 01       	movw	r30, r16
    390e:	91 83       	std	Z+1, r25	; 0x01
    3910:	80 83       	st	Z, r24
    3912:	1f c0       	rjmp	.+62     	; 0x3952 <main+0x46e>
    3914:	fe 01       	movw	r30, r28
    3916:	e5 55       	subi	r30, 0x55	; 85
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	88 ec       	ldi	r24, 0xC8	; 200
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	80 83       	st	Z, r24
    3922:	fe 01       	movw	r30, r28
    3924:	e5 55       	subi	r30, 0x55	; 85
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 81       	ld	r24, Z
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <main+0x448>
    3930:	fe 01       	movw	r30, r28
    3932:	e5 55       	subi	r30, 0x55	; 85
    3934:	ff 4f       	sbci	r31, 0xFF	; 255
    3936:	91 83       	std	Z+1, r25	; 0x01
    3938:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393a:	de 01       	movw	r26, r28
    393c:	a3 55       	subi	r26, 0x53	; 83
    393e:	bf 4f       	sbci	r27, 0xFF	; 255
    3940:	fe 01       	movw	r30, r28
    3942:	e3 55       	subi	r30, 0x53	; 83
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	80 81       	ld	r24, Z
    3948:	91 81       	ldd	r25, Z+1	; 0x01
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	11 96       	adiw	r26, 0x01	; 1
    394e:	9c 93       	st	X, r25
    3950:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3952:	fe 01       	movw	r30, r28
    3954:	e3 55       	subi	r30, 0x53	; 83
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 81       	ld	r24, Z
    395a:	91 81       	ldd	r25, Z+1	; 0x01
    395c:	00 97       	sbiw	r24, 0x00	; 0
    395e:	d1 f6       	brne	.-76     	; 0x3914 <main+0x430>
    3960:	41 c5       	rjmp	.+2690   	; 0x43e4 <main+0xf00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3962:	8e 01       	movw	r16, r28
    3964:	03 55       	subi	r16, 0x53	; 83
    3966:	1f 4f       	sbci	r17, 0xFF	; 255
    3968:	fe 01       	movw	r30, r28
    396a:	e1 55       	subi	r30, 0x51	; 81
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	60 81       	ld	r22, Z
    3970:	71 81       	ldd	r23, Z+1	; 0x01
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	f8 01       	movw	r30, r16
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	80 83       	st	Z, r24
    3984:	de 01       	movw	r26, r28
    3986:	a7 55       	subi	r26, 0x57	; 87
    3988:	bf 4f       	sbci	r27, 0xFF	; 255
    398a:	fe 01       	movw	r30, r28
    398c:	e3 55       	subi	r30, 0x53	; 83
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	80 81       	ld	r24, Z
    3992:	91 81       	ldd	r25, Z+1	; 0x01
    3994:	11 96       	adiw	r26, 0x01	; 1
    3996:	9c 93       	st	X, r25
    3998:	8e 93       	st	-X, r24
    399a:	fe 01       	movw	r30, r28
    399c:	e7 55       	subi	r30, 0x57	; 87
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	f1 f7       	brne	.-4      	; 0x39a4 <main+0x4c0>
    39a8:	fe 01       	movw	r30, r28
    39aa:	e7 55       	subi	r30, 0x57	; 87
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	91 83       	std	Z+1, r25	; 0x01
    39b0:	80 83       	st	Z, r24
    39b2:	18 c5       	rjmp	.+2608   	; 0x43e4 <main+0xf00>
				_delay_ms(500);

				while(key_pressed!='3'){
					//IF Pass RIGHT GO TO options >>> add items of cans number
					LCD_vidSendCommand(lcd_Clear);
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    39ba:	fe 01       	movw	r30, r28
    39bc:	eb 55       	subi	r30, 0x5B	; 91
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	aa e7       	ldi	r26, 0x7A	; 122
    39c6:	b4 e4       	ldi	r27, 0x44	; 68
    39c8:	80 83       	st	Z, r24
    39ca:	91 83       	std	Z+1, r25	; 0x01
    39cc:	a2 83       	std	Z+2, r26	; 0x02
    39ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d0:	8e 01       	movw	r16, r28
    39d2:	0f 55       	subi	r16, 0x5F	; 95
    39d4:	1f 4f       	sbci	r17, 0xFF	; 255
    39d6:	fe 01       	movw	r30, r28
    39d8:	eb 55       	subi	r30, 0x5B	; 91
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	60 81       	ld	r22, Z
    39de:	71 81       	ldd	r23, Z+1	; 0x01
    39e0:	82 81       	ldd	r24, Z+2	; 0x02
    39e2:	93 81       	ldd	r25, Z+3	; 0x03
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	4a ef       	ldi	r20, 0xFA	; 250
    39ea:	54 e4       	ldi	r21, 0x44	; 68
    39ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	f8 01       	movw	r30, r16
    39f6:	80 83       	st	Z, r24
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	a2 83       	std	Z+2, r26	; 0x02
    39fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39fe:	fe 01       	movw	r30, r28
    3a00:	ef 55       	subi	r30, 0x5F	; 95
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	60 81       	ld	r22, Z
    3a06:	71 81       	ldd	r23, Z+1	; 0x01
    3a08:	82 81       	ldd	r24, Z+2	; 0x02
    3a0a:	93 81       	ldd	r25, Z+3	; 0x03
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e8       	ldi	r20, 0x80	; 128
    3a12:	5f e3       	ldi	r21, 0x3F	; 63
    3a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a18:	88 23       	and	r24, r24
    3a1a:	44 f4       	brge	.+16     	; 0x3a2c <main+0x548>
		__ticks = 1;
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e1 56       	subi	r30, 0x61	; 97
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	91 83       	std	Z+1, r25	; 0x01
    3a28:	80 83       	st	Z, r24
    3a2a:	64 c0       	rjmp	.+200    	; 0x3af4 <main+0x610>
	else if (__tmp > 65535)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ef 55       	subi	r30, 0x5F	; 95
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	3f ef       	ldi	r19, 0xFF	; 255
    3a3e:	4f e7       	ldi	r20, 0x7F	; 127
    3a40:	57 e4       	ldi	r21, 0x47	; 71
    3a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a46:	18 16       	cp	r1, r24
    3a48:	0c f0       	brlt	.+2      	; 0x3a4c <main+0x568>
    3a4a:	43 c0       	rjmp	.+134    	; 0x3ad2 <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	eb 55       	subi	r30, 0x5B	; 91
    3a50:	ff 4f       	sbci	r31, 0xFF	; 255
    3a52:	60 81       	ld	r22, Z
    3a54:	71 81       	ldd	r23, Z+1	; 0x01
    3a56:	82 81       	ldd	r24, Z+2	; 0x02
    3a58:	93 81       	ldd	r25, Z+3	; 0x03
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e2       	ldi	r20, 0x20	; 32
    3a60:	51 e4       	ldi	r21, 0x41	; 65
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	8e 01       	movw	r16, r28
    3a6c:	01 56       	subi	r16, 0x61	; 97
    3a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a70:	bc 01       	movw	r22, r24
    3a72:	cd 01       	movw	r24, r26
    3a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	f8 01       	movw	r30, r16
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	80 83       	st	Z, r24
    3a82:	1f c0       	rjmp	.+62     	; 0x3ac2 <main+0x5de>
    3a84:	fe 01       	movw	r30, r28
    3a86:	e3 56       	subi	r30, 0x63	; 99
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	88 ec       	ldi	r24, 0xC8	; 200
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	91 83       	std	Z+1, r25	; 0x01
    3a90:	80 83       	st	Z, r24
    3a92:	fe 01       	movw	r30, r28
    3a94:	e3 56       	subi	r30, 0x63	; 99
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	80 81       	ld	r24, Z
    3a9a:	91 81       	ldd	r25, Z+1	; 0x01
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <main+0x5b8>
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e3 56       	subi	r30, 0x63	; 99
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aaa:	de 01       	movw	r26, r28
    3aac:	a1 56       	subi	r26, 0x61	; 97
    3aae:	bf 4f       	sbci	r27, 0xFF	; 255
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e1 56       	subi	r30, 0x61	; 97
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	80 81       	ld	r24, Z
    3ab8:	91 81       	ldd	r25, Z+1	; 0x01
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	11 96       	adiw	r26, 0x01	; 1
    3abe:	9c 93       	st	X, r25
    3ac0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e1 56       	subi	r30, 0x61	; 97
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	80 81       	ld	r24, Z
    3aca:	91 81       	ldd	r25, Z+1	; 0x01
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	d1 f6       	brne	.-76     	; 0x3a84 <main+0x5a0>
    3ad0:	27 c0       	rjmp	.+78     	; 0x3b20 <main+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad2:	8e 01       	movw	r16, r28
    3ad4:	01 56       	subi	r16, 0x61	; 97
    3ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad8:	fe 01       	movw	r30, r28
    3ada:	ef 55       	subi	r30, 0x5F	; 95
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	60 81       	ld	r22, Z
    3ae0:	71 81       	ldd	r23, Z+1	; 0x01
    3ae2:	82 81       	ldd	r24, Z+2	; 0x02
    3ae4:	93 81       	ldd	r25, Z+3	; 0x03
    3ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	f8 01       	movw	r30, r16
    3af0:	91 83       	std	Z+1, r25	; 0x01
    3af2:	80 83       	st	Z, r24
    3af4:	de 01       	movw	r26, r28
    3af6:	a5 56       	subi	r26, 0x65	; 101
    3af8:	bf 4f       	sbci	r27, 0xFF	; 255
    3afa:	fe 01       	movw	r30, r28
    3afc:	e1 56       	subi	r30, 0x61	; 97
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	80 81       	ld	r24, Z
    3b02:	91 81       	ldd	r25, Z+1	; 0x01
    3b04:	8d 93       	st	X+, r24
    3b06:	9c 93       	st	X, r25
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e5 56       	subi	r30, 0x65	; 101
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	80 81       	ld	r24, Z
    3b10:	91 81       	ldd	r25, Z+1	; 0x01
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	f1 f7       	brne	.-4      	; 0x3b12 <main+0x62e>
    3b16:	fe 01       	movw	r30, r28
    3b18:	e5 56       	subi	r30, 0x65	; 101
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24
					_delay_ms(1000);
					Gotoxy(0,1);
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	61 e0       	ldi	r22, 0x01	; 1
    3b24:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
					LCD_vidWriteString("1:Add items");
    3b28:	8b eb       	ldi	r24, 0xBB	; 187
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>


					Gotoxy(0,2);
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	62 e0       	ldi	r22, 0x02	; 2
    3b34:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
					LCD_vidWriteString("2:Cans No 3:OUT");
    3b38:	87 ec       	ldi	r24, 0xC7	; 199
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

					key_pressed = NOT_PRESSED;
    3b40:	fe 01       	movw	r30, r28
    3b42:	e8 53       	subi	r30, 0x38	; 56
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	8f ef       	ldi	r24, 0xFF	; 255
    3b48:	80 83       	st	Z, r24
    3b4a:	06 c0       	rjmp	.+12     	; 0x3b58 <main+0x674>

					while (key_pressed == NOT_PRESSED)
					{
						key_pressed = KPD_GetKey();
    3b4c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    3b50:	fe 01       	movw	r30, r28
    3b52:	e8 53       	subi	r30, 0x38	; 56
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	80 83       	st	Z, r24
					Gotoxy(0,2);
					LCD_vidWriteString("2:Cans No 3:OUT");

					key_pressed = NOT_PRESSED;

					while (key_pressed == NOT_PRESSED)
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e8 53       	subi	r30, 0x38	; 56
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	80 81       	ld	r24, Z
    3b60:	8f 3f       	cpi	r24, 0xFF	; 255
    3b62:	a1 f3       	breq	.-24     	; 0x3b4c <main+0x668>
					{
						key_pressed = KPD_GetKey();
					}
					LCD_vidSendCommand(lcd_Clear);
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

					switch(key_pressed)
    3b6a:	fe 01       	movw	r30, r28
    3b6c:	e8 53       	subi	r30, 0x38	; 56
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	80 81       	ld	r24, Z
    3b72:	28 2f       	mov	r18, r24
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	c2 53       	subi	r28, 0x32	; 50
    3b78:	df 4f       	sbci	r29, 0xFF	; 255
    3b7a:	39 83       	std	Y+1, r19	; 0x01
    3b7c:	28 83       	st	Y, r18
    3b7e:	ce 5c       	subi	r28, 0xCE	; 206
    3b80:	d0 40       	sbci	r29, 0x00	; 0
    3b82:	c2 53       	subi	r28, 0x32	; 50
    3b84:	df 4f       	sbci	r29, 0xFF	; 255
    3b86:	88 81       	ld	r24, Y
    3b88:	99 81       	ldd	r25, Y+1	; 0x01
    3b8a:	ce 5c       	subi	r28, 0xCE	; 206
    3b8c:	d0 40       	sbci	r29, 0x00	; 0
    3b8e:	81 33       	cpi	r24, 0x31	; 49
    3b90:	91 05       	cpc	r25, r1
    3b92:	59 f0       	breq	.+22     	; 0x3baa <main+0x6c6>
    3b94:	c2 53       	subi	r28, 0x32	; 50
    3b96:	df 4f       	sbci	r29, 0xFF	; 255
    3b98:	e8 81       	ld	r30, Y
    3b9a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b9c:	ce 5c       	subi	r28, 0xCE	; 206
    3b9e:	d0 40       	sbci	r29, 0x00	; 0
    3ba0:	e2 33       	cpi	r30, 0x32	; 50
    3ba2:	f1 05       	cpc	r31, r1
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <main+0x6c4>
    3ba6:	2c c3       	rjmp	.+1624   	; 0x4200 <main+0xd1c>
    3ba8:	19 c4       	rjmp	.+2098   	; 0x43dc <main+0xef8>

					//AFTER ADDING ITEMS THE ITEMS WILL BE UPDATED

					case '1':

						Gotoxy(0,1);
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	61 e0       	ldi	r22, 0x01	; 1
    3bae:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("item to add is: ");
    3bb2:	87 ed       	ldi	r24, 0xD7	; 215
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
						Gotoxy(0,2);
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	62 e0       	ldi	r22, 0x02	; 2
    3bbe:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>

						LCD_vidWriteString("1:Spiro 2:Cola");
    3bc2:	88 ee       	ldi	r24, 0xE8	; 232
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
						key_pressed = NOT_PRESSED;
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e8 53       	subi	r30, 0x38	; 56
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	8f ef       	ldi	r24, 0xFF	; 255
    3bd2:	80 83       	st	Z, r24
    3bd4:	06 c0       	rjmp	.+12     	; 0x3be2 <main+0x6fe>

						while (key_pressed == NOT_PRESSED)
						{
							key_pressed = KPD_GetKey();
    3bd6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e8 53       	subi	r30, 0x38	; 56
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	80 83       	st	Z, r24
						Gotoxy(0,2);

						LCD_vidWriteString("1:Spiro 2:Cola");
						key_pressed = NOT_PRESSED;

						while (key_pressed == NOT_PRESSED)
    3be2:	fe 01       	movw	r30, r28
    3be4:	e8 53       	subi	r30, 0x38	; 56
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	8f 3f       	cpi	r24, 0xFF	; 255
    3bec:	a1 f3       	breq	.-24     	; 0x3bd6 <main+0x6f2>
						{
							key_pressed = KPD_GetKey();
						}
						if (key_pressed=='1')
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e8 53       	subi	r30, 0x38	; 56
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	81 33       	cpi	r24, 0x31	; 49
    3bf8:	09 f0       	breq	.+2      	; 0x3bfc <main+0x718>
    3bfa:	81 c1       	rjmp	.+770    	; 0x3efe <main+0xa1a>
						{
							//update the spiro cans number in eeprom
							spiro++;
    3bfc:	80 91 c0 01 	lds	r24, 0x01C0
    3c00:	8f 5f       	subi	r24, 0xFF	; 255
    3c02:	80 93 c0 01 	sts	0x01C0, r24
							EEPROM_vWrite(EEPROM_SPIRO_ADDRESS,spiro);
    3c06:	90 91 c0 01 	lds	r25, 0x01C0
    3c0a:	8d ef       	ldi	r24, 0xFD	; 253
    3c0c:	69 2f       	mov	r22, r25
    3c0e:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
							LCD_vidSendCommand(lcd_Clear);
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>


							//MOTOR WORK AS CAN IS OUT
							DCM_voidRotateCW();
    3c18:	0e 94 12 06 	call	0xc24	; 0xc24 <DCM_voidRotateCW>
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e9 56       	subi	r30, 0x69	; 105
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	aa e7       	ldi	r26, 0x7A	; 122
    3c28:	b4 e4       	ldi	r27, 0x44	; 68
    3c2a:	80 83       	st	Z, r24
    3c2c:	91 83       	std	Z+1, r25	; 0x01
    3c2e:	a2 83       	std	Z+2, r26	; 0x02
    3c30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c32:	8e 01       	movw	r16, r28
    3c34:	0d 56       	subi	r16, 0x6D	; 109
    3c36:	1f 4f       	sbci	r17, 0xFF	; 255
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e9 56       	subi	r30, 0x69	; 105
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	60 81       	ld	r22, Z
    3c40:	71 81       	ldd	r23, Z+1	; 0x01
    3c42:	82 81       	ldd	r24, Z+2	; 0x02
    3c44:	93 81       	ldd	r25, Z+3	; 0x03
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	4a ef       	ldi	r20, 0xFA	; 250
    3c4c:	54 e4       	ldi	r21, 0x44	; 68
    3c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	f8 01       	movw	r30, r16
    3c58:	80 83       	st	Z, r24
    3c5a:	91 83       	std	Z+1, r25	; 0x01
    3c5c:	a2 83       	std	Z+2, r26	; 0x02
    3c5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c60:	fe 01       	movw	r30, r28
    3c62:	ed 56       	subi	r30, 0x6D	; 109
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	60 81       	ld	r22, Z
    3c68:	71 81       	ldd	r23, Z+1	; 0x01
    3c6a:	82 81       	ldd	r24, Z+2	; 0x02
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e8       	ldi	r20, 0x80	; 128
    3c74:	5f e3       	ldi	r21, 0x3F	; 63
    3c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c7a:	88 23       	and	r24, r24
    3c7c:	44 f4       	brge	.+16     	; 0x3c8e <main+0x7aa>
		__ticks = 1;
    3c7e:	fe 01       	movw	r30, r28
    3c80:	ef 56       	subi	r30, 0x6F	; 111
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	91 83       	std	Z+1, r25	; 0x01
    3c8a:	80 83       	st	Z, r24
    3c8c:	64 c0       	rjmp	.+200    	; 0x3d56 <main+0x872>
	else if (__tmp > 65535)
    3c8e:	fe 01       	movw	r30, r28
    3c90:	ed 56       	subi	r30, 0x6D	; 109
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	60 81       	ld	r22, Z
    3c96:	71 81       	ldd	r23, Z+1	; 0x01
    3c98:	82 81       	ldd	r24, Z+2	; 0x02
    3c9a:	93 81       	ldd	r25, Z+3	; 0x03
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ca0:	4f e7       	ldi	r20, 0x7F	; 127
    3ca2:	57 e4       	ldi	r21, 0x47	; 71
    3ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ca8:	18 16       	cp	r1, r24
    3caa:	0c f0       	brlt	.+2      	; 0x3cae <main+0x7ca>
    3cac:	43 c0       	rjmp	.+134    	; 0x3d34 <main+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e9 56       	subi	r30, 0x69	; 105
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	60 81       	ld	r22, Z
    3cb6:	71 81       	ldd	r23, Z+1	; 0x01
    3cb8:	82 81       	ldd	r24, Z+2	; 0x02
    3cba:	93 81       	ldd	r25, Z+3	; 0x03
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 e2       	ldi	r20, 0x20	; 32
    3cc2:	51 e4       	ldi	r21, 0x41	; 65
    3cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	8e 01       	movw	r16, r28
    3cce:	0f 56       	subi	r16, 0x6F	; 111
    3cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd2:	bc 01       	movw	r22, r24
    3cd4:	cd 01       	movw	r24, r26
    3cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	f8 01       	movw	r30, r16
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	80 83       	st	Z, r24
    3ce4:	1f c0       	rjmp	.+62     	; 0x3d24 <main+0x840>
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	e1 57       	subi	r30, 0x71	; 113
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	88 ec       	ldi	r24, 0xC8	; 200
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	80 83       	st	Z, r24
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e1 57       	subi	r30, 0x71	; 113
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 81       	ld	r24, Z
    3cfc:	91 81       	ldd	r25, Z+1	; 0x01
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <main+0x81a>
    3d02:	fe 01       	movw	r30, r28
    3d04:	e1 57       	subi	r30, 0x71	; 113
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	91 83       	std	Z+1, r25	; 0x01
    3d0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0c:	de 01       	movw	r26, r28
    3d0e:	af 56       	subi	r26, 0x6F	; 111
    3d10:	bf 4f       	sbci	r27, 0xFF	; 255
    3d12:	fe 01       	movw	r30, r28
    3d14:	ef 56       	subi	r30, 0x6F	; 111
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	80 81       	ld	r24, Z
    3d1a:	91 81       	ldd	r25, Z+1	; 0x01
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	11 96       	adiw	r26, 0x01	; 1
    3d20:	9c 93       	st	X, r25
    3d22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d24:	fe 01       	movw	r30, r28
    3d26:	ef 56       	subi	r30, 0x6F	; 111
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	80 81       	ld	r24, Z
    3d2c:	91 81       	ldd	r25, Z+1	; 0x01
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	d1 f6       	brne	.-76     	; 0x3ce6 <main+0x802>
    3d32:	27 c0       	rjmp	.+78     	; 0x3d82 <main+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d34:	8e 01       	movw	r16, r28
    3d36:	0f 56       	subi	r16, 0x6F	; 111
    3d38:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	ed 56       	subi	r30, 0x6D	; 109
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	60 81       	ld	r22, Z
    3d42:	71 81       	ldd	r23, Z+1	; 0x01
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	f8 01       	movw	r30, r16
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	80 83       	st	Z, r24
    3d56:	de 01       	movw	r26, r28
    3d58:	a3 57       	subi	r26, 0x73	; 115
    3d5a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	ef 56       	subi	r30, 0x6F	; 111
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	8d 93       	st	X+, r24
    3d68:	9c 93       	st	X, r25
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e3 57       	subi	r30, 0x73	; 115
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 81       	ld	r24, Z
    3d72:	91 81       	ldd	r25, Z+1	; 0x01
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <main+0x890>
    3d78:	fe 01       	movw	r30, r28
    3d7a:	e3 57       	subi	r30, 0x73	; 115
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	91 83       	std	Z+1, r25	; 0x01
    3d80:	80 83       	st	Z, r24
							_delay_ms(1000);

							Gotoxy(0,1);
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	61 e0       	ldi	r22, 0x01	; 1
    3d86:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
							LCD_vidWriteString("Item is Added");
    3d8a:	87 ef       	ldi	r24, 0xF7	; 247
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    3d92:	fe 01       	movw	r30, r28
    3d94:	e7 57       	subi	r30, 0x77	; 119
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	aa ef       	ldi	r26, 0xFA	; 250
    3d9e:	b3 e4       	ldi	r27, 0x43	; 67
    3da0:	80 83       	st	Z, r24
    3da2:	91 83       	std	Z+1, r25	; 0x01
    3da4:	a2 83       	std	Z+2, r26	; 0x02
    3da6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da8:	8e 01       	movw	r16, r28
    3daa:	0b 57       	subi	r16, 0x7B	; 123
    3dac:	1f 4f       	sbci	r17, 0xFF	; 255
    3dae:	fe 01       	movw	r30, r28
    3db0:	e7 57       	subi	r30, 0x77	; 119
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	93 81       	ldd	r25, Z+3	; 0x03
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	4a ef       	ldi	r20, 0xFA	; 250
    3dc2:	54 e4       	ldi	r21, 0x44	; 68
    3dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	f8 01       	movw	r30, r16
    3dce:	80 83       	st	Z, r24
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	a2 83       	std	Z+2, r26	; 0x02
    3dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	eb 57       	subi	r30, 0x7B	; 123
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	40 e8       	ldi	r20, 0x80	; 128
    3dea:	5f e3       	ldi	r21, 0x3F	; 63
    3dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3df0:	88 23       	and	r24, r24
    3df2:	44 f4       	brge	.+16     	; 0x3e04 <main+0x920>
		__ticks = 1;
    3df4:	fe 01       	movw	r30, r28
    3df6:	ed 57       	subi	r30, 0x7D	; 125
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	80 83       	st	Z, r24
    3e02:	64 c0       	rjmp	.+200    	; 0x3ecc <main+0x9e8>
	else if (__tmp > 65535)
    3e04:	fe 01       	movw	r30, r28
    3e06:	eb 57       	subi	r30, 0x7B	; 123
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	3f ef       	ldi	r19, 0xFF	; 255
    3e16:	4f e7       	ldi	r20, 0x7F	; 127
    3e18:	57 e4       	ldi	r21, 0x47	; 71
    3e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e1e:	18 16       	cp	r1, r24
    3e20:	0c f0       	brlt	.+2      	; 0x3e24 <main+0x940>
    3e22:	43 c0       	rjmp	.+134    	; 0x3eaa <main+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e24:	fe 01       	movw	r30, r28
    3e26:	e7 57       	subi	r30, 0x77	; 119
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	60 81       	ld	r22, Z
    3e2c:	71 81       	ldd	r23, Z+1	; 0x01
    3e2e:	82 81       	ldd	r24, Z+2	; 0x02
    3e30:	93 81       	ldd	r25, Z+3	; 0x03
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	40 e2       	ldi	r20, 0x20	; 32
    3e38:	51 e4       	ldi	r21, 0x41	; 65
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	8e 01       	movw	r16, r28
    3e44:	0d 57       	subi	r16, 0x7D	; 125
    3e46:	1f 4f       	sbci	r17, 0xFF	; 255
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	f8 01       	movw	r30, r16
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
    3e5a:	1f c0       	rjmp	.+62     	; 0x3e9a <main+0x9b6>
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	ef 57       	subi	r30, 0x7F	; 127
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	88 ec       	ldi	r24, 0xC8	; 200
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	91 83       	std	Z+1, r25	; 0x01
    3e68:	80 83       	st	Z, r24
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	ef 57       	subi	r30, 0x7F	; 127
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	f1 f7       	brne	.-4      	; 0x3e74 <main+0x990>
    3e78:	fe 01       	movw	r30, r28
    3e7a:	ef 57       	subi	r30, 0x7F	; 127
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e82:	de 01       	movw	r26, r28
    3e84:	ad 57       	subi	r26, 0x7D	; 125
    3e86:	bf 4f       	sbci	r27, 0xFF	; 255
    3e88:	fe 01       	movw	r30, r28
    3e8a:	ed 57       	subi	r30, 0x7D	; 125
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	91 81       	ldd	r25, Z+1	; 0x01
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	11 96       	adiw	r26, 0x01	; 1
    3e96:	9c 93       	st	X, r25
    3e98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	ed 57       	subi	r30, 0x7D	; 125
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	80 81       	ld	r24, Z
    3ea2:	91 81       	ldd	r25, Z+1	; 0x01
    3ea4:	00 97       	sbiw	r24, 0x00	; 0
    3ea6:	d1 f6       	brne	.-76     	; 0x3e5c <main+0x978>
    3ea8:	27 c0       	rjmp	.+78     	; 0x3ef8 <main+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eaa:	8e 01       	movw	r16, r28
    3eac:	0d 57       	subi	r16, 0x7D	; 125
    3eae:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	eb 57       	subi	r30, 0x7B	; 123
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	60 81       	ld	r22, Z
    3eb8:	71 81       	ldd	r23, Z+1	; 0x01
    3eba:	82 81       	ldd	r24, Z+2	; 0x02
    3ebc:	93 81       	ldd	r25, Z+3	; 0x03
    3ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	f8 01       	movw	r30, r16
    3ec8:	91 83       	std	Z+1, r25	; 0x01
    3eca:	80 83       	st	Z, r24
    3ecc:	de 01       	movw	r26, r28
    3ece:	a1 58       	subi	r26, 0x81	; 129
    3ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	ed 57       	subi	r30, 0x7D	; 125
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	80 81       	ld	r24, Z
    3eda:	91 81       	ldd	r25, Z+1	; 0x01
    3edc:	8d 93       	st	X+, r24
    3ede:	9c 93       	st	X, r25
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e1 58       	subi	r30, 0x81	; 129
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	80 81       	ld	r24, Z
    3ee8:	91 81       	ldd	r25, Z+1	; 0x01
    3eea:	01 97       	sbiw	r24, 0x01	; 1
    3eec:	f1 f7       	brne	.-4      	; 0x3eea <main+0xa06>
    3eee:	fe 01       	movw	r30, r28
    3ef0:	e1 58       	subi	r30, 0x81	; 129
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	91 83       	std	Z+1, r25	; 0x01
    3ef6:	80 83       	st	Z, r24
							_delay_ms(500);
							DCM_voidStop();
    3ef8:	0e 94 34 06 	call	0xc68	; 0xc68 <DCM_voidStop>
    3efc:	73 c2       	rjmp	.+1254   	; 0x43e4 <main+0xf00>


						}
						else{

							LCD_vidSendCommand(lcd_Clear);
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
							//update the spiro cans number in eeprom
							Bigcola++;
    3f04:	80 91 c1 01 	lds	r24, 0x01C1
    3f08:	8f 5f       	subi	r24, 0xFF	; 255
    3f0a:	80 93 c1 01 	sts	0x01C1, r24
							EEPROM_vWrite(EEPROM_COLA_ADDRESS,Bigcola);
    3f0e:	90 91 c1 01 	lds	r25, 0x01C1
    3f12:	81 ef       	ldi	r24, 0xF1	; 241
    3f14:	69 2f       	mov	r22, r25
    3f16:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
							//MOTOR WORK AS CAN IS OUT
							DCM_voidRotateCW();
    3f1a:	0e 94 12 06 	call	0xc24	; 0xc24 <DCM_voidRotateCW>
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e5 58       	subi	r30, 0x85	; 133
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	aa e7       	ldi	r26, 0x7A	; 122
    3f2a:	b4 e4       	ldi	r27, 0x44	; 68
    3f2c:	80 83       	st	Z, r24
    3f2e:	91 83       	std	Z+1, r25	; 0x01
    3f30:	a2 83       	std	Z+2, r26	; 0x02
    3f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f34:	8e 01       	movw	r16, r28
    3f36:	09 58       	subi	r16, 0x89	; 137
    3f38:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e5 58       	subi	r30, 0x85	; 133
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	60 81       	ld	r22, Z
    3f42:	71 81       	ldd	r23, Z+1	; 0x01
    3f44:	82 81       	ldd	r24, Z+2	; 0x02
    3f46:	93 81       	ldd	r25, Z+3	; 0x03
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	4a ef       	ldi	r20, 0xFA	; 250
    3f4e:	54 e4       	ldi	r21, 0x44	; 68
    3f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	f8 01       	movw	r30, r16
    3f5a:	80 83       	st	Z, r24
    3f5c:	91 83       	std	Z+1, r25	; 0x01
    3f5e:	a2 83       	std	Z+2, r26	; 0x02
    3f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f62:	fe 01       	movw	r30, r28
    3f64:	e9 58       	subi	r30, 0x89	; 137
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	60 81       	ld	r22, Z
    3f6a:	71 81       	ldd	r23, Z+1	; 0x01
    3f6c:	82 81       	ldd	r24, Z+2	; 0x02
    3f6e:	93 81       	ldd	r25, Z+3	; 0x03
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e8       	ldi	r20, 0x80	; 128
    3f76:	5f e3       	ldi	r21, 0x3F	; 63
    3f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f7c:	88 23       	and	r24, r24
    3f7e:	44 f4       	brge	.+16     	; 0x3f90 <main+0xaac>
		__ticks = 1;
    3f80:	fe 01       	movw	r30, r28
    3f82:	eb 58       	subi	r30, 0x8B	; 139
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	91 83       	std	Z+1, r25	; 0x01
    3f8c:	80 83       	st	Z, r24
    3f8e:	64 c0       	rjmp	.+200    	; 0x4058 <main+0xb74>
	else if (__tmp > 65535)
    3f90:	fe 01       	movw	r30, r28
    3f92:	e9 58       	subi	r30, 0x89	; 137
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	60 81       	ld	r22, Z
    3f98:	71 81       	ldd	r23, Z+1	; 0x01
    3f9a:	82 81       	ldd	r24, Z+2	; 0x02
    3f9c:	93 81       	ldd	r25, Z+3	; 0x03
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	3f ef       	ldi	r19, 0xFF	; 255
    3fa2:	4f e7       	ldi	r20, 0x7F	; 127
    3fa4:	57 e4       	ldi	r21, 0x47	; 71
    3fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3faa:	18 16       	cp	r1, r24
    3fac:	0c f0       	brlt	.+2      	; 0x3fb0 <main+0xacc>
    3fae:	43 c0       	rjmp	.+134    	; 0x4036 <main+0xb52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e5 58       	subi	r30, 0x85	; 133
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	60 81       	ld	r22, Z
    3fb8:	71 81       	ldd	r23, Z+1	; 0x01
    3fba:	82 81       	ldd	r24, Z+2	; 0x02
    3fbc:	93 81       	ldd	r25, Z+3	; 0x03
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e2       	ldi	r20, 0x20	; 32
    3fc4:	51 e4       	ldi	r21, 0x41	; 65
    3fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fca:	dc 01       	movw	r26, r24
    3fcc:	cb 01       	movw	r24, r22
    3fce:	8e 01       	movw	r16, r28
    3fd0:	0b 58       	subi	r16, 0x8B	; 139
    3fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	80 83       	st	Z, r24
    3fe6:	1f c0       	rjmp	.+62     	; 0x4026 <main+0xb42>
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ed 58       	subi	r30, 0x8D	; 141
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	88 ec       	ldi	r24, 0xC8	; 200
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	91 83       	std	Z+1, r25	; 0x01
    3ff4:	80 83       	st	Z, r24
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	ed 58       	subi	r30, 0x8D	; 141
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	80 81       	ld	r24, Z
    3ffe:	91 81       	ldd	r25, Z+1	; 0x01
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <main+0xb1c>
    4004:	fe 01       	movw	r30, r28
    4006:	ed 58       	subi	r30, 0x8D	; 141
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	91 83       	std	Z+1, r25	; 0x01
    400c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    400e:	de 01       	movw	r26, r28
    4010:	ab 58       	subi	r26, 0x8B	; 139
    4012:	bf 4f       	sbci	r27, 0xFF	; 255
    4014:	fe 01       	movw	r30, r28
    4016:	eb 58       	subi	r30, 0x8B	; 139
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	01 97       	sbiw	r24, 0x01	; 1
    4020:	11 96       	adiw	r26, 0x01	; 1
    4022:	9c 93       	st	X, r25
    4024:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4026:	fe 01       	movw	r30, r28
    4028:	eb 58       	subi	r30, 0x8B	; 139
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	80 81       	ld	r24, Z
    402e:	91 81       	ldd	r25, Z+1	; 0x01
    4030:	00 97       	sbiw	r24, 0x00	; 0
    4032:	d1 f6       	brne	.-76     	; 0x3fe8 <main+0xb04>
    4034:	27 c0       	rjmp	.+78     	; 0x4084 <main+0xba0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4036:	8e 01       	movw	r16, r28
    4038:	0b 58       	subi	r16, 0x8B	; 139
    403a:	1f 4f       	sbci	r17, 0xFF	; 255
    403c:	fe 01       	movw	r30, r28
    403e:	e9 58       	subi	r30, 0x89	; 137
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	60 81       	ld	r22, Z
    4044:	71 81       	ldd	r23, Z+1	; 0x01
    4046:	82 81       	ldd	r24, Z+2	; 0x02
    4048:	93 81       	ldd	r25, Z+3	; 0x03
    404a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	f8 01       	movw	r30, r16
    4054:	91 83       	std	Z+1, r25	; 0x01
    4056:	80 83       	st	Z, r24
    4058:	de 01       	movw	r26, r28
    405a:	af 58       	subi	r26, 0x8F	; 143
    405c:	bf 4f       	sbci	r27, 0xFF	; 255
    405e:	fe 01       	movw	r30, r28
    4060:	eb 58       	subi	r30, 0x8B	; 139
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	80 81       	ld	r24, Z
    4066:	91 81       	ldd	r25, Z+1	; 0x01
    4068:	8d 93       	st	X+, r24
    406a:	9c 93       	st	X, r25
    406c:	fe 01       	movw	r30, r28
    406e:	ef 58       	subi	r30, 0x8F	; 143
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 81       	ld	r24, Z
    4074:	91 81       	ldd	r25, Z+1	; 0x01
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	f1 f7       	brne	.-4      	; 0x4076 <main+0xb92>
    407a:	fe 01       	movw	r30, r28
    407c:	ef 58       	subi	r30, 0x8F	; 143
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	80 83       	st	Z, r24
							_delay_ms(1000);

							Gotoxy(0,1);
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	61 e0       	ldi	r22, 0x01	; 1
    4088:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>

							LCD_vidWriteString("Item is Added");
    408c:	87 ef       	ldi	r24, 0xF7	; 247
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4094:	fe 01       	movw	r30, r28
    4096:	e3 59       	subi	r30, 0x93	; 147
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	a6 e9       	ldi	r26, 0x96	; 150
    40a0:	b3 e4       	ldi	r27, 0x43	; 67
    40a2:	80 83       	st	Z, r24
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	a2 83       	std	Z+2, r26	; 0x02
    40a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40aa:	8e 01       	movw	r16, r28
    40ac:	07 59       	subi	r16, 0x97	; 151
    40ae:	1f 4f       	sbci	r17, 0xFF	; 255
    40b0:	fe 01       	movw	r30, r28
    40b2:	e3 59       	subi	r30, 0x93	; 147
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	60 81       	ld	r22, Z
    40b8:	71 81       	ldd	r23, Z+1	; 0x01
    40ba:	82 81       	ldd	r24, Z+2	; 0x02
    40bc:	93 81       	ldd	r25, Z+3	; 0x03
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	4a ef       	ldi	r20, 0xFA	; 250
    40c4:	54 e4       	ldi	r21, 0x44	; 68
    40c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	f8 01       	movw	r30, r16
    40d0:	80 83       	st	Z, r24
    40d2:	91 83       	std	Z+1, r25	; 0x01
    40d4:	a2 83       	std	Z+2, r26	; 0x02
    40d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40d8:	fe 01       	movw	r30, r28
    40da:	e7 59       	subi	r30, 0x97	; 151
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	60 81       	ld	r22, Z
    40e0:	71 81       	ldd	r23, Z+1	; 0x01
    40e2:	82 81       	ldd	r24, Z+2	; 0x02
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	5f e3       	ldi	r21, 0x3F	; 63
    40ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	44 f4       	brge	.+16     	; 0x4106 <main+0xc22>
		__ticks = 1;
    40f6:	fe 01       	movw	r30, r28
    40f8:	e9 59       	subi	r30, 0x99	; 153
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
    4104:	64 c0       	rjmp	.+200    	; 0x41ce <main+0xcea>
	else if (__tmp > 65535)
    4106:	fe 01       	movw	r30, r28
    4108:	e7 59       	subi	r30, 0x97	; 151
    410a:	ff 4f       	sbci	r31, 0xFF	; 255
    410c:	60 81       	ld	r22, Z
    410e:	71 81       	ldd	r23, Z+1	; 0x01
    4110:	82 81       	ldd	r24, Z+2	; 0x02
    4112:	93 81       	ldd	r25, Z+3	; 0x03
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	3f ef       	ldi	r19, 0xFF	; 255
    4118:	4f e7       	ldi	r20, 0x7F	; 127
    411a:	57 e4       	ldi	r21, 0x47	; 71
    411c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4120:	18 16       	cp	r1, r24
    4122:	0c f0       	brlt	.+2      	; 0x4126 <main+0xc42>
    4124:	43 c0       	rjmp	.+134    	; 0x41ac <main+0xcc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4126:	fe 01       	movw	r30, r28
    4128:	e3 59       	subi	r30, 0x93	; 147
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	60 81       	ld	r22, Z
    412e:	71 81       	ldd	r23, Z+1	; 0x01
    4130:	82 81       	ldd	r24, Z+2	; 0x02
    4132:	93 81       	ldd	r25, Z+3	; 0x03
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	40 e2       	ldi	r20, 0x20	; 32
    413a:	51 e4       	ldi	r21, 0x41	; 65
    413c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	8e 01       	movw	r16, r28
    4146:	09 59       	subi	r16, 0x99	; 153
    4148:	1f 4f       	sbci	r17, 0xFF	; 255
    414a:	bc 01       	movw	r22, r24
    414c:	cd 01       	movw	r24, r26
    414e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4152:	dc 01       	movw	r26, r24
    4154:	cb 01       	movw	r24, r22
    4156:	f8 01       	movw	r30, r16
    4158:	91 83       	std	Z+1, r25	; 0x01
    415a:	80 83       	st	Z, r24
    415c:	1f c0       	rjmp	.+62     	; 0x419c <main+0xcb8>
    415e:	fe 01       	movw	r30, r28
    4160:	eb 59       	subi	r30, 0x9B	; 155
    4162:	ff 4f       	sbci	r31, 0xFF	; 255
    4164:	88 ec       	ldi	r24, 0xC8	; 200
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	91 83       	std	Z+1, r25	; 0x01
    416a:	80 83       	st	Z, r24
    416c:	fe 01       	movw	r30, r28
    416e:	eb 59       	subi	r30, 0x9B	; 155
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	80 81       	ld	r24, Z
    4174:	91 81       	ldd	r25, Z+1	; 0x01
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	f1 f7       	brne	.-4      	; 0x4176 <main+0xc92>
    417a:	fe 01       	movw	r30, r28
    417c:	eb 59       	subi	r30, 0x9B	; 155
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	91 83       	std	Z+1, r25	; 0x01
    4182:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4184:	de 01       	movw	r26, r28
    4186:	a9 59       	subi	r26, 0x99	; 153
    4188:	bf 4f       	sbci	r27, 0xFF	; 255
    418a:	fe 01       	movw	r30, r28
    418c:	e9 59       	subi	r30, 0x99	; 153
    418e:	ff 4f       	sbci	r31, 0xFF	; 255
    4190:	80 81       	ld	r24, Z
    4192:	91 81       	ldd	r25, Z+1	; 0x01
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	11 96       	adiw	r26, 0x01	; 1
    4198:	9c 93       	st	X, r25
    419a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419c:	fe 01       	movw	r30, r28
    419e:	e9 59       	subi	r30, 0x99	; 153
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	80 81       	ld	r24, Z
    41a4:	91 81       	ldd	r25, Z+1	; 0x01
    41a6:	00 97       	sbiw	r24, 0x00	; 0
    41a8:	d1 f6       	brne	.-76     	; 0x415e <main+0xc7a>
    41aa:	27 c0       	rjmp	.+78     	; 0x41fa <main+0xd16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ac:	8e 01       	movw	r16, r28
    41ae:	09 59       	subi	r16, 0x99	; 153
    41b0:	1f 4f       	sbci	r17, 0xFF	; 255
    41b2:	fe 01       	movw	r30, r28
    41b4:	e7 59       	subi	r30, 0x97	; 151
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	60 81       	ld	r22, Z
    41ba:	71 81       	ldd	r23, Z+1	; 0x01
    41bc:	82 81       	ldd	r24, Z+2	; 0x02
    41be:	93 81       	ldd	r25, Z+3	; 0x03
    41c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	f8 01       	movw	r30, r16
    41ca:	91 83       	std	Z+1, r25	; 0x01
    41cc:	80 83       	st	Z, r24
    41ce:	de 01       	movw	r26, r28
    41d0:	ad 59       	subi	r26, 0x9D	; 157
    41d2:	bf 4f       	sbci	r27, 0xFF	; 255
    41d4:	fe 01       	movw	r30, r28
    41d6:	e9 59       	subi	r30, 0x99	; 153
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	8d 93       	st	X+, r24
    41e0:	9c 93       	st	X, r25
    41e2:	fe 01       	movw	r30, r28
    41e4:	ed 59       	subi	r30, 0x9D	; 157
    41e6:	ff 4f       	sbci	r31, 0xFF	; 255
    41e8:	80 81       	ld	r24, Z
    41ea:	91 81       	ldd	r25, Z+1	; 0x01
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	f1 f7       	brne	.-4      	; 0x41ec <main+0xd08>
    41f0:	fe 01       	movw	r30, r28
    41f2:	ed 59       	subi	r30, 0x9D	; 157
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
							_delay_ms(300);
							DCM_voidStop();
    41fa:	0e 94 34 06 	call	0xc68	; 0xc68 <DCM_voidStop>
    41fe:	f2 c0       	rjmp	.+484    	; 0x43e4 <main+0xf00>
						}


						break;
					case '2':
						LCD_flag=0;
    4200:	fe 01       	movw	r30, r28
    4202:	e9 53       	subi	r30, 0x39	; 57
    4204:	ff 4f       	sbci	r31, 0xFF	; 255
    4206:	10 82       	st	Z, r1
						LCD_vidSendCommand(lcd_Clear);
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
						Gotoxy(0,1);
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	61 e0       	ldi	r22, 0x01	; 1
    4212:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("Spiro : ");
    4216:	85 e0       	ldi	r24, 0x05	; 5
    4218:	91 e0       	ldi	r25, 0x01	; 1
    421a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

						//VARIABLES TO PUT THE NUM OF CANS TO SHOW IT ON LCD
						u8 spiro_num=0;
    421e:	fe 01       	movw	r30, r28
    4220:	e4 53       	subi	r30, 0x34	; 52
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	10 82       	st	Z, r1
						u8 cola_num=0;
    4226:	fe 01       	movw	r30, r28
    4228:	e3 53       	subi	r30, 0x33	; 51
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	10 82       	st	Z, r1
						EEPROM_vRead(EEPROM_SPIRO_ADDRESS,&spiro_num);
    422e:	9e 01       	movw	r18, r28
    4230:	24 53       	subi	r18, 0x34	; 52
    4232:	3f 4f       	sbci	r19, 0xFF	; 255
    4234:	8d ef       	ldi	r24, 0xFD	; 253
    4236:	b9 01       	movw	r22, r18
    4238:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>
						EEPROM_vRead(EEPROM_COLA_ADDRESS,&cola_num);
    423c:	9e 01       	movw	r18, r28
    423e:	23 53       	subi	r18, 0x33	; 51
    4240:	3f 4f       	sbci	r19, 0xFF	; 255
    4242:	81 ef       	ldi	r24, 0xF1	; 241
    4244:	b9 01       	movw	r22, r18
    4246:	0e 94 5f 09 	call	0x12be	; 0x12be <EEPROM_vRead>

						LCD_writeNum_u8(spiro_num);
    424a:	fe 01       	movw	r30, r28
    424c:	e4 53       	subi	r30, 0x34	; 52
    424e:	ff 4f       	sbci	r31, 0xFF	; 255
    4250:	80 81       	ld	r24, Z
    4252:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_writeNum_u8>
						Gotoxy(0,2);
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	62 e0       	ldi	r22, 0x02	; 2
    425a:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("Big-Cola: ");
    425e:	8e e0       	ldi	r24, 0x0E	; 14
    4260:	91 e0       	ldi	r25, 0x01	; 1
    4262:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

						LCD_writeNum_u8(cola_num);
    4266:	fe 01       	movw	r30, r28
    4268:	e3 53       	subi	r30, 0x33	; 51
    426a:	ff 4f       	sbci	r31, 0xFF	; 255
    426c:	80 81       	ld	r24, Z
    426e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_writeNum_u8>
    4272:	fe 01       	movw	r30, r28
    4274:	e1 5a       	subi	r30, 0xA1	; 161
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	aa ef       	ldi	r26, 0xFA	; 250
    427e:	b4 e4       	ldi	r27, 0x44	; 68
    4280:	80 83       	st	Z, r24
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	a2 83       	std	Z+2, r26	; 0x02
    4286:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4288:	8e 01       	movw	r16, r28
    428a:	05 5a       	subi	r16, 0xA5	; 165
    428c:	1f 4f       	sbci	r17, 0xFF	; 255
    428e:	fe 01       	movw	r30, r28
    4290:	e1 5a       	subi	r30, 0xA1	; 161
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	60 81       	ld	r22, Z
    4296:	71 81       	ldd	r23, Z+1	; 0x01
    4298:	82 81       	ldd	r24, Z+2	; 0x02
    429a:	93 81       	ldd	r25, Z+3	; 0x03
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	4a ef       	ldi	r20, 0xFA	; 250
    42a2:	54 e4       	ldi	r21, 0x44	; 68
    42a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	f8 01       	movw	r30, r16
    42ae:	80 83       	st	Z, r24
    42b0:	91 83       	std	Z+1, r25	; 0x01
    42b2:	a2 83       	std	Z+2, r26	; 0x02
    42b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42b6:	fe 01       	movw	r30, r28
    42b8:	e5 5a       	subi	r30, 0xA5	; 165
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	60 81       	ld	r22, Z
    42be:	71 81       	ldd	r23, Z+1	; 0x01
    42c0:	82 81       	ldd	r24, Z+2	; 0x02
    42c2:	93 81       	ldd	r25, Z+3	; 0x03
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	40 e8       	ldi	r20, 0x80	; 128
    42ca:	5f e3       	ldi	r21, 0x3F	; 63
    42cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42d0:	88 23       	and	r24, r24
    42d2:	44 f4       	brge	.+16     	; 0x42e4 <main+0xe00>
		__ticks = 1;
    42d4:	fe 01       	movw	r30, r28
    42d6:	e7 5a       	subi	r30, 0xA7	; 167
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	91 83       	std	Z+1, r25	; 0x01
    42e0:	80 83       	st	Z, r24
    42e2:	64 c0       	rjmp	.+200    	; 0x43ac <main+0xec8>
	else if (__tmp > 65535)
    42e4:	fe 01       	movw	r30, r28
    42e6:	e5 5a       	subi	r30, 0xA5	; 165
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	60 81       	ld	r22, Z
    42ec:	71 81       	ldd	r23, Z+1	; 0x01
    42ee:	82 81       	ldd	r24, Z+2	; 0x02
    42f0:	93 81       	ldd	r25, Z+3	; 0x03
    42f2:	20 e0       	ldi	r18, 0x00	; 0
    42f4:	3f ef       	ldi	r19, 0xFF	; 255
    42f6:	4f e7       	ldi	r20, 0x7F	; 127
    42f8:	57 e4       	ldi	r21, 0x47	; 71
    42fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42fe:	18 16       	cp	r1, r24
    4300:	0c f0       	brlt	.+2      	; 0x4304 <main+0xe20>
    4302:	43 c0       	rjmp	.+134    	; 0x438a <main+0xea6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4304:	fe 01       	movw	r30, r28
    4306:	e1 5a       	subi	r30, 0xA1	; 161
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	60 81       	ld	r22, Z
    430c:	71 81       	ldd	r23, Z+1	; 0x01
    430e:	82 81       	ldd	r24, Z+2	; 0x02
    4310:	93 81       	ldd	r25, Z+3	; 0x03
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	40 e2       	ldi	r20, 0x20	; 32
    4318:	51 e4       	ldi	r21, 0x41	; 65
    431a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	8e 01       	movw	r16, r28
    4324:	07 5a       	subi	r16, 0xA7	; 167
    4326:	1f 4f       	sbci	r17, 0xFF	; 255
    4328:	bc 01       	movw	r22, r24
    432a:	cd 01       	movw	r24, r26
    432c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	f8 01       	movw	r30, r16
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	80 83       	st	Z, r24
    433a:	1f c0       	rjmp	.+62     	; 0x437a <main+0xe96>
    433c:	fe 01       	movw	r30, r28
    433e:	e9 5a       	subi	r30, 0xA9	; 169
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	88 ec       	ldi	r24, 0xC8	; 200
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	91 83       	std	Z+1, r25	; 0x01
    4348:	80 83       	st	Z, r24
    434a:	fe 01       	movw	r30, r28
    434c:	e9 5a       	subi	r30, 0xA9	; 169
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	80 81       	ld	r24, Z
    4352:	91 81       	ldd	r25, Z+1	; 0x01
    4354:	01 97       	sbiw	r24, 0x01	; 1
    4356:	f1 f7       	brne	.-4      	; 0x4354 <main+0xe70>
    4358:	fe 01       	movw	r30, r28
    435a:	e9 5a       	subi	r30, 0xA9	; 169
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	91 83       	std	Z+1, r25	; 0x01
    4360:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4362:	de 01       	movw	r26, r28
    4364:	a7 5a       	subi	r26, 0xA7	; 167
    4366:	bf 4f       	sbci	r27, 0xFF	; 255
    4368:	fe 01       	movw	r30, r28
    436a:	e7 5a       	subi	r30, 0xA7	; 167
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	80 81       	ld	r24, Z
    4370:	91 81       	ldd	r25, Z+1	; 0x01
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	11 96       	adiw	r26, 0x01	; 1
    4376:	9c 93       	st	X, r25
    4378:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    437a:	fe 01       	movw	r30, r28
    437c:	e7 5a       	subi	r30, 0xA7	; 167
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	80 81       	ld	r24, Z
    4382:	91 81       	ldd	r25, Z+1	; 0x01
    4384:	00 97       	sbiw	r24, 0x00	; 0
    4386:	d1 f6       	brne	.-76     	; 0x433c <main+0xe58>
    4388:	2d c0       	rjmp	.+90     	; 0x43e4 <main+0xf00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438a:	8e 01       	movw	r16, r28
    438c:	07 5a       	subi	r16, 0xA7	; 167
    438e:	1f 4f       	sbci	r17, 0xFF	; 255
    4390:	fe 01       	movw	r30, r28
    4392:	e5 5a       	subi	r30, 0xA5	; 165
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	60 81       	ld	r22, Z
    4398:	71 81       	ldd	r23, Z+1	; 0x01
    439a:	82 81       	ldd	r24, Z+2	; 0x02
    439c:	93 81       	ldd	r25, Z+3	; 0x03
    439e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	f8 01       	movw	r30, r16
    43a8:	91 83       	std	Z+1, r25	; 0x01
    43aa:	80 83       	st	Z, r24
    43ac:	de 01       	movw	r26, r28
    43ae:	ab 5a       	subi	r26, 0xAB	; 171
    43b0:	bf 4f       	sbci	r27, 0xFF	; 255
    43b2:	fe 01       	movw	r30, r28
    43b4:	e7 5a       	subi	r30, 0xA7	; 167
    43b6:	ff 4f       	sbci	r31, 0xFF	; 255
    43b8:	80 81       	ld	r24, Z
    43ba:	91 81       	ldd	r25, Z+1	; 0x01
    43bc:	11 96       	adiw	r26, 0x01	; 1
    43be:	9c 93       	st	X, r25
    43c0:	8e 93       	st	-X, r24
    43c2:	fe 01       	movw	r30, r28
    43c4:	eb 5a       	subi	r30, 0xAB	; 171
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	80 81       	ld	r24, Z
    43ca:	91 81       	ldd	r25, Z+1	; 0x01
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <main+0xee8>
    43d0:	fe 01       	movw	r30, r28
    43d2:	eb 5a       	subi	r30, 0xAB	; 171
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	91 83       	std	Z+1, r25	; 0x01
    43d8:	80 83       	st	Z, r24
    43da:	04 c0       	rjmp	.+8      	; 0x43e4 <main+0xf00>
						_delay_ms(2000);

						break;

					default :
						LCD_flag=0;
    43dc:	fe 01       	movw	r30, r28
    43de:	e9 53       	subi	r30, 0x39	; 57
    43e0:	ff 4f       	sbci	r31, 0xFF	; 255
    43e2:	10 82       	st	Z, r1
				LCD_vidSendCommand(lcd_Clear);

				LCD_vidWriteString("Correct Password");
				_delay_ms(500);

				while(key_pressed!='3'){
    43e4:	fe 01       	movw	r30, r28
    43e6:	e8 53       	subi	r30, 0x38	; 56
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	80 81       	ld	r24, Z
    43ec:	83 33       	cpi	r24, 0x33	; 51
    43ee:	09 f0       	breq	.+2      	; 0x43f2 <main+0xf0e>
    43f0:	e1 ca       	rjmp	.-2622   	; 0x39b4 <main+0x4d0>
    43f2:	af c9       	rjmp	.-3234   	; 0x3752 <main+0x26e>

			}
			else//WRONG PASSWORD
			{
				////BUZZ_ON AND PRINT INCORRECT PASSWORD
				DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D6,DIO_HIGH);
    43f4:	84 e0       	ldi	r24, 0x04	; 4
    43f6:	66 e0       	ldi	r22, 0x06	; 6
    43f8:	41 e0       	ldi	r20, 0x01	; 1
    43fa:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
				LCD_vidWriteString("INCORRECT");
    43fe:	89 e1       	ldi	r24, 0x19	; 25
    4400:	91 e0       	ldi	r25, 0x01	; 1
    4402:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
				Gotoxy(0,2);
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	62 e0       	ldi	r22, 0x02	; 2
    440a:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				LCD_vidWriteString("PASSWORD");
    440e:	83 e2       	ldi	r24, 0x23	; 35
    4410:	91 e0       	ldi	r25, 0x01	; 1
    4412:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4416:	fe 01       	movw	r30, r28
    4418:	ef 5a       	subi	r30, 0xAF	; 175
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	80 e0       	ldi	r24, 0x00	; 0
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	aa e7       	ldi	r26, 0x7A	; 122
    4422:	b4 e4       	ldi	r27, 0x44	; 68
    4424:	80 83       	st	Z, r24
    4426:	91 83       	std	Z+1, r25	; 0x01
    4428:	a2 83       	std	Z+2, r26	; 0x02
    442a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    442c:	8e 01       	movw	r16, r28
    442e:	03 5b       	subi	r16, 0xB3	; 179
    4430:	1f 4f       	sbci	r17, 0xFF	; 255
    4432:	fe 01       	movw	r30, r28
    4434:	ef 5a       	subi	r30, 0xAF	; 175
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	60 81       	ld	r22, Z
    443a:	71 81       	ldd	r23, Z+1	; 0x01
    443c:	82 81       	ldd	r24, Z+2	; 0x02
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	4a ef       	ldi	r20, 0xFA	; 250
    4446:	54 e4       	ldi	r21, 0x44	; 68
    4448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	f8 01       	movw	r30, r16
    4452:	80 83       	st	Z, r24
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	a2 83       	std	Z+2, r26	; 0x02
    4458:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    445a:	fe 01       	movw	r30, r28
    445c:	e3 5b       	subi	r30, 0xB3	; 179
    445e:	ff 4f       	sbci	r31, 0xFF	; 255
    4460:	60 81       	ld	r22, Z
    4462:	71 81       	ldd	r23, Z+1	; 0x01
    4464:	82 81       	ldd	r24, Z+2	; 0x02
    4466:	93 81       	ldd	r25, Z+3	; 0x03
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e8       	ldi	r20, 0x80	; 128
    446e:	5f e3       	ldi	r21, 0x3F	; 63
    4470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4474:	88 23       	and	r24, r24
    4476:	44 f4       	brge	.+16     	; 0x4488 <main+0xfa4>
		__ticks = 1;
    4478:	fe 01       	movw	r30, r28
    447a:	e5 5b       	subi	r30, 0xB5	; 181
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
    4486:	64 c0       	rjmp	.+200    	; 0x4550 <main+0x106c>
	else if (__tmp > 65535)
    4488:	fe 01       	movw	r30, r28
    448a:	e3 5b       	subi	r30, 0xB3	; 179
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	60 81       	ld	r22, Z
    4490:	71 81       	ldd	r23, Z+1	; 0x01
    4492:	82 81       	ldd	r24, Z+2	; 0x02
    4494:	93 81       	ldd	r25, Z+3	; 0x03
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	3f ef       	ldi	r19, 0xFF	; 255
    449a:	4f e7       	ldi	r20, 0x7F	; 127
    449c:	57 e4       	ldi	r21, 0x47	; 71
    449e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44a2:	18 16       	cp	r1, r24
    44a4:	0c f0       	brlt	.+2      	; 0x44a8 <main+0xfc4>
    44a6:	43 c0       	rjmp	.+134    	; 0x452e <main+0x104a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44a8:	fe 01       	movw	r30, r28
    44aa:	ef 5a       	subi	r30, 0xAF	; 175
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	60 81       	ld	r22, Z
    44b0:	71 81       	ldd	r23, Z+1	; 0x01
    44b2:	82 81       	ldd	r24, Z+2	; 0x02
    44b4:	93 81       	ldd	r25, Z+3	; 0x03
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	40 e2       	ldi	r20, 0x20	; 32
    44bc:	51 e4       	ldi	r21, 0x41	; 65
    44be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	8e 01       	movw	r16, r28
    44c8:	05 5b       	subi	r16, 0xB5	; 181
    44ca:	1f 4f       	sbci	r17, 0xFF	; 255
    44cc:	bc 01       	movw	r22, r24
    44ce:	cd 01       	movw	r24, r26
    44d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	f8 01       	movw	r30, r16
    44da:	91 83       	std	Z+1, r25	; 0x01
    44dc:	80 83       	st	Z, r24
    44de:	1f c0       	rjmp	.+62     	; 0x451e <main+0x103a>
    44e0:	fe 01       	movw	r30, r28
    44e2:	e7 5b       	subi	r30, 0xB7	; 183
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	88 ec       	ldi	r24, 0xC8	; 200
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	91 83       	std	Z+1, r25	; 0x01
    44ec:	80 83       	st	Z, r24
    44ee:	fe 01       	movw	r30, r28
    44f0:	e7 5b       	subi	r30, 0xB7	; 183
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	01 97       	sbiw	r24, 0x01	; 1
    44fa:	f1 f7       	brne	.-4      	; 0x44f8 <main+0x1014>
    44fc:	fe 01       	movw	r30, r28
    44fe:	e7 5b       	subi	r30, 0xB7	; 183
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	91 83       	std	Z+1, r25	; 0x01
    4504:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4506:	de 01       	movw	r26, r28
    4508:	a5 5b       	subi	r26, 0xB5	; 181
    450a:	bf 4f       	sbci	r27, 0xFF	; 255
    450c:	fe 01       	movw	r30, r28
    450e:	e5 5b       	subi	r30, 0xB5	; 181
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	91 81       	ldd	r25, Z+1	; 0x01
    4516:	01 97       	sbiw	r24, 0x01	; 1
    4518:	11 96       	adiw	r26, 0x01	; 1
    451a:	9c 93       	st	X, r25
    451c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    451e:	fe 01       	movw	r30, r28
    4520:	e5 5b       	subi	r30, 0xB5	; 181
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	80 81       	ld	r24, Z
    4526:	91 81       	ldd	r25, Z+1	; 0x01
    4528:	00 97       	sbiw	r24, 0x00	; 0
    452a:	d1 f6       	brne	.-76     	; 0x44e0 <main+0xffc>
    452c:	27 c0       	rjmp	.+78     	; 0x457c <main+0x1098>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    452e:	8e 01       	movw	r16, r28
    4530:	05 5b       	subi	r16, 0xB5	; 181
    4532:	1f 4f       	sbci	r17, 0xFF	; 255
    4534:	fe 01       	movw	r30, r28
    4536:	e3 5b       	subi	r30, 0xB3	; 179
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	60 81       	ld	r22, Z
    453c:	71 81       	ldd	r23, Z+1	; 0x01
    453e:	82 81       	ldd	r24, Z+2	; 0x02
    4540:	93 81       	ldd	r25, Z+3	; 0x03
    4542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	f8 01       	movw	r30, r16
    454c:	91 83       	std	Z+1, r25	; 0x01
    454e:	80 83       	st	Z, r24
    4550:	de 01       	movw	r26, r28
    4552:	a9 5b       	subi	r26, 0xB9	; 185
    4554:	bf 4f       	sbci	r27, 0xFF	; 255
    4556:	fe 01       	movw	r30, r28
    4558:	e5 5b       	subi	r30, 0xB5	; 181
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	80 81       	ld	r24, Z
    455e:	91 81       	ldd	r25, Z+1	; 0x01
    4560:	8d 93       	st	X+, r24
    4562:	9c 93       	st	X, r25
    4564:	fe 01       	movw	r30, r28
    4566:	e9 5b       	subi	r30, 0xB9	; 185
    4568:	ff 4f       	sbci	r31, 0xFF	; 255
    456a:	80 81       	ld	r24, Z
    456c:	91 81       	ldd	r25, Z+1	; 0x01
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <main+0x108a>
    4572:	fe 01       	movw	r30, r28
    4574:	e9 5b       	subi	r30, 0xB9	; 185
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	80 83       	st	Z, r24
				_delay_ms(1000);

				DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D6,DIO_LOW);
    457c:	84 e0       	ldi	r24, 0x04	; 4
    457e:	66 e0       	ldi	r22, 0x06	; 6
    4580:	40 e0       	ldi	r20, 0x00	; 0
    4582:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
				LCD_vidSendCommand(lcd_Clear);
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    458c:	e2 c8       	rjmp	.-3644   	; 0x3752 <main+0x26e>


		case '2': //right

			while(key_pressed!='3'){
				LCD_vidSendCommand(lcd_Clear);
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    4594:	fe 01       	movw	r30, r28
    4596:	ed 5b       	subi	r30, 0xBD	; 189
    4598:	ff 4f       	sbci	r31, 0xFF	; 255
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	aa ef       	ldi	r26, 0xFA	; 250
    45a0:	b3 e4       	ldi	r27, 0x43	; 67
    45a2:	80 83       	st	Z, r24
    45a4:	91 83       	std	Z+1, r25	; 0x01
    45a6:	a2 83       	std	Z+2, r26	; 0x02
    45a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45aa:	8e 01       	movw	r16, r28
    45ac:	01 5c       	subi	r16, 0xC1	; 193
    45ae:	1f 4f       	sbci	r17, 0xFF	; 255
    45b0:	fe 01       	movw	r30, r28
    45b2:	ed 5b       	subi	r30, 0xBD	; 189
    45b4:	ff 4f       	sbci	r31, 0xFF	; 255
    45b6:	60 81       	ld	r22, Z
    45b8:	71 81       	ldd	r23, Z+1	; 0x01
    45ba:	82 81       	ldd	r24, Z+2	; 0x02
    45bc:	93 81       	ldd	r25, Z+3	; 0x03
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	4a ef       	ldi	r20, 0xFA	; 250
    45c4:	54 e4       	ldi	r21, 0x44	; 68
    45c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	f8 01       	movw	r30, r16
    45d0:	80 83       	st	Z, r24
    45d2:	91 83       	std	Z+1, r25	; 0x01
    45d4:	a2 83       	std	Z+2, r26	; 0x02
    45d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45d8:	fe 01       	movw	r30, r28
    45da:	ff 96       	adiw	r30, 0x3f	; 63
    45dc:	60 81       	ld	r22, Z
    45de:	71 81       	ldd	r23, Z+1	; 0x01
    45e0:	82 81       	ldd	r24, Z+2	; 0x02
    45e2:	93 81       	ldd	r25, Z+3	; 0x03
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	40 e8       	ldi	r20, 0x80	; 128
    45ea:	5f e3       	ldi	r21, 0x3F	; 63
    45ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45f0:	88 23       	and	r24, r24
    45f2:	2c f4       	brge	.+10     	; 0x45fe <main+0x111a>
		__ticks = 1;
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	9e af       	std	Y+62, r25	; 0x3e
    45fa:	8d af       	std	Y+61, r24	; 0x3d
    45fc:	46 c0       	rjmp	.+140    	; 0x468a <main+0x11a6>
	else if (__tmp > 65535)
    45fe:	fe 01       	movw	r30, r28
    4600:	ff 96       	adiw	r30, 0x3f	; 63
    4602:	60 81       	ld	r22, Z
    4604:	71 81       	ldd	r23, Z+1	; 0x01
    4606:	82 81       	ldd	r24, Z+2	; 0x02
    4608:	93 81       	ldd	r25, Z+3	; 0x03
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	3f ef       	ldi	r19, 0xFF	; 255
    460e:	4f e7       	ldi	r20, 0x7F	; 127
    4610:	57 e4       	ldi	r21, 0x47	; 71
    4612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4616:	18 16       	cp	r1, r24
    4618:	64 f5       	brge	.+88     	; 0x4672 <main+0x118e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461a:	fe 01       	movw	r30, r28
    461c:	ed 5b       	subi	r30, 0xBD	; 189
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	60 81       	ld	r22, Z
    4622:	71 81       	ldd	r23, Z+1	; 0x01
    4624:	82 81       	ldd	r24, Z+2	; 0x02
    4626:	93 81       	ldd	r25, Z+3	; 0x03
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	40 e2       	ldi	r20, 0x20	; 32
    462e:	51 e4       	ldi	r21, 0x41	; 65
    4630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	bc 01       	movw	r22, r24
    463a:	cd 01       	movw	r24, r26
    463c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	9e af       	std	Y+62, r25	; 0x3e
    4646:	8d af       	std	Y+61, r24	; 0x3d
    4648:	0f c0       	rjmp	.+30     	; 0x4668 <main+0x1184>
    464a:	88 ec       	ldi	r24, 0xC8	; 200
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	9c af       	std	Y+60, r25	; 0x3c
    4650:	8b af       	std	Y+59, r24	; 0x3b
    4652:	8b ad       	ldd	r24, Y+59	; 0x3b
    4654:	9c ad       	ldd	r25, Y+60	; 0x3c
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	f1 f7       	brne	.-4      	; 0x4656 <main+0x1172>
    465a:	9c af       	std	Y+60, r25	; 0x3c
    465c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4660:	9e ad       	ldd	r25, Y+62	; 0x3e
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	9e af       	std	Y+62, r25	; 0x3e
    4666:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4668:	8d ad       	ldd	r24, Y+61	; 0x3d
    466a:	9e ad       	ldd	r25, Y+62	; 0x3e
    466c:	00 97       	sbiw	r24, 0x00	; 0
    466e:	69 f7       	brne	.-38     	; 0x464a <main+0x1166>
    4670:	16 c0       	rjmp	.+44     	; 0x469e <main+0x11ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4672:	fe 01       	movw	r30, r28
    4674:	ff 96       	adiw	r30, 0x3f	; 63
    4676:	60 81       	ld	r22, Z
    4678:	71 81       	ldd	r23, Z+1	; 0x01
    467a:	82 81       	ldd	r24, Z+2	; 0x02
    467c:	93 81       	ldd	r25, Z+3	; 0x03
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	9e af       	std	Y+62, r25	; 0x3e
    4688:	8d af       	std	Y+61, r24	; 0x3d
    468a:	8d ad       	ldd	r24, Y+61	; 0x3d
    468c:	9e ad       	ldd	r25, Y+62	; 0x3e
    468e:	9a af       	std	Y+58, r25	; 0x3a
    4690:	89 af       	std	Y+57, r24	; 0x39
    4692:	89 ad       	ldd	r24, Y+57	; 0x39
    4694:	9a ad       	ldd	r25, Y+58	; 0x3a
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	f1 f7       	brne	.-4      	; 0x4696 <main+0x11b2>
    469a:	9a af       	std	Y+58, r25	; 0x3a
    469c:	89 af       	std	Y+57, r24	; 0x39

				_delay_ms(500);
				Gotoxy(0,1);
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	61 e0       	ldi	r22, 0x01	; 1
    46a2:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				LCD_vidWriteString("1:spiro");
    46a6:	8c e2       	ldi	r24, 0x2C	; 44
    46a8:	91 e0       	ldi	r25, 0x01	; 1
    46aa:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

				Gotoxy(0,2);
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	62 e0       	ldi	r22, 0x02	; 2
    46b2:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
				LCD_vidWriteString("2:BigCola 3:out");
    46b6:	84 e3       	ldi	r24, 0x34	; 52
    46b8:	91 e0       	ldi	r25, 0x01	; 1
    46ba:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
				//WHATEVER HE SELECTS THE ITEM WILL DECREASE BY ONE AND SERVO WILL WORK

				key_pressed = NOT_PRESSED;
    46be:	fe 01       	movw	r30, r28
    46c0:	e8 53       	subi	r30, 0x38	; 56
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	8f ef       	ldi	r24, 0xFF	; 255
    46c6:	80 83       	st	Z, r24
    46c8:	06 c0       	rjmp	.+12     	; 0x46d6 <main+0x11f2>

				while (key_pressed == NOT_PRESSED)
				{
					key_pressed = KPD_GetKey();
    46ca:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    46ce:	fe 01       	movw	r30, r28
    46d0:	e8 53       	subi	r30, 0x38	; 56
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	80 83       	st	Z, r24
				LCD_vidWriteString("2:BigCola 3:out");
				//WHATEVER HE SELECTS THE ITEM WILL DECREASE BY ONE AND SERVO WILL WORK

				key_pressed = NOT_PRESSED;

				while (key_pressed == NOT_PRESSED)
    46d6:	fe 01       	movw	r30, r28
    46d8:	e8 53       	subi	r30, 0x38	; 56
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	80 81       	ld	r24, Z
    46de:	8f 3f       	cpi	r24, 0xFF	; 255
    46e0:	a1 f3       	breq	.-24     	; 0x46ca <main+0x11e6>
				{
					key_pressed = KPD_GetKey();
				}
				if (key_pressed=='1')
    46e2:	fe 01       	movw	r30, r28
    46e4:	e8 53       	subi	r30, 0x38	; 56
    46e6:	ff 4f       	sbci	r31, 0xFF	; 255
    46e8:	80 81       	ld	r24, Z
    46ea:	81 33       	cpi	r24, 0x31	; 49
    46ec:	09 f0       	breq	.+2      	; 0x46f0 <main+0x120c>
    46ee:	19 c1       	rjmp	.+562    	; 0x4922 <main+0x143e>
				{
					LCD_vidSendCommand(lcd_Clear);
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
					if (spiro==0)
    46f6:	80 91 c0 01 	lds	r24, 0x01C0
    46fa:	88 23       	and	r24, r24
    46fc:	09 f0       	breq	.+2      	; 0x4700 <main+0x121c>
    46fe:	84 c0       	rjmp	.+264    	; 0x4808 <main+0x1324>
					{
						//BUZZER ON AND PRINT THERE IS NO CANS
						DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D3,DIO_HIGH);
    4700:	84 e0       	ldi	r24, 0x04	; 4
    4702:	63 e0       	ldi	r22, 0x03	; 3
    4704:	41 e0       	ldi	r20, 0x01	; 1
    4706:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidWriteString("NOT AVAILABLE!");
    470a:	84 e4       	ldi	r24, 0x44	; 68
    470c:	91 e0       	ldi	r25, 0x01	; 1
    470e:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	af e2       	ldi	r26, 0x2F	; 47
    4718:	b4 e4       	ldi	r27, 0x44	; 68
    471a:	8d ab       	std	Y+53, r24	; 0x35
    471c:	9e ab       	std	Y+54, r25	; 0x36
    471e:	af ab       	std	Y+55, r26	; 0x37
    4720:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4722:	6d a9       	ldd	r22, Y+53	; 0x35
    4724:	7e a9       	ldd	r23, Y+54	; 0x36
    4726:	8f a9       	ldd	r24, Y+55	; 0x37
    4728:	98 ad       	ldd	r25, Y+56	; 0x38
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	4a ef       	ldi	r20, 0xFA	; 250
    4730:	54 e4       	ldi	r21, 0x44	; 68
    4732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	89 ab       	std	Y+49, r24	; 0x31
    473c:	9a ab       	std	Y+50, r25	; 0x32
    473e:	ab ab       	std	Y+51, r26	; 0x33
    4740:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4742:	69 a9       	ldd	r22, Y+49	; 0x31
    4744:	7a a9       	ldd	r23, Y+50	; 0x32
    4746:	8b a9       	ldd	r24, Y+51	; 0x33
    4748:	9c a9       	ldd	r25, Y+52	; 0x34
    474a:	20 e0       	ldi	r18, 0x00	; 0
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	40 e8       	ldi	r20, 0x80	; 128
    4750:	5f e3       	ldi	r21, 0x3F	; 63
    4752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4756:	88 23       	and	r24, r24
    4758:	2c f4       	brge	.+10     	; 0x4764 <main+0x1280>
		__ticks = 1;
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	98 ab       	std	Y+48, r25	; 0x30
    4760:	8f a7       	std	Y+47, r24	; 0x2f
    4762:	3f c0       	rjmp	.+126    	; 0x47e2 <main+0x12fe>
	else if (__tmp > 65535)
    4764:	69 a9       	ldd	r22, Y+49	; 0x31
    4766:	7a a9       	ldd	r23, Y+50	; 0x32
    4768:	8b a9       	ldd	r24, Y+51	; 0x33
    476a:	9c a9       	ldd	r25, Y+52	; 0x34
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	3f ef       	ldi	r19, 0xFF	; 255
    4770:	4f e7       	ldi	r20, 0x7F	; 127
    4772:	57 e4       	ldi	r21, 0x47	; 71
    4774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4778:	18 16       	cp	r1, r24
    477a:	4c f5       	brge	.+82     	; 0x47ce <main+0x12ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    477c:	6d a9       	ldd	r22, Y+53	; 0x35
    477e:	7e a9       	ldd	r23, Y+54	; 0x36
    4780:	8f a9       	ldd	r24, Y+55	; 0x37
    4782:	98 ad       	ldd	r25, Y+56	; 0x38
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e2       	ldi	r20, 0x20	; 32
    478a:	51 e4       	ldi	r21, 0x41	; 65
    478c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	bc 01       	movw	r22, r24
    4796:	cd 01       	movw	r24, r26
    4798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479c:	dc 01       	movw	r26, r24
    479e:	cb 01       	movw	r24, r22
    47a0:	98 ab       	std	Y+48, r25	; 0x30
    47a2:	8f a7       	std	Y+47, r24	; 0x2f
    47a4:	0f c0       	rjmp	.+30     	; 0x47c4 <main+0x12e0>
    47a6:	88 ec       	ldi	r24, 0xC8	; 200
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	9e a7       	std	Y+46, r25	; 0x2e
    47ac:	8d a7       	std	Y+45, r24	; 0x2d
    47ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    47b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    47b2:	01 97       	sbiw	r24, 0x01	; 1
    47b4:	f1 f7       	brne	.-4      	; 0x47b2 <main+0x12ce>
    47b6:	9e a7       	std	Y+46, r25	; 0x2e
    47b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    47bc:	98 a9       	ldd	r25, Y+48	; 0x30
    47be:	01 97       	sbiw	r24, 0x01	; 1
    47c0:	98 ab       	std	Y+48, r25	; 0x30
    47c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    47c6:	98 a9       	ldd	r25, Y+48	; 0x30
    47c8:	00 97       	sbiw	r24, 0x00	; 0
    47ca:	69 f7       	brne	.-38     	; 0x47a6 <main+0x12c2>
    47cc:	14 c0       	rjmp	.+40     	; 0x47f6 <main+0x1312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ce:	69 a9       	ldd	r22, Y+49	; 0x31
    47d0:	7a a9       	ldd	r23, Y+50	; 0x32
    47d2:	8b a9       	ldd	r24, Y+51	; 0x33
    47d4:	9c a9       	ldd	r25, Y+52	; 0x34
    47d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	98 ab       	std	Y+48, r25	; 0x30
    47e0:	8f a7       	std	Y+47, r24	; 0x2f
    47e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    47e4:	98 a9       	ldd	r25, Y+48	; 0x30
    47e6:	9c a7       	std	Y+44, r25	; 0x2c
    47e8:	8b a7       	std	Y+43, r24	; 0x2b
    47ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    47ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <main+0x130a>
    47f2:	9c a7       	std	Y+44, r25	; 0x2c
    47f4:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(700);
						DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D3,DIO_LOW);
    47f6:	84 e0       	ldi	r24, 0x04	; 4
    47f8:	63 e0       	ldi	r22, 0x03	; 3
    47fa:	40 e0       	ldi	r20, 0x00	; 0
    47fc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidSendCommand(lcd_Clear);
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    4806:	a2 c1       	rjmp	.+836    	; 0x4b4c <main+0x1668>

					}
					else
					{
						//UPDATE THE NUMBER IN SAVE IT IN EEPROM
						spiro--;
    4808:	80 91 c0 01 	lds	r24, 0x01C0
    480c:	81 50       	subi	r24, 0x01	; 1
    480e:	80 93 c0 01 	sts	0x01C0, r24
						EEPROM_vWrite(EEPROM_SPIRO_ADDRESS,spiro);
    4812:	90 91 c0 01 	lds	r25, 0x01C0
    4816:	8d ef       	ldi	r24, 0xFD	; 253
    4818:	69 2f       	mov	r22, r25
    481a:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>

						LCD_vidSendCommand(lcd_Clear);
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
						Gotoxy(0,1);
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	61 e0       	ldi	r22, 0x01	; 1
    4828:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("ENJOY Refreshing!");
    482c:	83 e5       	ldi	r24, 0x53	; 83
    482e:	91 e0       	ldi	r25, 0x01	; 1
    4830:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

						//INTERRUPT TO Servo WORK AS THE CAN IS OUT
						DIO_voidTogglePin(PORT_D,DIO_PIN_NUM_D2);
    4834:	84 e0       	ldi	r24, 0x04	; 4
    4836:	62 e0       	ldi	r22, 0x02	; 2
    4838:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DIO_voidTogglePin>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e8       	ldi	r25, 0x80	; 128
    4840:	a9 e0       	ldi	r26, 0x09	; 9
    4842:	b4 e4       	ldi	r27, 0x44	; 68
    4844:	8f a3       	std	Y+39, r24	; 0x27
    4846:	98 a7       	std	Y+40, r25	; 0x28
    4848:	a9 a7       	std	Y+41, r26	; 0x29
    484a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484c:	6f a1       	ldd	r22, Y+39	; 0x27
    484e:	78 a5       	ldd	r23, Y+40	; 0x28
    4850:	89 a5       	ldd	r24, Y+41	; 0x29
    4852:	9a a5       	ldd	r25, Y+42	; 0x2a
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	4a ef       	ldi	r20, 0xFA	; 250
    485a:	54 e4       	ldi	r21, 0x44	; 68
    485c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	8b a3       	std	Y+35, r24	; 0x23
    4866:	9c a3       	std	Y+36, r25	; 0x24
    4868:	ad a3       	std	Y+37, r26	; 0x25
    486a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    486c:	6b a1       	ldd	r22, Y+35	; 0x23
    486e:	7c a1       	ldd	r23, Y+36	; 0x24
    4870:	8d a1       	ldd	r24, Y+37	; 0x25
    4872:	9e a1       	ldd	r25, Y+38	; 0x26
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	40 e8       	ldi	r20, 0x80	; 128
    487a:	5f e3       	ldi	r21, 0x3F	; 63
    487c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4880:	88 23       	and	r24, r24
    4882:	2c f4       	brge	.+10     	; 0x488e <main+0x13aa>
		__ticks = 1;
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	9a a3       	std	Y+34, r25	; 0x22
    488a:	89 a3       	std	Y+33, r24	; 0x21
    488c:	3f c0       	rjmp	.+126    	; 0x490c <main+0x1428>
	else if (__tmp > 65535)
    488e:	6b a1       	ldd	r22, Y+35	; 0x23
    4890:	7c a1       	ldd	r23, Y+36	; 0x24
    4892:	8d a1       	ldd	r24, Y+37	; 0x25
    4894:	9e a1       	ldd	r25, Y+38	; 0x26
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	3f ef       	ldi	r19, 0xFF	; 255
    489a:	4f e7       	ldi	r20, 0x7F	; 127
    489c:	57 e4       	ldi	r21, 0x47	; 71
    489e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48a2:	18 16       	cp	r1, r24
    48a4:	4c f5       	brge	.+82     	; 0x48f8 <main+0x1414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a6:	6f a1       	ldd	r22, Y+39	; 0x27
    48a8:	78 a5       	ldd	r23, Y+40	; 0x28
    48aa:	89 a5       	ldd	r24, Y+41	; 0x29
    48ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	40 e2       	ldi	r20, 0x20	; 32
    48b4:	51 e4       	ldi	r21, 0x41	; 65
    48b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ba:	dc 01       	movw	r26, r24
    48bc:	cb 01       	movw	r24, r22
    48be:	bc 01       	movw	r22, r24
    48c0:	cd 01       	movw	r24, r26
    48c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	9a a3       	std	Y+34, r25	; 0x22
    48cc:	89 a3       	std	Y+33, r24	; 0x21
    48ce:	0f c0       	rjmp	.+30     	; 0x48ee <main+0x140a>
    48d0:	88 ec       	ldi	r24, 0xC8	; 200
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	98 a3       	std	Y+32, r25	; 0x20
    48d6:	8f 8f       	std	Y+31, r24	; 0x1f
    48d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48da:	98 a1       	ldd	r25, Y+32	; 0x20
    48dc:	01 97       	sbiw	r24, 0x01	; 1
    48de:	f1 f7       	brne	.-4      	; 0x48dc <main+0x13f8>
    48e0:	98 a3       	std	Y+32, r25	; 0x20
    48e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48e4:	89 a1       	ldd	r24, Y+33	; 0x21
    48e6:	9a a1       	ldd	r25, Y+34	; 0x22
    48e8:	01 97       	sbiw	r24, 0x01	; 1
    48ea:	9a a3       	std	Y+34, r25	; 0x22
    48ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ee:	89 a1       	ldd	r24, Y+33	; 0x21
    48f0:	9a a1       	ldd	r25, Y+34	; 0x22
    48f2:	00 97       	sbiw	r24, 0x00	; 0
    48f4:	69 f7       	brne	.-38     	; 0x48d0 <main+0x13ec>
    48f6:	2a c1       	rjmp	.+596    	; 0x4b4c <main+0x1668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f8:	6b a1       	ldd	r22, Y+35	; 0x23
    48fa:	7c a1       	ldd	r23, Y+36	; 0x24
    48fc:	8d a1       	ldd	r24, Y+37	; 0x25
    48fe:	9e a1       	ldd	r25, Y+38	; 0x26
    4900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	9a a3       	std	Y+34, r25	; 0x22
    490a:	89 a3       	std	Y+33, r24	; 0x21
    490c:	89 a1       	ldd	r24, Y+33	; 0x21
    490e:	9a a1       	ldd	r25, Y+34	; 0x22
    4910:	9e 8f       	std	Y+30, r25	; 0x1e
    4912:	8d 8f       	std	Y+29, r24	; 0x1d
    4914:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4916:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	f1 f7       	brne	.-4      	; 0x4918 <main+0x1434>
    491c:	9e 8f       	std	Y+30, r25	; 0x1e
    491e:	8d 8f       	std	Y+29, r24	; 0x1d
    4920:	15 c1       	rjmp	.+554    	; 0x4b4c <main+0x1668>

					}
				}
				else{

					if (Bigcola==0)
    4922:	80 91 c1 01 	lds	r24, 0x01C1
    4926:	88 23       	and	r24, r24
    4928:	09 f0       	breq	.+2      	; 0x492c <main+0x1448>
    492a:	84 c0       	rjmp	.+264    	; 0x4a34 <main+0x1550>
					{
						//BUZZER ON AND PRINT THERE IS NO CANS
						DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D3,DIO_HIGH);
    492c:	84 e0       	ldi	r24, 0x04	; 4
    492e:	63 e0       	ldi	r22, 0x03	; 3
    4930:	41 e0       	ldi	r20, 0x01	; 1
    4932:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidWriteString("NOT AVAILABLE!");
    4936:	84 e4       	ldi	r24, 0x44	; 68
    4938:	91 e0       	ldi	r25, 0x01	; 1
    493a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	af e2       	ldi	r26, 0x2F	; 47
    4944:	b4 e4       	ldi	r27, 0x44	; 68
    4946:	89 8f       	std	Y+25, r24	; 0x19
    4948:	9a 8f       	std	Y+26, r25	; 0x1a
    494a:	ab 8f       	std	Y+27, r26	; 0x1b
    494c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    494e:	69 8d       	ldd	r22, Y+25	; 0x19
    4950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	4a ef       	ldi	r20, 0xFA	; 250
    495c:	54 e4       	ldi	r21, 0x44	; 68
    495e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	8d 8b       	std	Y+21, r24	; 0x15
    4968:	9e 8b       	std	Y+22, r25	; 0x16
    496a:	af 8b       	std	Y+23, r26	; 0x17
    496c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    496e:	6d 89       	ldd	r22, Y+21	; 0x15
    4970:	7e 89       	ldd	r23, Y+22	; 0x16
    4972:	8f 89       	ldd	r24, Y+23	; 0x17
    4974:	98 8d       	ldd	r25, Y+24	; 0x18
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e8       	ldi	r20, 0x80	; 128
    497c:	5f e3       	ldi	r21, 0x3F	; 63
    497e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4982:	88 23       	and	r24, r24
    4984:	2c f4       	brge	.+10     	; 0x4990 <main+0x14ac>
		__ticks = 1;
    4986:	81 e0       	ldi	r24, 0x01	; 1
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	9c 8b       	std	Y+20, r25	; 0x14
    498c:	8b 8b       	std	Y+19, r24	; 0x13
    498e:	3f c0       	rjmp	.+126    	; 0x4a0e <main+0x152a>
	else if (__tmp > 65535)
    4990:	6d 89       	ldd	r22, Y+21	; 0x15
    4992:	7e 89       	ldd	r23, Y+22	; 0x16
    4994:	8f 89       	ldd	r24, Y+23	; 0x17
    4996:	98 8d       	ldd	r25, Y+24	; 0x18
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	3f ef       	ldi	r19, 0xFF	; 255
    499c:	4f e7       	ldi	r20, 0x7F	; 127
    499e:	57 e4       	ldi	r21, 0x47	; 71
    49a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49a4:	18 16       	cp	r1, r24
    49a6:	4c f5       	brge	.+82     	; 0x49fa <main+0x1516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a8:	69 8d       	ldd	r22, Y+25	; 0x19
    49aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	40 e2       	ldi	r20, 0x20	; 32
    49b6:	51 e4       	ldi	r21, 0x41	; 65
    49b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	bc 01       	movw	r22, r24
    49c2:	cd 01       	movw	r24, r26
    49c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	9c 8b       	std	Y+20, r25	; 0x14
    49ce:	8b 8b       	std	Y+19, r24	; 0x13
    49d0:	0f c0       	rjmp	.+30     	; 0x49f0 <main+0x150c>
    49d2:	88 ec       	ldi	r24, 0xC8	; 200
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	9a 8b       	std	Y+18, r25	; 0x12
    49d8:	89 8b       	std	Y+17, r24	; 0x11
    49da:	89 89       	ldd	r24, Y+17	; 0x11
    49dc:	9a 89       	ldd	r25, Y+18	; 0x12
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	f1 f7       	brne	.-4      	; 0x49de <main+0x14fa>
    49e2:	9a 8b       	std	Y+18, r25	; 0x12
    49e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e6:	8b 89       	ldd	r24, Y+19	; 0x13
    49e8:	9c 89       	ldd	r25, Y+20	; 0x14
    49ea:	01 97       	sbiw	r24, 0x01	; 1
    49ec:	9c 8b       	std	Y+20, r25	; 0x14
    49ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f0:	8b 89       	ldd	r24, Y+19	; 0x13
    49f2:	9c 89       	ldd	r25, Y+20	; 0x14
    49f4:	00 97       	sbiw	r24, 0x00	; 0
    49f6:	69 f7       	brne	.-38     	; 0x49d2 <main+0x14ee>
    49f8:	14 c0       	rjmp	.+40     	; 0x4a22 <main+0x153e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49fa:	6d 89       	ldd	r22, Y+21	; 0x15
    49fc:	7e 89       	ldd	r23, Y+22	; 0x16
    49fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4a00:	98 8d       	ldd	r25, Y+24	; 0x18
    4a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	9c 8b       	std	Y+20, r25	; 0x14
    4a0c:	8b 8b       	std	Y+19, r24	; 0x13
    4a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a10:	9c 89       	ldd	r25, Y+20	; 0x14
    4a12:	98 8b       	std	Y+16, r25	; 0x10
    4a14:	8f 87       	std	Y+15, r24	; 0x0f
    4a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a18:	98 89       	ldd	r25, Y+16	; 0x10
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	f1 f7       	brne	.-4      	; 0x4a1a <main+0x1536>
    4a1e:	98 8b       	std	Y+16, r25	; 0x10
    4a20:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(700);

						DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D3,DIO_LOW);
    4a22:	84 e0       	ldi	r24, 0x04	; 4
    4a24:	63 e0       	ldi	r22, 0x03	; 3
    4a26:	40 e0       	ldi	r20, 0x00	; 0
    4a28:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
						LCD_vidSendCommand(lcd_Clear);
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
    4a32:	8c c0       	rjmp	.+280    	; 0x4b4c <main+0x1668>

					}
					else
					{
						//UPDATE THE NUMBER IN SAVE IT IN EEPROM
						Bigcola--;
    4a34:	80 91 c1 01 	lds	r24, 0x01C1
    4a38:	81 50       	subi	r24, 0x01	; 1
    4a3a:	80 93 c1 01 	sts	0x01C1, r24
						EEPROM_vWrite(EEPROM_COLA_ADDRESS,Bigcola);
    4a3e:	90 91 c1 01 	lds	r25, 0x01C1
    4a42:	81 ef       	ldi	r24, 0xF1	; 241
    4a44:	69 2f       	mov	r22, r25
    4a46:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
						LCD_vidSendCommand(lcd_Clear);
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
						Gotoxy(0,1);
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	61 e0       	ldi	r22, 0x01	; 1
    4a54:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
						LCD_vidWriteString("ENJOY Refreshing!");
    4a58:	83 e5       	ldi	r24, 0x53	; 83
    4a5a:	91 e0       	ldi	r25, 0x01	; 1
    4a5c:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>

						//INTERRUPT TO Servo WORK AS THE CAN IS OUT
						DIO_voidTogglePin(PORT_D,DIO_PIN_NUM_D2);
    4a60:	84 e0       	ldi	r24, 0x04	; 4
    4a62:	62 e0       	ldi	r22, 0x02	; 2
    4a64:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DIO_voidTogglePin>
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e8       	ldi	r25, 0x80	; 128
    4a6c:	a9 e0       	ldi	r26, 0x09	; 9
    4a6e:	b4 e4       	ldi	r27, 0x44	; 68
    4a70:	8b 87       	std	Y+11, r24	; 0x0b
    4a72:	9c 87       	std	Y+12, r25	; 0x0c
    4a74:	ad 87       	std	Y+13, r26	; 0x0d
    4a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	4a ef       	ldi	r20, 0xFA	; 250
    4a86:	54 e4       	ldi	r21, 0x44	; 68
    4a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a8c:	dc 01       	movw	r26, r24
    4a8e:	cb 01       	movw	r24, r22
    4a90:	8f 83       	std	Y+7, r24	; 0x07
    4a92:	98 87       	std	Y+8, r25	; 0x08
    4a94:	a9 87       	std	Y+9, r26	; 0x09
    4a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a98:	6f 81       	ldd	r22, Y+7	; 0x07
    4a9a:	78 85       	ldd	r23, Y+8	; 0x08
    4a9c:	89 85       	ldd	r24, Y+9	; 0x09
    4a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	40 e8       	ldi	r20, 0x80	; 128
    4aa6:	5f e3       	ldi	r21, 0x3F	; 63
    4aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4aac:	88 23       	and	r24, r24
    4aae:	2c f4       	brge	.+10     	; 0x4aba <main+0x15d6>
		__ticks = 1;
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	9e 83       	std	Y+6, r25	; 0x06
    4ab6:	8d 83       	std	Y+5, r24	; 0x05
    4ab8:	3f c0       	rjmp	.+126    	; 0x4b38 <main+0x1654>
	else if (__tmp > 65535)
    4aba:	6f 81       	ldd	r22, Y+7	; 0x07
    4abc:	78 85       	ldd	r23, Y+8	; 0x08
    4abe:	89 85       	ldd	r24, Y+9	; 0x09
    4ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ac2:	20 e0       	ldi	r18, 0x00	; 0
    4ac4:	3f ef       	ldi	r19, 0xFF	; 255
    4ac6:	4f e7       	ldi	r20, 0x7F	; 127
    4ac8:	57 e4       	ldi	r21, 0x47	; 71
    4aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ace:	18 16       	cp	r1, r24
    4ad0:	4c f5       	brge	.+82     	; 0x4b24 <main+0x1640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	40 e2       	ldi	r20, 0x20	; 32
    4ae0:	51 e4       	ldi	r21, 0x41	; 65
    4ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	bc 01       	movw	r22, r24
    4aec:	cd 01       	movw	r24, r26
    4aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	9e 83       	std	Y+6, r25	; 0x06
    4af8:	8d 83       	std	Y+5, r24	; 0x05
    4afa:	0f c0       	rjmp	.+30     	; 0x4b1a <main+0x1636>
    4afc:	88 ec       	ldi	r24, 0xC8	; 200
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	9c 83       	std	Y+4, r25	; 0x04
    4b02:	8b 83       	std	Y+3, r24	; 0x03
    4b04:	8b 81       	ldd	r24, Y+3	; 0x03
    4b06:	9c 81       	ldd	r25, Y+4	; 0x04
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	f1 f7       	brne	.-4      	; 0x4b08 <main+0x1624>
    4b0c:	9c 83       	std	Y+4, r25	; 0x04
    4b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b10:	8d 81       	ldd	r24, Y+5	; 0x05
    4b12:	9e 81       	ldd	r25, Y+6	; 0x06
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	9e 83       	std	Y+6, r25	; 0x06
    4b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	69 f7       	brne	.-38     	; 0x4afc <main+0x1618>
    4b22:	14 c0       	rjmp	.+40     	; 0x4b4c <main+0x1668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b24:	6f 81       	ldd	r22, Y+7	; 0x07
    4b26:	78 85       	ldd	r23, Y+8	; 0x08
    4b28:	89 85       	ldd	r24, Y+9	; 0x09
    4b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	9e 83       	std	Y+6, r25	; 0x06
    4b36:	8d 83       	std	Y+5, r24	; 0x05
    4b38:	8d 81       	ldd	r24, Y+5	; 0x05
    4b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b3c:	9a 83       	std	Y+2, r25	; 0x02
    4b3e:	89 83       	std	Y+1, r24	; 0x01
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	9a 81       	ldd	r25, Y+2	; 0x02
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	f1 f7       	brne	.-4      	; 0x4b44 <main+0x1660>
    4b48:	9a 83       	std	Y+2, r25	; 0x02
    4b4a:	89 83       	std	Y+1, r24	; 0x01
			//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<Case2>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


		case '2': //right

			while(key_pressed!='3'){
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e8 53       	subi	r30, 0x38	; 56
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	80 81       	ld	r24, Z
    4b54:	83 33       	cpi	r24, 0x33	; 51
    4b56:	09 f0       	breq	.+2      	; 0x4b5a <main+0x1676>
    4b58:	1a cd       	rjmp	.-1484   	; 0x458e <main+0x10aa>
    4b5a:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <main+0x26e>

00004b5e <SET_PASS>:
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void SET_PASS(void){
    4b5e:	df 93       	push	r29
    4b60:	cf 93       	push	r28
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	ad 97       	sbiw	r28, 0x2d	; 45
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	f8 94       	cli
    4b6c:	de bf       	out	0x3e, r29	; 62
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	cd bf       	out	0x3d, r28	; 61
	//SET Password from 3 digit
	u8 pass_counter=0;
    4b72:	1d a6       	std	Y+45, r1	; 0x2d
	u8 pass=0;
    4b74:	1c a6       	std	Y+44, r1	; 0x2c
	u8 key_pressed = 0;
    4b76:	1b a6       	std	Y+43, r1	; 0x2b
    4b78:	0c c1       	rjmp	.+536    	; 0x4d92 <SET_PASS+0x234>

	while (pass_counter<PASS_SIZE)
	{
		key_pressed = NOT_PRESSED;
    4b7a:	8f ef       	ldi	r24, 0xFF	; 255
    4b7c:	8b a7       	std	Y+43, r24	; 0x2b
    4b7e:	03 c0       	rjmp	.+6      	; 0x4b86 <SET_PASS+0x28>
		while (key_pressed == NOT_PRESSED)
		{
			key_pressed = KPD_GetKey();
    4b80:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <KPD_GetKey>
    4b84:	8b a7       	std	Y+43, r24	; 0x2b
	u8 key_pressed = 0;

	while (pass_counter<PASS_SIZE)
	{
		key_pressed = NOT_PRESSED;
		while (key_pressed == NOT_PRESSED)
    4b86:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b88:	8f 3f       	cpi	r24, 0xFF	; 255
    4b8a:	d1 f3       	breq	.-12     	; 0x4b80 <SET_PASS+0x22>
		{
			key_pressed = KPD_GetKey();

		}
		pass = pass * 10 + (key_pressed - '0');
    4b8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4b8e:	88 2f       	mov	r24, r24
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	9c 01       	movw	r18, r24
    4b94:	22 0f       	add	r18, r18
    4b96:	33 1f       	adc	r19, r19
    4b98:	c9 01       	movw	r24, r18
    4b9a:	88 0f       	add	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	88 0f       	add	r24, r24
    4ba0:	99 1f       	adc	r25, r25
    4ba2:	82 0f       	add	r24, r18
    4ba4:	93 1f       	adc	r25, r19
    4ba6:	98 2f       	mov	r25, r24
    4ba8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4baa:	89 0f       	add	r24, r25
    4bac:	80 53       	subi	r24, 0x30	; 48
    4bae:	8c a7       	std	Y+44, r24	; 0x2c

		LCD_vidWriteCharctr(key_pressed);
    4bb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bb2:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	a8 e4       	ldi	r26, 0x48	; 72
    4bbc:	b3 e4       	ldi	r27, 0x43	; 67
    4bbe:	8f a3       	std	Y+39, r24	; 0x27
    4bc0:	98 a7       	std	Y+40, r25	; 0x28
    4bc2:	a9 a7       	std	Y+41, r26	; 0x29
    4bc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    4bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    4bca:	89 a5       	ldd	r24, Y+41	; 0x29
    4bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bce:	20 e0       	ldi	r18, 0x00	; 0
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	4a ef       	ldi	r20, 0xFA	; 250
    4bd4:	54 e4       	ldi	r21, 0x44	; 68
    4bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bda:	dc 01       	movw	r26, r24
    4bdc:	cb 01       	movw	r24, r22
    4bde:	8b a3       	std	Y+35, r24	; 0x23
    4be0:	9c a3       	std	Y+36, r25	; 0x24
    4be2:	ad a3       	std	Y+37, r26	; 0x25
    4be4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4be6:	6b a1       	ldd	r22, Y+35	; 0x23
    4be8:	7c a1       	ldd	r23, Y+36	; 0x24
    4bea:	8d a1       	ldd	r24, Y+37	; 0x25
    4bec:	9e a1       	ldd	r25, Y+38	; 0x26
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	40 e8       	ldi	r20, 0x80	; 128
    4bf4:	5f e3       	ldi	r21, 0x3F	; 63
    4bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bfa:	88 23       	and	r24, r24
    4bfc:	2c f4       	brge	.+10     	; 0x4c08 <SET_PASS+0xaa>
		__ticks = 1;
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	9a a3       	std	Y+34, r25	; 0x22
    4c04:	89 a3       	std	Y+33, r24	; 0x21
    4c06:	3f c0       	rjmp	.+126    	; 0x4c86 <SET_PASS+0x128>
	else if (__tmp > 65535)
    4c08:	6b a1       	ldd	r22, Y+35	; 0x23
    4c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    4c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    4c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	3f ef       	ldi	r19, 0xFF	; 255
    4c14:	4f e7       	ldi	r20, 0x7F	; 127
    4c16:	57 e4       	ldi	r21, 0x47	; 71
    4c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c1c:	18 16       	cp	r1, r24
    4c1e:	4c f5       	brge	.+82     	; 0x4c72 <SET_PASS+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c20:	6f a1       	ldd	r22, Y+39	; 0x27
    4c22:	78 a5       	ldd	r23, Y+40	; 0x28
    4c24:	89 a5       	ldd	r24, Y+41	; 0x29
    4c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c28:	20 e0       	ldi	r18, 0x00	; 0
    4c2a:	30 e0       	ldi	r19, 0x00	; 0
    4c2c:	40 e2       	ldi	r20, 0x20	; 32
    4c2e:	51 e4       	ldi	r21, 0x41	; 65
    4c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c34:	dc 01       	movw	r26, r24
    4c36:	cb 01       	movw	r24, r22
    4c38:	bc 01       	movw	r22, r24
    4c3a:	cd 01       	movw	r24, r26
    4c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	9a a3       	std	Y+34, r25	; 0x22
    4c46:	89 a3       	std	Y+33, r24	; 0x21
    4c48:	0f c0       	rjmp	.+30     	; 0x4c68 <SET_PASS+0x10a>
    4c4a:	88 ec       	ldi	r24, 0xC8	; 200
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	98 a3       	std	Y+32, r25	; 0x20
    4c50:	8f 8f       	std	Y+31, r24	; 0x1f
    4c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c54:	98 a1       	ldd	r25, Y+32	; 0x20
    4c56:	01 97       	sbiw	r24, 0x01	; 1
    4c58:	f1 f7       	brne	.-4      	; 0x4c56 <SET_PASS+0xf8>
    4c5a:	98 a3       	std	Y+32, r25	; 0x20
    4c5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    4c60:	9a a1       	ldd	r25, Y+34	; 0x22
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	9a a3       	std	Y+34, r25	; 0x22
    4c66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c68:	89 a1       	ldd	r24, Y+33	; 0x21
    4c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    4c6c:	00 97       	sbiw	r24, 0x00	; 0
    4c6e:	69 f7       	brne	.-38     	; 0x4c4a <SET_PASS+0xec>
    4c70:	14 c0       	rjmp	.+40     	; 0x4c9a <SET_PASS+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c72:	6b a1       	ldd	r22, Y+35	; 0x23
    4c74:	7c a1       	ldd	r23, Y+36	; 0x24
    4c76:	8d a1       	ldd	r24, Y+37	; 0x25
    4c78:	9e a1       	ldd	r25, Y+38	; 0x26
    4c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7e:	dc 01       	movw	r26, r24
    4c80:	cb 01       	movw	r24, r22
    4c82:	9a a3       	std	Y+34, r25	; 0x22
    4c84:	89 a3       	std	Y+33, r24	; 0x21
    4c86:	89 a1       	ldd	r24, Y+33	; 0x21
    4c88:	9a a1       	ldd	r25, Y+34	; 0x22
    4c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    4c8c:	8d 8f       	std	Y+29, r24	; 0x1d
    4c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c92:	01 97       	sbiw	r24, 0x01	; 1
    4c94:	f1 f7       	brne	.-4      	; 0x4c92 <SET_PASS+0x134>
    4c96:	9e 8f       	std	Y+30, r25	; 0x1e
    4c98:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(CHARACTER_PREVIEW_TIME);
		Gotoxy(0+pass_counter,2);
    4c9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c9c:	62 e0       	ldi	r22, 0x02	; 2
    4c9e:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteCharctr(PASSWORD_SYMBOL);
    4ca2:	8a e2       	ldi	r24, 0x2A	; 42
    4ca4:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	a8 ec       	ldi	r26, 0xC8	; 200
    4cae:	b2 e4       	ldi	r27, 0x42	; 66
    4cb0:	89 8f       	std	Y+25, r24	; 0x19
    4cb2:	9a 8f       	std	Y+26, r25	; 0x1a
    4cb4:	ab 8f       	std	Y+27, r26	; 0x1b
    4cb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    4cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	4a ef       	ldi	r20, 0xFA	; 250
    4cc6:	54 e4       	ldi	r21, 0x44	; 68
    4cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ccc:	dc 01       	movw	r26, r24
    4cce:	cb 01       	movw	r24, r22
    4cd0:	8d 8b       	std	Y+21, r24	; 0x15
    4cd2:	9e 8b       	std	Y+22, r25	; 0x16
    4cd4:	af 8b       	std	Y+23, r26	; 0x17
    4cd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    4cda:	7e 89       	ldd	r23, Y+22	; 0x16
    4cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    4cde:	98 8d       	ldd	r25, Y+24	; 0x18
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e8       	ldi	r20, 0x80	; 128
    4ce6:	5f e3       	ldi	r21, 0x3F	; 63
    4ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cec:	88 23       	and	r24, r24
    4cee:	2c f4       	brge	.+10     	; 0x4cfa <SET_PASS+0x19c>
		__ticks = 1;
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	9c 8b       	std	Y+20, r25	; 0x14
    4cf6:	8b 8b       	std	Y+19, r24	; 0x13
    4cf8:	3f c0       	rjmp	.+126    	; 0x4d78 <SET_PASS+0x21a>
	else if (__tmp > 65535)
    4cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    4cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    4cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    4d00:	98 8d       	ldd	r25, Y+24	; 0x18
    4d02:	20 e0       	ldi	r18, 0x00	; 0
    4d04:	3f ef       	ldi	r19, 0xFF	; 255
    4d06:	4f e7       	ldi	r20, 0x7F	; 127
    4d08:	57 e4       	ldi	r21, 0x47	; 71
    4d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d0e:	18 16       	cp	r1, r24
    4d10:	4c f5       	brge	.+82     	; 0x4d64 <SET_PASS+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d12:	69 8d       	ldd	r22, Y+25	; 0x19
    4d14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d1a:	20 e0       	ldi	r18, 0x00	; 0
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	40 e2       	ldi	r20, 0x20	; 32
    4d20:	51 e4       	ldi	r21, 0x41	; 65
    4d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d26:	dc 01       	movw	r26, r24
    4d28:	cb 01       	movw	r24, r22
    4d2a:	bc 01       	movw	r22, r24
    4d2c:	cd 01       	movw	r24, r26
    4d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	9c 8b       	std	Y+20, r25	; 0x14
    4d38:	8b 8b       	std	Y+19, r24	; 0x13
    4d3a:	0f c0       	rjmp	.+30     	; 0x4d5a <SET_PASS+0x1fc>
    4d3c:	88 ec       	ldi	r24, 0xC8	; 200
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	9a 8b       	std	Y+18, r25	; 0x12
    4d42:	89 8b       	std	Y+17, r24	; 0x11
    4d44:	89 89       	ldd	r24, Y+17	; 0x11
    4d46:	9a 89       	ldd	r25, Y+18	; 0x12
    4d48:	01 97       	sbiw	r24, 0x01	; 1
    4d4a:	f1 f7       	brne	.-4      	; 0x4d48 <SET_PASS+0x1ea>
    4d4c:	9a 8b       	std	Y+18, r25	; 0x12
    4d4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d50:	8b 89       	ldd	r24, Y+19	; 0x13
    4d52:	9c 89       	ldd	r25, Y+20	; 0x14
    4d54:	01 97       	sbiw	r24, 0x01	; 1
    4d56:	9c 8b       	std	Y+20, r25	; 0x14
    4d58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d5e:	00 97       	sbiw	r24, 0x00	; 0
    4d60:	69 f7       	brne	.-38     	; 0x4d3c <SET_PASS+0x1de>
    4d62:	14 c0       	rjmp	.+40     	; 0x4d8c <SET_PASS+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d64:	6d 89       	ldd	r22, Y+21	; 0x15
    4d66:	7e 89       	ldd	r23, Y+22	; 0x16
    4d68:	8f 89       	ldd	r24, Y+23	; 0x17
    4d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d70:	dc 01       	movw	r26, r24
    4d72:	cb 01       	movw	r24, r22
    4d74:	9c 8b       	std	Y+20, r25	; 0x14
    4d76:	8b 8b       	std	Y+19, r24	; 0x13
    4d78:	8b 89       	ldd	r24, Y+19	; 0x13
    4d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d7c:	98 8b       	std	Y+16, r25	; 0x10
    4d7e:	8f 87       	std	Y+15, r24	; 0x0f
    4d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d82:	98 89       	ldd	r25, Y+16	; 0x10
    4d84:	01 97       	sbiw	r24, 0x01	; 1
    4d86:	f1 f7       	brne	.-4      	; 0x4d84 <SET_PASS+0x226>
    4d88:	98 8b       	std	Y+16, r25	; 0x10
    4d8a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		pass_counter++;
    4d8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d8e:	8f 5f       	subi	r24, 0xFF	; 255
    4d90:	8d a7       	std	Y+45, r24	; 0x2d
	//SET Password from 3 digit
	u8 pass_counter=0;
	u8 pass=0;
	u8 key_pressed = 0;

	while (pass_counter<PASS_SIZE)
    4d92:	8d a5       	ldd	r24, Y+45	; 0x2d
    4d94:	84 30       	cpi	r24, 0x04	; 4
    4d96:	08 f4       	brcc	.+2      	; 0x4d9a <SET_PASS+0x23c>
    4d98:	f0 ce       	rjmp	.-544    	; 0x4b7a <SET_PASS+0x1c>
		_delay_ms(100);
		pass_counter++;

	}

	LCD_vidSendCommand(lcd_Clear);
    4d9a:	81 e0       	ldi	r24, 0x01	; 1
    4d9c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>
	//SAVE PASSWORD & SAVE THE STATUS AS SET
	EEPROM_vWrite(EEPROM_PASS_ADDRESS,pass);
    4da0:	85 ee       	ldi	r24, 0xE5	; 229
    4da2:	6c a5       	ldd	r22, Y+44	; 0x2c
    4da4:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	EEPROM_vWrite(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);
    4da8:	80 e0       	ldi	r24, 0x00	; 0
    4daa:	61 e0       	ldi	r22, 0x01	; 1
    4dac:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
	LCD_vidWriteString("Password is Saved");
    4db0:	85 e6       	ldi	r24, 0x65	; 101
    4db2:	91 e0       	ldi	r25, 0x01	; 1
    4db4:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidWriteString>
    4db8:	80 e0       	ldi	r24, 0x00	; 0
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	aa e7       	ldi	r26, 0x7A	; 122
    4dbe:	b4 e4       	ldi	r27, 0x44	; 68
    4dc0:	8b 87       	std	Y+11, r24	; 0x0b
    4dc2:	9c 87       	std	Y+12, r25	; 0x0c
    4dc4:	ad 87       	std	Y+13, r26	; 0x0d
    4dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	4a ef       	ldi	r20, 0xFA	; 250
    4dd6:	54 e4       	ldi	r21, 0x44	; 68
    4dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ddc:	dc 01       	movw	r26, r24
    4dde:	cb 01       	movw	r24, r22
    4de0:	8f 83       	std	Y+7, r24	; 0x07
    4de2:	98 87       	std	Y+8, r25	; 0x08
    4de4:	a9 87       	std	Y+9, r26	; 0x09
    4de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4de8:	6f 81       	ldd	r22, Y+7	; 0x07
    4dea:	78 85       	ldd	r23, Y+8	; 0x08
    4dec:	89 85       	ldd	r24, Y+9	; 0x09
    4dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4df0:	20 e0       	ldi	r18, 0x00	; 0
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	40 e8       	ldi	r20, 0x80	; 128
    4df6:	5f e3       	ldi	r21, 0x3F	; 63
    4df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4dfc:	88 23       	and	r24, r24
    4dfe:	2c f4       	brge	.+10     	; 0x4e0a <SET_PASS+0x2ac>
		__ticks = 1;
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	9e 83       	std	Y+6, r25	; 0x06
    4e06:	8d 83       	std	Y+5, r24	; 0x05
    4e08:	3f c0       	rjmp	.+126    	; 0x4e88 <SET_PASS+0x32a>
	else if (__tmp > 65535)
    4e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e0c:	78 85       	ldd	r23, Y+8	; 0x08
    4e0e:	89 85       	ldd	r24, Y+9	; 0x09
    4e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	3f ef       	ldi	r19, 0xFF	; 255
    4e16:	4f e7       	ldi	r20, 0x7F	; 127
    4e18:	57 e4       	ldi	r21, 0x47	; 71
    4e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e1e:	18 16       	cp	r1, r24
    4e20:	4c f5       	brge	.+82     	; 0x4e74 <SET_PASS+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e2a:	20 e0       	ldi	r18, 0x00	; 0
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	40 e2       	ldi	r20, 0x20	; 32
    4e30:	51 e4       	ldi	r21, 0x41	; 65
    4e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e36:	dc 01       	movw	r26, r24
    4e38:	cb 01       	movw	r24, r22
    4e3a:	bc 01       	movw	r22, r24
    4e3c:	cd 01       	movw	r24, r26
    4e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	9e 83       	std	Y+6, r25	; 0x06
    4e48:	8d 83       	std	Y+5, r24	; 0x05
    4e4a:	0f c0       	rjmp	.+30     	; 0x4e6a <SET_PASS+0x30c>
    4e4c:	88 ec       	ldi	r24, 0xC8	; 200
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	9c 83       	std	Y+4, r25	; 0x04
    4e52:	8b 83       	std	Y+3, r24	; 0x03
    4e54:	8b 81       	ldd	r24, Y+3	; 0x03
    4e56:	9c 81       	ldd	r25, Y+4	; 0x04
    4e58:	01 97       	sbiw	r24, 0x01	; 1
    4e5a:	f1 f7       	brne	.-4      	; 0x4e58 <SET_PASS+0x2fa>
    4e5c:	9c 83       	std	Y+4, r25	; 0x04
    4e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e60:	8d 81       	ldd	r24, Y+5	; 0x05
    4e62:	9e 81       	ldd	r25, Y+6	; 0x06
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	9e 83       	std	Y+6, r25	; 0x06
    4e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e6e:	00 97       	sbiw	r24, 0x00	; 0
    4e70:	69 f7       	brne	.-38     	; 0x4e4c <SET_PASS+0x2ee>
    4e72:	14 c0       	rjmp	.+40     	; 0x4e9c <SET_PASS+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e74:	6f 81       	ldd	r22, Y+7	; 0x07
    4e76:	78 85       	ldd	r23, Y+8	; 0x08
    4e78:	89 85       	ldd	r24, Y+9	; 0x09
    4e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	9e 83       	std	Y+6, r25	; 0x06
    4e86:	8d 83       	std	Y+5, r24	; 0x05
    4e88:	8d 81       	ldd	r24, Y+5	; 0x05
    4e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8c:	9a 83       	std	Y+2, r25	; 0x02
    4e8e:	89 83       	std	Y+1, r24	; 0x01
    4e90:	89 81       	ldd	r24, Y+1	; 0x01
    4e92:	9a 81       	ldd	r25, Y+2	; 0x02
    4e94:	01 97       	sbiw	r24, 0x01	; 1
    4e96:	f1 f7       	brne	.-4      	; 0x4e94 <SET_PASS+0x336>
    4e98:	9a 83       	std	Y+2, r25	; 0x02
    4e9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vidSendCommand(lcd_Clear);
    4e9c:	81 e0       	ldi	r24, 0x01	; 1
    4e9e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

}
    4ea2:	ad 96       	adiw	r28, 0x2d	; 45
    4ea4:	0f b6       	in	r0, 0x3f	; 63
    4ea6:	f8 94       	cli
    4ea8:	de bf       	out	0x3e, r29	; 62
    4eaa:	0f be       	out	0x3f, r0	; 63
    4eac:	cd bf       	out	0x3d, r28	; 61
    4eae:	cf 91       	pop	r28
    4eb0:	df 91       	pop	r29
    4eb2:	08 95       	ret

00004eb4 <ENTER_PASS>:


void ENTER_PASS(void)
{
    4eb4:	df 93       	push	r29
    4eb6:	cf 93       	push	r28
    4eb8:	cd b7       	in	r28, 0x3d	; 61
    4eba:	de b7       	in	r29, 0x3e	; 62
    4ebc:	ae 97       	sbiw	r28, 0x2e	; 46
    4ebe:	0f b6       	in	r0, 0x3f	; 63
    4ec0:	f8 94       	cli
    4ec2:	de bf       	out	0x3e, r29	; 62
    4ec4:	0f be       	out	0x3f, r0	; 63
    4ec6:	cd bf       	out	0x3d, r28	; 61
	//	u8 key_pressed = 0;

	u8 pass_counter=0;
    4ec8:	1e a6       	std	Y+46, r1	; 0x2e
	u8 pass_entered=0;
    4eca:	1d a6       	std	Y+45, r1	; 0x2d
	u8 x;
	u8 flag=1;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	8b a7       	std	Y+43, r24	; 0x2b
    4ed0:	0f c1       	rjmp	.+542    	; 0x50f0 <ENTER_PASS+0x23c>
	{
		//		key_pressed = NOT_PRESSED;
		while (flag)
		{
			//			key_pressed = KPD_GetKey();
			x=UART_u8ReceiveData();
    4ed2:	0e 94 be 19 	call	0x337c	; 0x337c <UART_u8ReceiveData>
    4ed6:	8c a7       	std	Y+44, r24	; 0x2c
			if(x)
    4ed8:	8c a5       	ldd	r24, Y+44	; 0x2c
    4eda:	88 23       	and	r24, r24
    4edc:	09 f0       	breq	.+2      	; 0x4ee0 <ENTER_PASS+0x2c>
			{
				flag=0;
    4ede:	1b a6       	std	Y+43, r1	; 0x2b
	u8 x;
	u8 flag=1;
	while (pass_counter<PASS_SIZE)
	{
		//		key_pressed = NOT_PRESSED;
		while (flag)
    4ee0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ee2:	88 23       	and	r24, r24
    4ee4:	b1 f7       	brne	.-20     	; 0x4ed2 <ENTER_PASS+0x1e>
				flag=0;
			}
		}
		//equation to save the entered pass in a variable
		//we enter 1 , 1 , 1 then 2 >>>> so it makes it 1112
		pass_entered = pass_entered * 10 + (x - '0');
    4ee6:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ee8:	88 2f       	mov	r24, r24
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	9c 01       	movw	r18, r24
    4eee:	22 0f       	add	r18, r18
    4ef0:	33 1f       	adc	r19, r19
    4ef2:	c9 01       	movw	r24, r18
    4ef4:	88 0f       	add	r24, r24
    4ef6:	99 1f       	adc	r25, r25
    4ef8:	88 0f       	add	r24, r24
    4efa:	99 1f       	adc	r25, r25
    4efc:	82 0f       	add	r24, r18
    4efe:	93 1f       	adc	r25, r19
    4f00:	98 2f       	mov	r25, r24
    4f02:	8c a5       	ldd	r24, Y+44	; 0x2c
    4f04:	89 0f       	add	r24, r25
    4f06:	80 53       	subi	r24, 0x30	; 48
    4f08:	8d a7       	std	Y+45, r24	; 0x2d

		LCD_vidWriteCharctr(x);
    4f0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    4f0c:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
		flag=1;
    4f10:	81 e0       	ldi	r24, 0x01	; 1
    4f12:	8b a7       	std	Y+43, r24	; 0x2b
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	a8 e4       	ldi	r26, 0x48	; 72
    4f1a:	b3 e4       	ldi	r27, 0x43	; 67
    4f1c:	8f a3       	std	Y+39, r24	; 0x27
    4f1e:	98 a7       	std	Y+40, r25	; 0x28
    4f20:	a9 a7       	std	Y+41, r26	; 0x29
    4f22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f24:	6f a1       	ldd	r22, Y+39	; 0x27
    4f26:	78 a5       	ldd	r23, Y+40	; 0x28
    4f28:	89 a5       	ldd	r24, Y+41	; 0x29
    4f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	4a ef       	ldi	r20, 0xFA	; 250
    4f32:	54 e4       	ldi	r21, 0x44	; 68
    4f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f38:	dc 01       	movw	r26, r24
    4f3a:	cb 01       	movw	r24, r22
    4f3c:	8b a3       	std	Y+35, r24	; 0x23
    4f3e:	9c a3       	std	Y+36, r25	; 0x24
    4f40:	ad a3       	std	Y+37, r26	; 0x25
    4f42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4f44:	6b a1       	ldd	r22, Y+35	; 0x23
    4f46:	7c a1       	ldd	r23, Y+36	; 0x24
    4f48:	8d a1       	ldd	r24, Y+37	; 0x25
    4f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e8       	ldi	r20, 0x80	; 128
    4f52:	5f e3       	ldi	r21, 0x3F	; 63
    4f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f58:	88 23       	and	r24, r24
    4f5a:	2c f4       	brge	.+10     	; 0x4f66 <ENTER_PASS+0xb2>
		__ticks = 1;
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	9a a3       	std	Y+34, r25	; 0x22
    4f62:	89 a3       	std	Y+33, r24	; 0x21
    4f64:	3f c0       	rjmp	.+126    	; 0x4fe4 <ENTER_PASS+0x130>
	else if (__tmp > 65535)
    4f66:	6b a1       	ldd	r22, Y+35	; 0x23
    4f68:	7c a1       	ldd	r23, Y+36	; 0x24
    4f6a:	8d a1       	ldd	r24, Y+37	; 0x25
    4f6c:	9e a1       	ldd	r25, Y+38	; 0x26
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
    4f70:	3f ef       	ldi	r19, 0xFF	; 255
    4f72:	4f e7       	ldi	r20, 0x7F	; 127
    4f74:	57 e4       	ldi	r21, 0x47	; 71
    4f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f7a:	18 16       	cp	r1, r24
    4f7c:	4c f5       	brge	.+82     	; 0x4fd0 <ENTER_PASS+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f7e:	6f a1       	ldd	r22, Y+39	; 0x27
    4f80:	78 a5       	ldd	r23, Y+40	; 0x28
    4f82:	89 a5       	ldd	r24, Y+41	; 0x29
    4f84:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	40 e2       	ldi	r20, 0x20	; 32
    4f8c:	51 e4       	ldi	r21, 0x41	; 65
    4f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	bc 01       	movw	r22, r24
    4f98:	cd 01       	movw	r24, r26
    4f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f9e:	dc 01       	movw	r26, r24
    4fa0:	cb 01       	movw	r24, r22
    4fa2:	9a a3       	std	Y+34, r25	; 0x22
    4fa4:	89 a3       	std	Y+33, r24	; 0x21
    4fa6:	0f c0       	rjmp	.+30     	; 0x4fc6 <ENTER_PASS+0x112>
    4fa8:	88 ec       	ldi	r24, 0xC8	; 200
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	98 a3       	std	Y+32, r25	; 0x20
    4fae:	8f 8f       	std	Y+31, r24	; 0x1f
    4fb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fb2:	98 a1       	ldd	r25, Y+32	; 0x20
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	f1 f7       	brne	.-4      	; 0x4fb4 <ENTER_PASS+0x100>
    4fb8:	98 a3       	std	Y+32, r25	; 0x20
    4fba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    4fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    4fc0:	01 97       	sbiw	r24, 0x01	; 1
    4fc2:	9a a3       	std	Y+34, r25	; 0x22
    4fc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fc6:	89 a1       	ldd	r24, Y+33	; 0x21
    4fc8:	9a a1       	ldd	r25, Y+34	; 0x22
    4fca:	00 97       	sbiw	r24, 0x00	; 0
    4fcc:	69 f7       	brne	.-38     	; 0x4fa8 <ENTER_PASS+0xf4>
    4fce:	14 c0       	rjmp	.+40     	; 0x4ff8 <ENTER_PASS+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    4fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    4fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    4fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    4fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	9a a3       	std	Y+34, r25	; 0x22
    4fe2:	89 a3       	std	Y+33, r24	; 0x21
    4fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    4fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    4fe8:	9e 8f       	std	Y+30, r25	; 0x1e
    4fea:	8d 8f       	std	Y+29, r24	; 0x1d
    4fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ff0:	01 97       	sbiw	r24, 0x01	; 1
    4ff2:	f1 f7       	brne	.-4      	; 0x4ff0 <ENTER_PASS+0x13c>
    4ff4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ff6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(CHARACTER_PREVIEW_TIME);
		//go to the previous location to hide the pass entered
		Gotoxy(0+pass_counter,2);
    4ff8:	8e a5       	ldd	r24, Y+46	; 0x2e
    4ffa:	62 e0       	ldi	r22, 0x02	; 2
    4ffc:	0e 94 21 12 	call	0x2442	; 0x2442 <Gotoxy>
		LCD_vidWriteCharctr(PASSWORD_SYMBOL);
    5000:	8a e2       	ldi	r24, 0x2A	; 42
    5002:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_vidWriteCharctr>
    5006:	80 e0       	ldi	r24, 0x00	; 0
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	a8 ec       	ldi	r26, 0xC8	; 200
    500c:	b2 e4       	ldi	r27, 0x42	; 66
    500e:	89 8f       	std	Y+25, r24	; 0x19
    5010:	9a 8f       	std	Y+26, r25	; 0x1a
    5012:	ab 8f       	std	Y+27, r26	; 0x1b
    5014:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5016:	69 8d       	ldd	r22, Y+25	; 0x19
    5018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    501a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    501c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	4a ef       	ldi	r20, 0xFA	; 250
    5024:	54 e4       	ldi	r21, 0x44	; 68
    5026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	8d 8b       	std	Y+21, r24	; 0x15
    5030:	9e 8b       	std	Y+22, r25	; 0x16
    5032:	af 8b       	std	Y+23, r26	; 0x17
    5034:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5036:	6d 89       	ldd	r22, Y+21	; 0x15
    5038:	7e 89       	ldd	r23, Y+22	; 0x16
    503a:	8f 89       	ldd	r24, Y+23	; 0x17
    503c:	98 8d       	ldd	r25, Y+24	; 0x18
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e8       	ldi	r20, 0x80	; 128
    5044:	5f e3       	ldi	r21, 0x3F	; 63
    5046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    504a:	88 23       	and	r24, r24
    504c:	2c f4       	brge	.+10     	; 0x5058 <ENTER_PASS+0x1a4>
		__ticks = 1;
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	9c 8b       	std	Y+20, r25	; 0x14
    5054:	8b 8b       	std	Y+19, r24	; 0x13
    5056:	3f c0       	rjmp	.+126    	; 0x50d6 <ENTER_PASS+0x222>
	else if (__tmp > 65535)
    5058:	6d 89       	ldd	r22, Y+21	; 0x15
    505a:	7e 89       	ldd	r23, Y+22	; 0x16
    505c:	8f 89       	ldd	r24, Y+23	; 0x17
    505e:	98 8d       	ldd	r25, Y+24	; 0x18
    5060:	20 e0       	ldi	r18, 0x00	; 0
    5062:	3f ef       	ldi	r19, 0xFF	; 255
    5064:	4f e7       	ldi	r20, 0x7F	; 127
    5066:	57 e4       	ldi	r21, 0x47	; 71
    5068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    506c:	18 16       	cp	r1, r24
    506e:	4c f5       	brge	.+82     	; 0x50c2 <ENTER_PASS+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5070:	69 8d       	ldd	r22, Y+25	; 0x19
    5072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5078:	20 e0       	ldi	r18, 0x00	; 0
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	40 e2       	ldi	r20, 0x20	; 32
    507e:	51 e4       	ldi	r21, 0x41	; 65
    5080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	bc 01       	movw	r22, r24
    508a:	cd 01       	movw	r24, r26
    508c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	9c 8b       	std	Y+20, r25	; 0x14
    5096:	8b 8b       	std	Y+19, r24	; 0x13
    5098:	0f c0       	rjmp	.+30     	; 0x50b8 <ENTER_PASS+0x204>
    509a:	88 ec       	ldi	r24, 0xC8	; 200
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	9a 8b       	std	Y+18, r25	; 0x12
    50a0:	89 8b       	std	Y+17, r24	; 0x11
    50a2:	89 89       	ldd	r24, Y+17	; 0x11
    50a4:	9a 89       	ldd	r25, Y+18	; 0x12
    50a6:	01 97       	sbiw	r24, 0x01	; 1
    50a8:	f1 f7       	brne	.-4      	; 0x50a6 <ENTER_PASS+0x1f2>
    50aa:	9a 8b       	std	Y+18, r25	; 0x12
    50ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ae:	8b 89       	ldd	r24, Y+19	; 0x13
    50b0:	9c 89       	ldd	r25, Y+20	; 0x14
    50b2:	01 97       	sbiw	r24, 0x01	; 1
    50b4:	9c 8b       	std	Y+20, r25	; 0x14
    50b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b8:	8b 89       	ldd	r24, Y+19	; 0x13
    50ba:	9c 89       	ldd	r25, Y+20	; 0x14
    50bc:	00 97       	sbiw	r24, 0x00	; 0
    50be:	69 f7       	brne	.-38     	; 0x509a <ENTER_PASS+0x1e6>
    50c0:	14 c0       	rjmp	.+40     	; 0x50ea <ENTER_PASS+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c2:	6d 89       	ldd	r22, Y+21	; 0x15
    50c4:	7e 89       	ldd	r23, Y+22	; 0x16
    50c6:	8f 89       	ldd	r24, Y+23	; 0x17
    50c8:	98 8d       	ldd	r25, Y+24	; 0x18
    50ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ce:	dc 01       	movw	r26, r24
    50d0:	cb 01       	movw	r24, r22
    50d2:	9c 8b       	std	Y+20, r25	; 0x14
    50d4:	8b 8b       	std	Y+19, r24	; 0x13
    50d6:	8b 89       	ldd	r24, Y+19	; 0x13
    50d8:	9c 89       	ldd	r25, Y+20	; 0x14
    50da:	98 8b       	std	Y+16, r25	; 0x10
    50dc:	8f 87       	std	Y+15, r24	; 0x0f
    50de:	8f 85       	ldd	r24, Y+15	; 0x0f
    50e0:	98 89       	ldd	r25, Y+16	; 0x10
    50e2:	01 97       	sbiw	r24, 0x01	; 1
    50e4:	f1 f7       	brne	.-4      	; 0x50e2 <ENTER_PASS+0x22e>
    50e6:	98 8b       	std	Y+16, r25	; 0x10
    50e8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		pass_counter++;
    50ea:	8e a5       	ldd	r24, Y+46	; 0x2e
    50ec:	8f 5f       	subi	r24, 0xFF	; 255
    50ee:	8e a7       	std	Y+46, r24	; 0x2e

	u8 pass_counter=0;
	u8 pass_entered=0;
	u8 x;
	u8 flag=1;
	while (pass_counter<PASS_SIZE)
    50f0:	8e a5       	ldd	r24, Y+46	; 0x2e
    50f2:	84 30       	cpi	r24, 0x04	; 4
    50f4:	08 f4       	brcc	.+2      	; 0x50f8 <ENTER_PASS+0x244>
    50f6:	f4 ce       	rjmp	.-536    	; 0x4ee0 <ENTER_PASS+0x2c>
		LCD_vidWriteCharctr(PASSWORD_SYMBOL);
		_delay_ms(100);
		pass_counter++;

	}
	LCD_vidSendCommand(lcd_Clear);
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

	//SAVE PASSWORD & SAVE THE STATUS AS SET
	EEPROM_vWrite(EEPROM_CHECK_PASS_ADDRESS,pass_entered);
    50fe:	8d ee       	ldi	r24, 0xED	; 237
    5100:	6d a5       	ldd	r22, Y+45	; 0x2d
    5102:	0e 94 81 09 	call	0x1302	; 0x1302 <EEPROM_vWrite>
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	aa e7       	ldi	r26, 0x7A	; 122
    510c:	b4 e4       	ldi	r27, 0x44	; 68
    510e:	8b 87       	std	Y+11, r24	; 0x0b
    5110:	9c 87       	std	Y+12, r25	; 0x0c
    5112:	ad 87       	std	Y+13, r26	; 0x0d
    5114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5116:	6b 85       	ldd	r22, Y+11	; 0x0b
    5118:	7c 85       	ldd	r23, Y+12	; 0x0c
    511a:	8d 85       	ldd	r24, Y+13	; 0x0d
    511c:	9e 85       	ldd	r25, Y+14	; 0x0e
    511e:	20 e0       	ldi	r18, 0x00	; 0
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	4a ef       	ldi	r20, 0xFA	; 250
    5124:	54 e4       	ldi	r21, 0x44	; 68
    5126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    512a:	dc 01       	movw	r26, r24
    512c:	cb 01       	movw	r24, r22
    512e:	8f 83       	std	Y+7, r24	; 0x07
    5130:	98 87       	std	Y+8, r25	; 0x08
    5132:	a9 87       	std	Y+9, r26	; 0x09
    5134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5136:	6f 81       	ldd	r22, Y+7	; 0x07
    5138:	78 85       	ldd	r23, Y+8	; 0x08
    513a:	89 85       	ldd	r24, Y+9	; 0x09
    513c:	9a 85       	ldd	r25, Y+10	; 0x0a
    513e:	20 e0       	ldi	r18, 0x00	; 0
    5140:	30 e0       	ldi	r19, 0x00	; 0
    5142:	40 e8       	ldi	r20, 0x80	; 128
    5144:	5f e3       	ldi	r21, 0x3F	; 63
    5146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    514a:	88 23       	and	r24, r24
    514c:	2c f4       	brge	.+10     	; 0x5158 <ENTER_PASS+0x2a4>
		__ticks = 1;
    514e:	81 e0       	ldi	r24, 0x01	; 1
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	9e 83       	std	Y+6, r25	; 0x06
    5154:	8d 83       	std	Y+5, r24	; 0x05
    5156:	3f c0       	rjmp	.+126    	; 0x51d6 <ENTER_PASS+0x322>
	else if (__tmp > 65535)
    5158:	6f 81       	ldd	r22, Y+7	; 0x07
    515a:	78 85       	ldd	r23, Y+8	; 0x08
    515c:	89 85       	ldd	r24, Y+9	; 0x09
    515e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	3f ef       	ldi	r19, 0xFF	; 255
    5164:	4f e7       	ldi	r20, 0x7F	; 127
    5166:	57 e4       	ldi	r21, 0x47	; 71
    5168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    516c:	18 16       	cp	r1, r24
    516e:	4c f5       	brge	.+82     	; 0x51c2 <ENTER_PASS+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5170:	6b 85       	ldd	r22, Y+11	; 0x0b
    5172:	7c 85       	ldd	r23, Y+12	; 0x0c
    5174:	8d 85       	ldd	r24, Y+13	; 0x0d
    5176:	9e 85       	ldd	r25, Y+14	; 0x0e
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	40 e2       	ldi	r20, 0x20	; 32
    517e:	51 e4       	ldi	r21, 0x41	; 65
    5180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5184:	dc 01       	movw	r26, r24
    5186:	cb 01       	movw	r24, r22
    5188:	bc 01       	movw	r22, r24
    518a:	cd 01       	movw	r24, r26
    518c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	9e 83       	std	Y+6, r25	; 0x06
    5196:	8d 83       	std	Y+5, r24	; 0x05
    5198:	0f c0       	rjmp	.+30     	; 0x51b8 <ENTER_PASS+0x304>
    519a:	88 ec       	ldi	r24, 0xC8	; 200
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	9c 83       	std	Y+4, r25	; 0x04
    51a0:	8b 83       	std	Y+3, r24	; 0x03
    51a2:	8b 81       	ldd	r24, Y+3	; 0x03
    51a4:	9c 81       	ldd	r25, Y+4	; 0x04
    51a6:	01 97       	sbiw	r24, 0x01	; 1
    51a8:	f1 f7       	brne	.-4      	; 0x51a6 <ENTER_PASS+0x2f2>
    51aa:	9c 83       	std	Y+4, r25	; 0x04
    51ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ae:	8d 81       	ldd	r24, Y+5	; 0x05
    51b0:	9e 81       	ldd	r25, Y+6	; 0x06
    51b2:	01 97       	sbiw	r24, 0x01	; 1
    51b4:	9e 83       	std	Y+6, r25	; 0x06
    51b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b8:	8d 81       	ldd	r24, Y+5	; 0x05
    51ba:	9e 81       	ldd	r25, Y+6	; 0x06
    51bc:	00 97       	sbiw	r24, 0x00	; 0
    51be:	69 f7       	brne	.-38     	; 0x519a <ENTER_PASS+0x2e6>
    51c0:	14 c0       	rjmp	.+40     	; 0x51ea <ENTER_PASS+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51c2:	6f 81       	ldd	r22, Y+7	; 0x07
    51c4:	78 85       	ldd	r23, Y+8	; 0x08
    51c6:	89 85       	ldd	r24, Y+9	; 0x09
    51c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ce:	dc 01       	movw	r26, r24
    51d0:	cb 01       	movw	r24, r22
    51d2:	9e 83       	std	Y+6, r25	; 0x06
    51d4:	8d 83       	std	Y+5, r24	; 0x05
    51d6:	8d 81       	ldd	r24, Y+5	; 0x05
    51d8:	9e 81       	ldd	r25, Y+6	; 0x06
    51da:	9a 83       	std	Y+2, r25	; 0x02
    51dc:	89 83       	std	Y+1, r24	; 0x01
    51de:	89 81       	ldd	r24, Y+1	; 0x01
    51e0:	9a 81       	ldd	r25, Y+2	; 0x02
    51e2:	01 97       	sbiw	r24, 0x01	; 1
    51e4:	f1 f7       	brne	.-4      	; 0x51e2 <ENTER_PASS+0x32e>
    51e6:	9a 83       	std	Y+2, r25	; 0x02
    51e8:	89 83       	std	Y+1, r24	; 0x01
	//EEPROM_vWrite(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);
	_delay_ms(1000);
	LCD_vidSendCommand(lcd_Clear);
    51ea:	81 e0       	ldi	r24, 0x01	; 1
    51ec:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_vidSendCommand>

}
    51f0:	ae 96       	adiw	r28, 0x2e	; 46
    51f2:	0f b6       	in	r0, 0x3f	; 63
    51f4:	f8 94       	cli
    51f6:	de bf       	out	0x3e, r29	; 62
    51f8:	0f be       	out	0x3f, r0	; 63
    51fa:	cd bf       	out	0x3d, r28	; 61
    51fc:	cf 91       	pop	r28
    51fe:	df 91       	pop	r29
    5200:	08 95       	ret

00005202 <SERVO_ON>:



void SERVO_ON(void)
{
    5202:	df 93       	push	r29
    5204:	cf 93       	push	r28
    5206:	cd b7       	in	r28, 0x3d	; 61
    5208:	de b7       	in	r29, 0x3e	; 62
    520a:	6e 97       	sbiw	r28, 0x1e	; 30
    520c:	0f b6       	in	r0, 0x3f	; 63
    520e:	f8 94       	cli
    5210:	de bf       	out	0x3e, r29	; 62
    5212:	0f be       	out	0x3f, r0	; 63
    5214:	cd bf       	out	0x3d, r28	; 61
	DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D7,DIO_HIGH);
    5216:	84 e0       	ldi	r24, 0x04	; 4
    5218:	67 e0       	ldi	r22, 0x07	; 7
    521a:	41 e0       	ldi	r20, 0x01	; 1
    521c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>


	u16 u16Counter;

	// Move to 90 degrees
	for (u16Counter = 750; u16Counter < 1500; u16Counter++)
    5220:	8e ee       	ldi	r24, 0xEE	; 238
    5222:	92 e0       	ldi	r25, 0x02	; 2
    5224:	9e 8f       	std	Y+30, r25	; 0x1e
    5226:	8d 8f       	std	Y+29, r24	; 0x1d
    5228:	80 c0       	rjmp	.+256    	; 0x532a <SERVO_ON+0x128>
	{
		TIM1_voidSetCmpARegValue(u16Counter);
    522a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    522c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    522e:	0e 94 f5 16 	call	0x2dea	; 0x2dea <TIM1_voidSetCmpARegValue>
    5232:	80 e0       	ldi	r24, 0x00	; 0
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	a0 e2       	ldi	r26, 0x20	; 32
    5238:	b1 e4       	ldi	r27, 0x41	; 65
    523a:	89 8f       	std	Y+25, r24	; 0x19
    523c:	9a 8f       	std	Y+26, r25	; 0x1a
    523e:	ab 8f       	std	Y+27, r26	; 0x1b
    5240:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5242:	69 8d       	ldd	r22, Y+25	; 0x19
    5244:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	4a ef       	ldi	r20, 0xFA	; 250
    5250:	54 e4       	ldi	r21, 0x44	; 68
    5252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5256:	dc 01       	movw	r26, r24
    5258:	cb 01       	movw	r24, r22
    525a:	8d 8b       	std	Y+21, r24	; 0x15
    525c:	9e 8b       	std	Y+22, r25	; 0x16
    525e:	af 8b       	std	Y+23, r26	; 0x17
    5260:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5262:	6d 89       	ldd	r22, Y+21	; 0x15
    5264:	7e 89       	ldd	r23, Y+22	; 0x16
    5266:	8f 89       	ldd	r24, Y+23	; 0x17
    5268:	98 8d       	ldd	r25, Y+24	; 0x18
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	40 e8       	ldi	r20, 0x80	; 128
    5270:	5f e3       	ldi	r21, 0x3F	; 63
    5272:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5276:	88 23       	and	r24, r24
    5278:	2c f4       	brge	.+10     	; 0x5284 <SERVO_ON+0x82>
		__ticks = 1;
    527a:	81 e0       	ldi	r24, 0x01	; 1
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	9c 8b       	std	Y+20, r25	; 0x14
    5280:	8b 8b       	std	Y+19, r24	; 0x13
    5282:	3f c0       	rjmp	.+126    	; 0x5302 <SERVO_ON+0x100>
	else if (__tmp > 65535)
    5284:	6d 89       	ldd	r22, Y+21	; 0x15
    5286:	7e 89       	ldd	r23, Y+22	; 0x16
    5288:	8f 89       	ldd	r24, Y+23	; 0x17
    528a:	98 8d       	ldd	r25, Y+24	; 0x18
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	3f ef       	ldi	r19, 0xFF	; 255
    5290:	4f e7       	ldi	r20, 0x7F	; 127
    5292:	57 e4       	ldi	r21, 0x47	; 71
    5294:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5298:	18 16       	cp	r1, r24
    529a:	4c f5       	brge	.+82     	; 0x52ee <SERVO_ON+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    529c:	69 8d       	ldd	r22, Y+25	; 0x19
    529e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52a4:	20 e0       	ldi	r18, 0x00	; 0
    52a6:	30 e0       	ldi	r19, 0x00	; 0
    52a8:	40 e2       	ldi	r20, 0x20	; 32
    52aa:	51 e4       	ldi	r21, 0x41	; 65
    52ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	bc 01       	movw	r22, r24
    52b6:	cd 01       	movw	r24, r26
    52b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52bc:	dc 01       	movw	r26, r24
    52be:	cb 01       	movw	r24, r22
    52c0:	9c 8b       	std	Y+20, r25	; 0x14
    52c2:	8b 8b       	std	Y+19, r24	; 0x13
    52c4:	0f c0       	rjmp	.+30     	; 0x52e4 <SERVO_ON+0xe2>
    52c6:	88 ec       	ldi	r24, 0xC8	; 200
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	9a 8b       	std	Y+18, r25	; 0x12
    52cc:	89 8b       	std	Y+17, r24	; 0x11
    52ce:	89 89       	ldd	r24, Y+17	; 0x11
    52d0:	9a 89       	ldd	r25, Y+18	; 0x12
    52d2:	01 97       	sbiw	r24, 0x01	; 1
    52d4:	f1 f7       	brne	.-4      	; 0x52d2 <SERVO_ON+0xd0>
    52d6:	9a 8b       	std	Y+18, r25	; 0x12
    52d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52da:	8b 89       	ldd	r24, Y+19	; 0x13
    52dc:	9c 89       	ldd	r25, Y+20	; 0x14
    52de:	01 97       	sbiw	r24, 0x01	; 1
    52e0:	9c 8b       	std	Y+20, r25	; 0x14
    52e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52e4:	8b 89       	ldd	r24, Y+19	; 0x13
    52e6:	9c 89       	ldd	r25, Y+20	; 0x14
    52e8:	00 97       	sbiw	r24, 0x00	; 0
    52ea:	69 f7       	brne	.-38     	; 0x52c6 <SERVO_ON+0xc4>
    52ec:	14 c0       	rjmp	.+40     	; 0x5316 <SERVO_ON+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ee:	6d 89       	ldd	r22, Y+21	; 0x15
    52f0:	7e 89       	ldd	r23, Y+22	; 0x16
    52f2:	8f 89       	ldd	r24, Y+23	; 0x17
    52f4:	98 8d       	ldd	r25, Y+24	; 0x18
    52f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	9c 8b       	std	Y+20, r25	; 0x14
    5300:	8b 8b       	std	Y+19, r24	; 0x13
    5302:	8b 89       	ldd	r24, Y+19	; 0x13
    5304:	9c 89       	ldd	r25, Y+20	; 0x14
    5306:	98 8b       	std	Y+16, r25	; 0x10
    5308:	8f 87       	std	Y+15, r24	; 0x0f
    530a:	8f 85       	ldd	r24, Y+15	; 0x0f
    530c:	98 89       	ldd	r25, Y+16	; 0x10
    530e:	01 97       	sbiw	r24, 0x01	; 1
    5310:	f1 f7       	brne	.-4      	; 0x530e <SERVO_ON+0x10c>
    5312:	98 8b       	std	Y+16, r25	; 0x10
    5314:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		u16Counter	=        u16Counter+5	;
    5316:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5318:	9e 8d       	ldd	r25, Y+30	; 0x1e
    531a:	05 96       	adiw	r24, 0x05	; 5
    531c:	9e 8f       	std	Y+30, r25	; 0x1e
    531e:	8d 8f       	std	Y+29, r24	; 0x1d


	u16 u16Counter;

	// Move to 90 degrees
	for (u16Counter = 750; u16Counter < 1500; u16Counter++)
    5320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5322:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5324:	01 96       	adiw	r24, 0x01	; 1
    5326:	9e 8f       	std	Y+30, r25	; 0x1e
    5328:	8d 8f       	std	Y+29, r24	; 0x1d
    532a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    532c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    532e:	25 e0       	ldi	r18, 0x05	; 5
    5330:	8c 3d       	cpi	r24, 0xDC	; 220
    5332:	92 07       	cpc	r25, r18
    5334:	08 f4       	brcc	.+2      	; 0x5338 <SERVO_ON+0x136>
    5336:	79 cf       	rjmp	.-270    	; 0x522a <SERVO_ON+0x28>
    5338:	80 e0       	ldi	r24, 0x00	; 0
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	aa ef       	ldi	r26, 0xFA	; 250
    533e:	b3 e4       	ldi	r27, 0x43	; 67
    5340:	8b 87       	std	Y+11, r24	; 0x0b
    5342:	9c 87       	std	Y+12, r25	; 0x0c
    5344:	ad 87       	std	Y+13, r26	; 0x0d
    5346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5348:	6b 85       	ldd	r22, Y+11	; 0x0b
    534a:	7c 85       	ldd	r23, Y+12	; 0x0c
    534c:	8d 85       	ldd	r24, Y+13	; 0x0d
    534e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	4a ef       	ldi	r20, 0xFA	; 250
    5356:	54 e4       	ldi	r21, 0x44	; 68
    5358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    535c:	dc 01       	movw	r26, r24
    535e:	cb 01       	movw	r24, r22
    5360:	8f 83       	std	Y+7, r24	; 0x07
    5362:	98 87       	std	Y+8, r25	; 0x08
    5364:	a9 87       	std	Y+9, r26	; 0x09
    5366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5368:	6f 81       	ldd	r22, Y+7	; 0x07
    536a:	78 85       	ldd	r23, Y+8	; 0x08
    536c:	89 85       	ldd	r24, Y+9	; 0x09
    536e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	40 e8       	ldi	r20, 0x80	; 128
    5376:	5f e3       	ldi	r21, 0x3F	; 63
    5378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    537c:	88 23       	and	r24, r24
    537e:	2c f4       	brge	.+10     	; 0x538a <SERVO_ON+0x188>
		__ticks = 1;
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	9e 83       	std	Y+6, r25	; 0x06
    5386:	8d 83       	std	Y+5, r24	; 0x05
    5388:	3f c0       	rjmp	.+126    	; 0x5408 <SERVO_ON+0x206>
	else if (__tmp > 65535)
    538a:	6f 81       	ldd	r22, Y+7	; 0x07
    538c:	78 85       	ldd	r23, Y+8	; 0x08
    538e:	89 85       	ldd	r24, Y+9	; 0x09
    5390:	9a 85       	ldd	r25, Y+10	; 0x0a
    5392:	20 e0       	ldi	r18, 0x00	; 0
    5394:	3f ef       	ldi	r19, 0xFF	; 255
    5396:	4f e7       	ldi	r20, 0x7F	; 127
    5398:	57 e4       	ldi	r21, 0x47	; 71
    539a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    539e:	18 16       	cp	r1, r24
    53a0:	4c f5       	brge	.+82     	; 0x53f4 <SERVO_ON+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    53a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    53aa:	20 e0       	ldi	r18, 0x00	; 0
    53ac:	30 e0       	ldi	r19, 0x00	; 0
    53ae:	40 e2       	ldi	r20, 0x20	; 32
    53b0:	51 e4       	ldi	r21, 0x41	; 65
    53b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b6:	dc 01       	movw	r26, r24
    53b8:	cb 01       	movw	r24, r22
    53ba:	bc 01       	movw	r22, r24
    53bc:	cd 01       	movw	r24, r26
    53be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c2:	dc 01       	movw	r26, r24
    53c4:	cb 01       	movw	r24, r22
    53c6:	9e 83       	std	Y+6, r25	; 0x06
    53c8:	8d 83       	std	Y+5, r24	; 0x05
    53ca:	0f c0       	rjmp	.+30     	; 0x53ea <SERVO_ON+0x1e8>
    53cc:	88 ec       	ldi	r24, 0xC8	; 200
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	9c 83       	std	Y+4, r25	; 0x04
    53d2:	8b 83       	std	Y+3, r24	; 0x03
    53d4:	8b 81       	ldd	r24, Y+3	; 0x03
    53d6:	9c 81       	ldd	r25, Y+4	; 0x04
    53d8:	01 97       	sbiw	r24, 0x01	; 1
    53da:	f1 f7       	brne	.-4      	; 0x53d8 <SERVO_ON+0x1d6>
    53dc:	9c 83       	std	Y+4, r25	; 0x04
    53de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53e0:	8d 81       	ldd	r24, Y+5	; 0x05
    53e2:	9e 81       	ldd	r25, Y+6	; 0x06
    53e4:	01 97       	sbiw	r24, 0x01	; 1
    53e6:	9e 83       	std	Y+6, r25	; 0x06
    53e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53ea:	8d 81       	ldd	r24, Y+5	; 0x05
    53ec:	9e 81       	ldd	r25, Y+6	; 0x06
    53ee:	00 97       	sbiw	r24, 0x00	; 0
    53f0:	69 f7       	brne	.-38     	; 0x53cc <SERVO_ON+0x1ca>
    53f2:	14 c0       	rjmp	.+40     	; 0x541c <SERVO_ON+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53f4:	6f 81       	ldd	r22, Y+7	; 0x07
    53f6:	78 85       	ldd	r23, Y+8	; 0x08
    53f8:	89 85       	ldd	r24, Y+9	; 0x09
    53fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    53fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5400:	dc 01       	movw	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	9e 83       	std	Y+6, r25	; 0x06
    5406:	8d 83       	std	Y+5, r24	; 0x05
    5408:	8d 81       	ldd	r24, Y+5	; 0x05
    540a:	9e 81       	ldd	r25, Y+6	; 0x06
    540c:	9a 83       	std	Y+2, r25	; 0x02
    540e:	89 83       	std	Y+1, r24	; 0x01
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	9a 81       	ldd	r25, Y+2	; 0x02
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	f1 f7       	brne	.-4      	; 0x5414 <SERVO_ON+0x212>
    5418:	9a 83       	std	Y+2, r25	; 0x02
    541a:	89 83       	std	Y+1, r24	; 0x01
	}
	// Wait for stability (optional)
	_delay_ms(500);

	// Stop at 90 degrees
	TIM1_voidSetCmpARegValue(1500);  // Adjust the value for precise 90 degrees
    541c:	8c ed       	ldi	r24, 0xDC	; 220
    541e:	95 e0       	ldi	r25, 0x05	; 5
    5420:	0e 94 f5 16 	call	0x2dea	; 0x2dea <TIM1_voidSetCmpARegValue>

	DIO_voidWritePin(PORT_D,DIO_PIN_NUM_D7,DIO_LOW);
    5424:	84 e0       	ldi	r24, 0x04	; 4
    5426:	67 e0       	ldi	r22, 0x07	; 7
    5428:	40 e0       	ldi	r20, 0x00	; 0
    542a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <DIO_voidWritePin>
	//
	//	    // Wait for stability (optional)
	//	    _delay_ms(500);


}
    542e:	6e 96       	adiw	r28, 0x1e	; 30
    5430:	0f b6       	in	r0, 0x3f	; 63
    5432:	f8 94       	cli
    5434:	de bf       	out	0x3e, r29	; 62
    5436:	0f be       	out	0x3f, r0	; 63
    5438:	cd bf       	out	0x3d, r28	; 61
    543a:	cf 91       	pop	r28
    543c:	df 91       	pop	r29
    543e:	08 95       	ret

00005440 <function_1>:



void function_1(void)
{
    5440:	df 93       	push	r29
    5442:	cf 93       	push	r28
    5444:	cd b7       	in	r28, 0x3d	; 61
    5446:	de b7       	in	r29, 0x3e	; 62
    5448:	6e 97       	sbiw	r28, 0x1e	; 30
    544a:	0f b6       	in	r0, 0x3f	; 63
    544c:	f8 94       	cli
    544e:	de bf       	out	0x3e, r29	; 62
    5450:	0f be       	out	0x3f, r0	; 63
    5452:	cd bf       	out	0x3d, r28	; 61
	for(int i=0 ;i<2;i++){
    5454:	1e 8e       	std	Y+30, r1	; 0x1e
    5456:	1d 8e       	std	Y+29, r1	; 0x1d
    5458:	ed c0       	rjmp	.+474    	; 0x5634 <function_1+0x1f4>
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	90 e8       	ldi	r25, 0x80	; 128
    545e:	a9 e0       	ldi	r26, 0x09	; 9
    5460:	b4 e4       	ldi	r27, 0x44	; 68
    5462:	89 8f       	std	Y+25, r24	; 0x19
    5464:	9a 8f       	std	Y+26, r25	; 0x1a
    5466:	ab 8f       	std	Y+27, r26	; 0x1b
    5468:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    546a:	69 8d       	ldd	r22, Y+25	; 0x19
    546c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    546e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5472:	20 e0       	ldi	r18, 0x00	; 0
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	4a ef       	ldi	r20, 0xFA	; 250
    5478:	54 e4       	ldi	r21, 0x44	; 68
    547a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    547e:	dc 01       	movw	r26, r24
    5480:	cb 01       	movw	r24, r22
    5482:	8d 8b       	std	Y+21, r24	; 0x15
    5484:	9e 8b       	std	Y+22, r25	; 0x16
    5486:	af 8b       	std	Y+23, r26	; 0x17
    5488:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    548a:	6d 89       	ldd	r22, Y+21	; 0x15
    548c:	7e 89       	ldd	r23, Y+22	; 0x16
    548e:	8f 89       	ldd	r24, Y+23	; 0x17
    5490:	98 8d       	ldd	r25, Y+24	; 0x18
    5492:	20 e0       	ldi	r18, 0x00	; 0
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	40 e8       	ldi	r20, 0x80	; 128
    5498:	5f e3       	ldi	r21, 0x3F	; 63
    549a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    549e:	88 23       	and	r24, r24
    54a0:	2c f4       	brge	.+10     	; 0x54ac <function_1+0x6c>
		__ticks = 1;
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	9c 8b       	std	Y+20, r25	; 0x14
    54a8:	8b 8b       	std	Y+19, r24	; 0x13
    54aa:	3f c0       	rjmp	.+126    	; 0x552a <function_1+0xea>
	else if (__tmp > 65535)
    54ac:	6d 89       	ldd	r22, Y+21	; 0x15
    54ae:	7e 89       	ldd	r23, Y+22	; 0x16
    54b0:	8f 89       	ldd	r24, Y+23	; 0x17
    54b2:	98 8d       	ldd	r25, Y+24	; 0x18
    54b4:	20 e0       	ldi	r18, 0x00	; 0
    54b6:	3f ef       	ldi	r19, 0xFF	; 255
    54b8:	4f e7       	ldi	r20, 0x7F	; 127
    54ba:	57 e4       	ldi	r21, 0x47	; 71
    54bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54c0:	18 16       	cp	r1, r24
    54c2:	4c f5       	brge	.+82     	; 0x5516 <function_1+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c4:	69 8d       	ldd	r22, Y+25	; 0x19
    54c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	40 e2       	ldi	r20, 0x20	; 32
    54d2:	51 e4       	ldi	r21, 0x41	; 65
    54d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	bc 01       	movw	r22, r24
    54de:	cd 01       	movw	r24, r26
    54e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	9c 8b       	std	Y+20, r25	; 0x14
    54ea:	8b 8b       	std	Y+19, r24	; 0x13
    54ec:	0f c0       	rjmp	.+30     	; 0x550c <function_1+0xcc>
    54ee:	88 ec       	ldi	r24, 0xC8	; 200
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	9a 8b       	std	Y+18, r25	; 0x12
    54f4:	89 8b       	std	Y+17, r24	; 0x11
    54f6:	89 89       	ldd	r24, Y+17	; 0x11
    54f8:	9a 89       	ldd	r25, Y+18	; 0x12
    54fa:	01 97       	sbiw	r24, 0x01	; 1
    54fc:	f1 f7       	brne	.-4      	; 0x54fa <function_1+0xba>
    54fe:	9a 8b       	std	Y+18, r25	; 0x12
    5500:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5502:	8b 89       	ldd	r24, Y+19	; 0x13
    5504:	9c 89       	ldd	r25, Y+20	; 0x14
    5506:	01 97       	sbiw	r24, 0x01	; 1
    5508:	9c 8b       	std	Y+20, r25	; 0x14
    550a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    550c:	8b 89       	ldd	r24, Y+19	; 0x13
    550e:	9c 89       	ldd	r25, Y+20	; 0x14
    5510:	00 97       	sbiw	r24, 0x00	; 0
    5512:	69 f7       	brne	.-38     	; 0x54ee <function_1+0xae>
    5514:	14 c0       	rjmp	.+40     	; 0x553e <function_1+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5516:	6d 89       	ldd	r22, Y+21	; 0x15
    5518:	7e 89       	ldd	r23, Y+22	; 0x16
    551a:	8f 89       	ldd	r24, Y+23	; 0x17
    551c:	98 8d       	ldd	r25, Y+24	; 0x18
    551e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5522:	dc 01       	movw	r26, r24
    5524:	cb 01       	movw	r24, r22
    5526:	9c 8b       	std	Y+20, r25	; 0x14
    5528:	8b 8b       	std	Y+19, r24	; 0x13
    552a:	8b 89       	ldd	r24, Y+19	; 0x13
    552c:	9c 89       	ldd	r25, Y+20	; 0x14
    552e:	98 8b       	std	Y+16, r25	; 0x10
    5530:	8f 87       	std	Y+15, r24	; 0x0f
    5532:	8f 85       	ldd	r24, Y+15	; 0x0f
    5534:	98 89       	ldd	r25, Y+16	; 0x10
    5536:	01 97       	sbiw	r24, 0x01	; 1
    5538:	f1 f7       	brne	.-4      	; 0x5536 <function_1+0xf6>
    553a:	98 8b       	std	Y+16, r25	; 0x10
    553c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(550);
		DIO_voidTogglePin(PORT_D,DIO_PIN_NUM_D6);
    553e:	84 e0       	ldi	r24, 0x04	; 4
    5540:	66 e0       	ldi	r22, 0x06	; 6
    5542:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <DIO_voidTogglePin>
    5546:	80 e0       	ldi	r24, 0x00	; 0
    5548:	90 e8       	ldi	r25, 0x80	; 128
    554a:	a9 e0       	ldi	r26, 0x09	; 9
    554c:	b4 e4       	ldi	r27, 0x44	; 68
    554e:	8b 87       	std	Y+11, r24	; 0x0b
    5550:	9c 87       	std	Y+12, r25	; 0x0c
    5552:	ad 87       	std	Y+13, r26	; 0x0d
    5554:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5556:	6b 85       	ldd	r22, Y+11	; 0x0b
    5558:	7c 85       	ldd	r23, Y+12	; 0x0c
    555a:	8d 85       	ldd	r24, Y+13	; 0x0d
    555c:	9e 85       	ldd	r25, Y+14	; 0x0e
    555e:	20 e0       	ldi	r18, 0x00	; 0
    5560:	30 e0       	ldi	r19, 0x00	; 0
    5562:	4a ef       	ldi	r20, 0xFA	; 250
    5564:	54 e4       	ldi	r21, 0x44	; 68
    5566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    556a:	dc 01       	movw	r26, r24
    556c:	cb 01       	movw	r24, r22
    556e:	8f 83       	std	Y+7, r24	; 0x07
    5570:	98 87       	std	Y+8, r25	; 0x08
    5572:	a9 87       	std	Y+9, r26	; 0x09
    5574:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5576:	6f 81       	ldd	r22, Y+7	; 0x07
    5578:	78 85       	ldd	r23, Y+8	; 0x08
    557a:	89 85       	ldd	r24, Y+9	; 0x09
    557c:	9a 85       	ldd	r25, Y+10	; 0x0a
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	40 e8       	ldi	r20, 0x80	; 128
    5584:	5f e3       	ldi	r21, 0x3F	; 63
    5586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    558a:	88 23       	and	r24, r24
    558c:	2c f4       	brge	.+10     	; 0x5598 <function_1+0x158>
		__ticks = 1;
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	9e 83       	std	Y+6, r25	; 0x06
    5594:	8d 83       	std	Y+5, r24	; 0x05
    5596:	3f c0       	rjmp	.+126    	; 0x5616 <function_1+0x1d6>
	else if (__tmp > 65535)
    5598:	6f 81       	ldd	r22, Y+7	; 0x07
    559a:	78 85       	ldd	r23, Y+8	; 0x08
    559c:	89 85       	ldd	r24, Y+9	; 0x09
    559e:	9a 85       	ldd	r25, Y+10	; 0x0a
    55a0:	20 e0       	ldi	r18, 0x00	; 0
    55a2:	3f ef       	ldi	r19, 0xFF	; 255
    55a4:	4f e7       	ldi	r20, 0x7F	; 127
    55a6:	57 e4       	ldi	r21, 0x47	; 71
    55a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55ac:	18 16       	cp	r1, r24
    55ae:	4c f5       	brge	.+82     	; 0x5602 <function_1+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    55b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    55b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    55b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    55b8:	20 e0       	ldi	r18, 0x00	; 0
    55ba:	30 e0       	ldi	r19, 0x00	; 0
    55bc:	40 e2       	ldi	r20, 0x20	; 32
    55be:	51 e4       	ldi	r21, 0x41	; 65
    55c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c4:	dc 01       	movw	r26, r24
    55c6:	cb 01       	movw	r24, r22
    55c8:	bc 01       	movw	r22, r24
    55ca:	cd 01       	movw	r24, r26
    55cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d0:	dc 01       	movw	r26, r24
    55d2:	cb 01       	movw	r24, r22
    55d4:	9e 83       	std	Y+6, r25	; 0x06
    55d6:	8d 83       	std	Y+5, r24	; 0x05
    55d8:	0f c0       	rjmp	.+30     	; 0x55f8 <function_1+0x1b8>
    55da:	88 ec       	ldi	r24, 0xC8	; 200
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	9c 83       	std	Y+4, r25	; 0x04
    55e0:	8b 83       	std	Y+3, r24	; 0x03
    55e2:	8b 81       	ldd	r24, Y+3	; 0x03
    55e4:	9c 81       	ldd	r25, Y+4	; 0x04
    55e6:	01 97       	sbiw	r24, 0x01	; 1
    55e8:	f1 f7       	brne	.-4      	; 0x55e6 <function_1+0x1a6>
    55ea:	9c 83       	std	Y+4, r25	; 0x04
    55ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ee:	8d 81       	ldd	r24, Y+5	; 0x05
    55f0:	9e 81       	ldd	r25, Y+6	; 0x06
    55f2:	01 97       	sbiw	r24, 0x01	; 1
    55f4:	9e 83       	std	Y+6, r25	; 0x06
    55f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f8:	8d 81       	ldd	r24, Y+5	; 0x05
    55fa:	9e 81       	ldd	r25, Y+6	; 0x06
    55fc:	00 97       	sbiw	r24, 0x00	; 0
    55fe:	69 f7       	brne	.-38     	; 0x55da <function_1+0x19a>
    5600:	14 c0       	rjmp	.+40     	; 0x562a <function_1+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5602:	6f 81       	ldd	r22, Y+7	; 0x07
    5604:	78 85       	ldd	r23, Y+8	; 0x08
    5606:	89 85       	ldd	r24, Y+9	; 0x09
    5608:	9a 85       	ldd	r25, Y+10	; 0x0a
    560a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560e:	dc 01       	movw	r26, r24
    5610:	cb 01       	movw	r24, r22
    5612:	9e 83       	std	Y+6, r25	; 0x06
    5614:	8d 83       	std	Y+5, r24	; 0x05
    5616:	8d 81       	ldd	r24, Y+5	; 0x05
    5618:	9e 81       	ldd	r25, Y+6	; 0x06
    561a:	9a 83       	std	Y+2, r25	; 0x02
    561c:	89 83       	std	Y+1, r24	; 0x01
    561e:	89 81       	ldd	r24, Y+1	; 0x01
    5620:	9a 81       	ldd	r25, Y+2	; 0x02
    5622:	01 97       	sbiw	r24, 0x01	; 1
    5624:	f1 f7       	brne	.-4      	; 0x5622 <function_1+0x1e2>
    5626:	9a 83       	std	Y+2, r25	; 0x02
    5628:	89 83       	std	Y+1, r24	; 0x01



void function_1(void)
{
	for(int i=0 ;i<2;i++){
    562a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    562c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    562e:	01 96       	adiw	r24, 0x01	; 1
    5630:	9e 8f       	std	Y+30, r25	; 0x1e
    5632:	8d 8f       	std	Y+29, r24	; 0x1d
    5634:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5636:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5638:	82 30       	cpi	r24, 0x02	; 2
    563a:	91 05       	cpc	r25, r1
    563c:	0c f4       	brge	.+2      	; 0x5640 <function_1+0x200>
    563e:	0d cf       	rjmp	.-486    	; 0x545a <function_1+0x1a>
		_delay_ms(550);
		DIO_voidTogglePin(PORT_D,DIO_PIN_NUM_D6);
		_delay_ms(550);
	}
}
    5640:	6e 96       	adiw	r28, 0x1e	; 30
    5642:	0f b6       	in	r0, 0x3f	; 63
    5644:	f8 94       	cli
    5646:	de bf       	out	0x3e, r29	; 62
    5648:	0f be       	out	0x3f, r0	; 63
    564a:	cd bf       	out	0x3d, r28	; 61
    564c:	cf 91       	pop	r28
    564e:	df 91       	pop	r29
    5650:	08 95       	ret

00005652 <__divmodhi4>:
    5652:	97 fb       	bst	r25, 7
    5654:	09 2e       	mov	r0, r25
    5656:	07 26       	eor	r0, r23
    5658:	0a d0       	rcall	.+20     	; 0x566e <__divmodhi4_neg1>
    565a:	77 fd       	sbrc	r23, 7
    565c:	04 d0       	rcall	.+8      	; 0x5666 <__divmodhi4_neg2>
    565e:	0c d0       	rcall	.+24     	; 0x5678 <__udivmodhi4>
    5660:	06 d0       	rcall	.+12     	; 0x566e <__divmodhi4_neg1>
    5662:	00 20       	and	r0, r0
    5664:	1a f4       	brpl	.+6      	; 0x566c <__divmodhi4_exit>

00005666 <__divmodhi4_neg2>:
    5666:	70 95       	com	r23
    5668:	61 95       	neg	r22
    566a:	7f 4f       	sbci	r23, 0xFF	; 255

0000566c <__divmodhi4_exit>:
    566c:	08 95       	ret

0000566e <__divmodhi4_neg1>:
    566e:	f6 f7       	brtc	.-4      	; 0x566c <__divmodhi4_exit>
    5670:	90 95       	com	r25
    5672:	81 95       	neg	r24
    5674:	9f 4f       	sbci	r25, 0xFF	; 255
    5676:	08 95       	ret

00005678 <__udivmodhi4>:
    5678:	aa 1b       	sub	r26, r26
    567a:	bb 1b       	sub	r27, r27
    567c:	51 e1       	ldi	r21, 0x11	; 17
    567e:	07 c0       	rjmp	.+14     	; 0x568e <__udivmodhi4_ep>

00005680 <__udivmodhi4_loop>:
    5680:	aa 1f       	adc	r26, r26
    5682:	bb 1f       	adc	r27, r27
    5684:	a6 17       	cp	r26, r22
    5686:	b7 07       	cpc	r27, r23
    5688:	10 f0       	brcs	.+4      	; 0x568e <__udivmodhi4_ep>
    568a:	a6 1b       	sub	r26, r22
    568c:	b7 0b       	sbc	r27, r23

0000568e <__udivmodhi4_ep>:
    568e:	88 1f       	adc	r24, r24
    5690:	99 1f       	adc	r25, r25
    5692:	5a 95       	dec	r21
    5694:	a9 f7       	brne	.-22     	; 0x5680 <__udivmodhi4_loop>
    5696:	80 95       	com	r24
    5698:	90 95       	com	r25
    569a:	bc 01       	movw	r22, r24
    569c:	cd 01       	movw	r24, r26
    569e:	08 95       	ret

000056a0 <__prologue_saves__>:
    56a0:	2f 92       	push	r2
    56a2:	3f 92       	push	r3
    56a4:	4f 92       	push	r4
    56a6:	5f 92       	push	r5
    56a8:	6f 92       	push	r6
    56aa:	7f 92       	push	r7
    56ac:	8f 92       	push	r8
    56ae:	9f 92       	push	r9
    56b0:	af 92       	push	r10
    56b2:	bf 92       	push	r11
    56b4:	cf 92       	push	r12
    56b6:	df 92       	push	r13
    56b8:	ef 92       	push	r14
    56ba:	ff 92       	push	r15
    56bc:	0f 93       	push	r16
    56be:	1f 93       	push	r17
    56c0:	cf 93       	push	r28
    56c2:	df 93       	push	r29
    56c4:	cd b7       	in	r28, 0x3d	; 61
    56c6:	de b7       	in	r29, 0x3e	; 62
    56c8:	ca 1b       	sub	r28, r26
    56ca:	db 0b       	sbc	r29, r27
    56cc:	0f b6       	in	r0, 0x3f	; 63
    56ce:	f8 94       	cli
    56d0:	de bf       	out	0x3e, r29	; 62
    56d2:	0f be       	out	0x3f, r0	; 63
    56d4:	cd bf       	out	0x3d, r28	; 61
    56d6:	09 94       	ijmp

000056d8 <__epilogue_restores__>:
    56d8:	2a 88       	ldd	r2, Y+18	; 0x12
    56da:	39 88       	ldd	r3, Y+17	; 0x11
    56dc:	48 88       	ldd	r4, Y+16	; 0x10
    56de:	5f 84       	ldd	r5, Y+15	; 0x0f
    56e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    56e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    56e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    56e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    56e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    56ea:	b9 84       	ldd	r11, Y+9	; 0x09
    56ec:	c8 84       	ldd	r12, Y+8	; 0x08
    56ee:	df 80       	ldd	r13, Y+7	; 0x07
    56f0:	ee 80       	ldd	r14, Y+6	; 0x06
    56f2:	fd 80       	ldd	r15, Y+5	; 0x05
    56f4:	0c 81       	ldd	r16, Y+4	; 0x04
    56f6:	1b 81       	ldd	r17, Y+3	; 0x03
    56f8:	aa 81       	ldd	r26, Y+2	; 0x02
    56fa:	b9 81       	ldd	r27, Y+1	; 0x01
    56fc:	ce 0f       	add	r28, r30
    56fe:	d1 1d       	adc	r29, r1
    5700:	0f b6       	in	r0, 0x3f	; 63
    5702:	f8 94       	cli
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	cd bf       	out	0x3d, r28	; 61
    570a:	ed 01       	movw	r28, r26
    570c:	08 95       	ret

0000570e <itoa>:
    570e:	fb 01       	movw	r30, r22
    5710:	9f 01       	movw	r18, r30
    5712:	e8 94       	clt
    5714:	42 30       	cpi	r20, 0x02	; 2
    5716:	c4 f0       	brlt	.+48     	; 0x5748 <itoa+0x3a>
    5718:	45 32       	cpi	r20, 0x25	; 37
    571a:	b4 f4       	brge	.+44     	; 0x5748 <itoa+0x3a>
    571c:	4a 30       	cpi	r20, 0x0A	; 10
    571e:	29 f4       	brne	.+10     	; 0x572a <itoa+0x1c>
    5720:	97 fb       	bst	r25, 7
    5722:	1e f4       	brtc	.+6      	; 0x572a <itoa+0x1c>
    5724:	90 95       	com	r25
    5726:	81 95       	neg	r24
    5728:	9f 4f       	sbci	r25, 0xFF	; 255
    572a:	64 2f       	mov	r22, r20
    572c:	77 27       	eor	r23, r23
    572e:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__udivmodhi4>
    5732:	80 5d       	subi	r24, 0xD0	; 208
    5734:	8a 33       	cpi	r24, 0x3A	; 58
    5736:	0c f0       	brlt	.+2      	; 0x573a <itoa+0x2c>
    5738:	89 5d       	subi	r24, 0xD9	; 217
    573a:	81 93       	st	Z+, r24
    573c:	cb 01       	movw	r24, r22
    573e:	00 97       	sbiw	r24, 0x00	; 0
    5740:	a1 f7       	brne	.-24     	; 0x572a <itoa+0x1c>
    5742:	16 f4       	brtc	.+4      	; 0x5748 <itoa+0x3a>
    5744:	5d e2       	ldi	r21, 0x2D	; 45
    5746:	51 93       	st	Z+, r21
    5748:	10 82       	st	Z, r1
    574a:	c9 01       	movw	r24, r18
    574c:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <strrev>

00005750 <strrev>:
    5750:	dc 01       	movw	r26, r24
    5752:	fc 01       	movw	r30, r24
    5754:	67 2f       	mov	r22, r23
    5756:	71 91       	ld	r23, Z+
    5758:	77 23       	and	r23, r23
    575a:	e1 f7       	brne	.-8      	; 0x5754 <strrev+0x4>
    575c:	32 97       	sbiw	r30, 0x02	; 2
    575e:	04 c0       	rjmp	.+8      	; 0x5768 <strrev+0x18>
    5760:	7c 91       	ld	r23, X
    5762:	6d 93       	st	X+, r22
    5764:	70 83       	st	Z, r23
    5766:	62 91       	ld	r22, -Z
    5768:	ae 17       	cp	r26, r30
    576a:	bf 07       	cpc	r27, r31
    576c:	c8 f3       	brcs	.-14     	; 0x5760 <strrev+0x10>
    576e:	08 95       	ret

00005770 <_exit>:
    5770:	f8 94       	cli

00005772 <__stop_program>:
    5772:	ff cf       	rjmp	.-2      	; 0x5772 <__stop_program>
